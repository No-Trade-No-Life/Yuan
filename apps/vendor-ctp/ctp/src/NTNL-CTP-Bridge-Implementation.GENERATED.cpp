// THIS FILE IS AUTO GENERATED

// DO NOT MODIFY MANUALLY



#include <cstdio>

#include <cstdlib>

#include <cstring>

#include <string>

#include <vector>

#include "spdlog/spdlog.h"

#include "NTNL-CTP-Bridge-Interface.GENERATED.hpp"



std::string codec_convert(const char *to, const char *from, const char *input) {

  if (from == nullptr) return "";

  IConv ic(to, from);

  char out[255];

  size_t outsize = 255;

  bool ret = ic.convert((char *)input, out, outsize);

  if (ret == false) {

    spdlog::error("iconv failed for, original value: {}, converted value: {}", input, out);

    return "";

  } else {

    return std::string(out);

  }

}



void to_json(json& j, const CThostFtdcDisseminationField& p) {
  j = json{
           {"SequenceSeries", p.SequenceSeries},
           {"SequenceNo", p.SequenceNo},
  };
}

void from_json(const json& j, CThostFtdcDisseminationField& p) {
  j.at("SequenceSeries").get_to(p.SequenceSeries);
  j.at("SequenceNo").get_to(p.SequenceNo);

}



void to_json(json& j, const CThostFtdcReqUserLoginField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"Password", codec_convert("UTF-8//TRANSLIT", "GBK", p.Password)},
           {"UserProductInfo", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserProductInfo)},
           {"InterfaceProductInfo", codec_convert("UTF-8//TRANSLIT", "GBK", p.InterfaceProductInfo)},
           {"ProtocolInfo", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProtocolInfo)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"OneTimePassword", codec_convert("UTF-8//TRANSLIT", "GBK", p.OneTimePassword)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"LoginRemark", codec_convert("UTF-8//TRANSLIT", "GBK", p.LoginRemark)},
           {"ClientIPPort", p.ClientIPPort},
           {"ClientIPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientIPAddress)},
  };
}

void from_json(const json& j, CThostFtdcReqUserLoginField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.UserID));
  auto &v3 = j.at("Password").get_ref<const std::string &>();
  std::strncpy(p.Password, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.Password));
  auto &v4 = j.at("UserProductInfo").get_ref<const std::string &>();
  std::strncpy(p.UserProductInfo, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.UserProductInfo));
  auto &v5 = j.at("InterfaceProductInfo").get_ref<const std::string &>();
  std::strncpy(p.InterfaceProductInfo, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.InterfaceProductInfo));
  auto &v6 = j.at("ProtocolInfo").get_ref<const std::string &>();
  std::strncpy(p.ProtocolInfo, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.ProtocolInfo));
  auto &v7 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v8 = j.at("OneTimePassword").get_ref<const std::string &>();
  std::strncpy(p.OneTimePassword, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.OneTimePassword));
  auto &v9 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.reserve1));
  auto &v10 = j.at("LoginRemark").get_ref<const std::string &>();
  std::strncpy(p.LoginRemark, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.LoginRemark));
  j.at("ClientIPPort").get_to(p.ClientIPPort);
  auto &v12 = j.at("ClientIPAddress").get_ref<const std::string &>();
  std::strncpy(p.ClientIPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.ClientIPAddress));

}



void to_json(json& j, const CThostFtdcRspUserLoginField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"LoginTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.LoginTime)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"SystemName", codec_convert("UTF-8//TRANSLIT", "GBK", p.SystemName)},
           {"FrontID", p.FrontID},
           {"SessionID", p.SessionID},
           {"MaxOrderRef", codec_convert("UTF-8//TRANSLIT", "GBK", p.MaxOrderRef)},
           {"SHFETime", codec_convert("UTF-8//TRANSLIT", "GBK", p.SHFETime)},
           {"DCETime", codec_convert("UTF-8//TRANSLIT", "GBK", p.DCETime)},
           {"CZCETime", codec_convert("UTF-8//TRANSLIT", "GBK", p.CZCETime)},
           {"FFEXTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.FFEXTime)},
           {"INETime", codec_convert("UTF-8//TRANSLIT", "GBK", p.INETime)},
           {"SysVersion", codec_convert("UTF-8//TRANSLIT", "GBK", p.SysVersion)},
           {"GFEXTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.GFEXTime)},
           {"LoginDRIdentityID", p.LoginDRIdentityID},
           {"UserDRIdentityID", p.UserDRIdentityID},
  };
}

void from_json(const json& j, CThostFtdcRspUserLoginField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("LoginTime").get_ref<const std::string &>();
  std::strncpy(p.LoginTime, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.LoginTime));
  auto &v2 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v3 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.UserID));
  auto &v4 = j.at("SystemName").get_ref<const std::string &>();
  std::strncpy(p.SystemName, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.SystemName));
  j.at("FrontID").get_to(p.FrontID);
  j.at("SessionID").get_to(p.SessionID);
  auto &v7 = j.at("MaxOrderRef").get_ref<const std::string &>();
  std::strncpy(p.MaxOrderRef, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.MaxOrderRef));
  auto &v8 = j.at("SHFETime").get_ref<const std::string &>();
  std::strncpy(p.SHFETime, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.SHFETime));
  auto &v9 = j.at("DCETime").get_ref<const std::string &>();
  std::strncpy(p.DCETime, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.DCETime));
  auto &v10 = j.at("CZCETime").get_ref<const std::string &>();
  std::strncpy(p.CZCETime, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.CZCETime));
  auto &v11 = j.at("FFEXTime").get_ref<const std::string &>();
  std::strncpy(p.FFEXTime, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.FFEXTime));
  auto &v12 = j.at("INETime").get_ref<const std::string &>();
  std::strncpy(p.INETime, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.INETime));
  auto &v13 = j.at("SysVersion").get_ref<const std::string &>();
  std::strncpy(p.SysVersion, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.SysVersion));
  auto &v14 = j.at("GFEXTime").get_ref<const std::string &>();
  std::strncpy(p.GFEXTime, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.GFEXTime));
  j.at("LoginDRIdentityID").get_to(p.LoginDRIdentityID);
  j.at("UserDRIdentityID").get_to(p.UserDRIdentityID);

}



void to_json(json& j, const CThostFtdcUserLogoutField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
  };
}

void from_json(const json& j, CThostFtdcUserLogoutField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.UserID));

}



void to_json(json& j, const CThostFtdcForceUserLogoutField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
  };
}

void from_json(const json& j, CThostFtdcForceUserLogoutField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.UserID));

}



void to_json(json& j, const CThostFtdcReqAuthenticateField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"UserProductInfo", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserProductInfo)},
           {"AuthCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.AuthCode)},
           {"AppID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AppID)},
  };
}

void from_json(const json& j, CThostFtdcReqAuthenticateField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.UserID));
  auto &v2 = j.at("UserProductInfo").get_ref<const std::string &>();
  std::strncpy(p.UserProductInfo, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.UserProductInfo));
  auto &v3 = j.at("AuthCode").get_ref<const std::string &>();
  std::strncpy(p.AuthCode, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.AuthCode));
  auto &v4 = j.at("AppID").get_ref<const std::string &>();
  std::strncpy(p.AppID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.AppID));

}



void to_json(json& j, const CThostFtdcRspAuthenticateField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"UserProductInfo", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserProductInfo)},
           {"AppID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AppID)},
           {"AppType", std::string(1, p.AppType)},
  };
}

void from_json(const json& j, CThostFtdcRspAuthenticateField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.UserID));
  auto &v2 = j.at("UserProductInfo").get_ref<const std::string &>();
  std::strncpy(p.UserProductInfo, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.UserProductInfo));
  auto &v3 = j.at("AppID").get_ref<const std::string &>();
  std::strncpy(p.AppID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.AppID));
  auto &v4 = j.at("AppType").get_ref<const std::string &>();
  p.AppType = v4.at(0);

}



void to_json(json& j, const CThostFtdcAuthenticationInfoField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"UserProductInfo", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserProductInfo)},
           {"AuthInfo", codec_convert("UTF-8//TRANSLIT", "GBK", p.AuthInfo)},
           {"IsResult", p.IsResult},
           {"AppID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AppID)},
           {"AppType", std::string(1, p.AppType)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ClientIPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientIPAddress)},
  };
}

void from_json(const json& j, CThostFtdcAuthenticationInfoField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.UserID));
  auto &v2 = j.at("UserProductInfo").get_ref<const std::string &>();
  std::strncpy(p.UserProductInfo, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.UserProductInfo));
  auto &v3 = j.at("AuthInfo").get_ref<const std::string &>();
  std::strncpy(p.AuthInfo, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.AuthInfo));
  j.at("IsResult").get_to(p.IsResult);
  auto &v5 = j.at("AppID").get_ref<const std::string &>();
  std::strncpy(p.AppID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.AppID));
  auto &v6 = j.at("AppType").get_ref<const std::string &>();
  p.AppType = v6.at(0);
  auto &v7 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.reserve1));
  auto &v8 = j.at("ClientIPAddress").get_ref<const std::string &>();
  std::strncpy(p.ClientIPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.ClientIPAddress));

}



void to_json(json& j, const CThostFtdcRspUserLogin2Field& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"LoginTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.LoginTime)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"SystemName", codec_convert("UTF-8//TRANSLIT", "GBK", p.SystemName)},
           {"FrontID", p.FrontID},
           {"SessionID", p.SessionID},
           {"MaxOrderRef", codec_convert("UTF-8//TRANSLIT", "GBK", p.MaxOrderRef)},
           {"SHFETime", codec_convert("UTF-8//TRANSLIT", "GBK", p.SHFETime)},
           {"DCETime", codec_convert("UTF-8//TRANSLIT", "GBK", p.DCETime)},
           {"CZCETime", codec_convert("UTF-8//TRANSLIT", "GBK", p.CZCETime)},
           {"FFEXTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.FFEXTime)},
           {"INETime", codec_convert("UTF-8//TRANSLIT", "GBK", p.INETime)},
           {"RandomString", codec_convert("UTF-8//TRANSLIT", "GBK", p.RandomString)},
  };
}

void from_json(const json& j, CThostFtdcRspUserLogin2Field& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("LoginTime").get_ref<const std::string &>();
  std::strncpy(p.LoginTime, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.LoginTime));
  auto &v2 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v3 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.UserID));
  auto &v4 = j.at("SystemName").get_ref<const std::string &>();
  std::strncpy(p.SystemName, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.SystemName));
  j.at("FrontID").get_to(p.FrontID);
  j.at("SessionID").get_to(p.SessionID);
  auto &v7 = j.at("MaxOrderRef").get_ref<const std::string &>();
  std::strncpy(p.MaxOrderRef, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.MaxOrderRef));
  auto &v8 = j.at("SHFETime").get_ref<const std::string &>();
  std::strncpy(p.SHFETime, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.SHFETime));
  auto &v9 = j.at("DCETime").get_ref<const std::string &>();
  std::strncpy(p.DCETime, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.DCETime));
  auto &v10 = j.at("CZCETime").get_ref<const std::string &>();
  std::strncpy(p.CZCETime, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.CZCETime));
  auto &v11 = j.at("FFEXTime").get_ref<const std::string &>();
  std::strncpy(p.FFEXTime, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.FFEXTime));
  auto &v12 = j.at("INETime").get_ref<const std::string &>();
  std::strncpy(p.INETime, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.INETime));
  auto &v13 = j.at("RandomString").get_ref<const std::string &>();
  std::strncpy(p.RandomString, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.RandomString));

}



void to_json(json& j, const CThostFtdcTransferHeaderField& p) {
  j = json{
           {"Version", codec_convert("UTF-8//TRANSLIT", "GBK", p.Version)},
           {"TradeCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeCode)},
           {"TradeDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDate)},
           {"TradeTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTime)},
           {"TradeSerial", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeSerial)},
           {"FutureID", codec_convert("UTF-8//TRANSLIT", "GBK", p.FutureID)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBrchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBrchID)},
           {"OperNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.OperNo)},
           {"DeviceID", codec_convert("UTF-8//TRANSLIT", "GBK", p.DeviceID)},
           {"RecordNum", codec_convert("UTF-8//TRANSLIT", "GBK", p.RecordNum)},
           {"SessionID", p.SessionID},
           {"RequestID", p.RequestID},
  };
}

void from_json(const json& j, CThostFtdcTransferHeaderField& p) {
  auto &v0 = j.at("Version").get_ref<const std::string &>();
  std::strncpy(p.Version, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.Version));
  auto &v1 = j.at("TradeCode").get_ref<const std::string &>();
  std::strncpy(p.TradeCode, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.TradeCode));
  auto &v2 = j.at("TradeDate").get_ref<const std::string &>();
  std::strncpy(p.TradeDate, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.TradeDate));
  auto &v3 = j.at("TradeTime").get_ref<const std::string &>();
  std::strncpy(p.TradeTime, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.TradeTime));
  auto &v4 = j.at("TradeSerial").get_ref<const std::string &>();
  std::strncpy(p.TradeSerial, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.TradeSerial));
  auto &v5 = j.at("FutureID").get_ref<const std::string &>();
  std::strncpy(p.FutureID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.FutureID));
  auto &v6 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.BankID));
  auto &v7 = j.at("BankBrchID").get_ref<const std::string &>();
  std::strncpy(p.BankBrchID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BankBrchID));
  auto &v8 = j.at("OperNo").get_ref<const std::string &>();
  std::strncpy(p.OperNo, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.OperNo));
  auto &v9 = j.at("DeviceID").get_ref<const std::string &>();
  std::strncpy(p.DeviceID, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.DeviceID));
  auto &v10 = j.at("RecordNum").get_ref<const std::string &>();
  std::strncpy(p.RecordNum, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.RecordNum));
  j.at("SessionID").get_to(p.SessionID);
  j.at("RequestID").get_to(p.RequestID);

}



void to_json(json& j, const CThostFtdcTransferBankToFutureReqField& p) {
  j = json{
           {"FutureAccount", codec_convert("UTF-8//TRANSLIT", "GBK", p.FutureAccount)},
           {"FuturePwdFlag", std::string(1, p.FuturePwdFlag)},
           {"FutureAccPwd", codec_convert("UTF-8//TRANSLIT", "GBK", p.FutureAccPwd)},
           {"TradeAmt", p.TradeAmt},
           {"CustFee", p.CustFee},
           {"CurrencyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyCode)},
  };
}

void from_json(const json& j, CThostFtdcTransferBankToFutureReqField& p) {
  auto &v0 = j.at("FutureAccount").get_ref<const std::string &>();
  std::strncpy(p.FutureAccount, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.FutureAccount));
  auto &v1 = j.at("FuturePwdFlag").get_ref<const std::string &>();
  p.FuturePwdFlag = v1.at(0);
  auto &v2 = j.at("FutureAccPwd").get_ref<const std::string &>();
  std::strncpy(p.FutureAccPwd, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.FutureAccPwd));
  j.at("TradeAmt").get_to(p.TradeAmt);
  j.at("CustFee").get_to(p.CustFee);
  auto &v5 = j.at("CurrencyCode").get_ref<const std::string &>();
  std::strncpy(p.CurrencyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.CurrencyCode));

}



void to_json(json& j, const CThostFtdcTransferBankToFutureRspField& p) {
  j = json{
           {"RetCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.RetCode)},
           {"RetInfo", codec_convert("UTF-8//TRANSLIT", "GBK", p.RetInfo)},
           {"FutureAccount", codec_convert("UTF-8//TRANSLIT", "GBK", p.FutureAccount)},
           {"TradeAmt", p.TradeAmt},
           {"CustFee", p.CustFee},
           {"CurrencyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyCode)},
  };
}

void from_json(const json& j, CThostFtdcTransferBankToFutureRspField& p) {
  auto &v0 = j.at("RetCode").get_ref<const std::string &>();
  std::strncpy(p.RetCode, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.RetCode));
  auto &v1 = j.at("RetInfo").get_ref<const std::string &>();
  std::strncpy(p.RetInfo, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.RetInfo));
  auto &v2 = j.at("FutureAccount").get_ref<const std::string &>();
  std::strncpy(p.FutureAccount, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.FutureAccount));
  j.at("TradeAmt").get_to(p.TradeAmt);
  j.at("CustFee").get_to(p.CustFee);
  auto &v5 = j.at("CurrencyCode").get_ref<const std::string &>();
  std::strncpy(p.CurrencyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.CurrencyCode));

}



void to_json(json& j, const CThostFtdcTransferFutureToBankReqField& p) {
  j = json{
           {"FutureAccount", codec_convert("UTF-8//TRANSLIT", "GBK", p.FutureAccount)},
           {"FuturePwdFlag", std::string(1, p.FuturePwdFlag)},
           {"FutureAccPwd", codec_convert("UTF-8//TRANSLIT", "GBK", p.FutureAccPwd)},
           {"TradeAmt", p.TradeAmt},
           {"CustFee", p.CustFee},
           {"CurrencyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyCode)},
  };
}

void from_json(const json& j, CThostFtdcTransferFutureToBankReqField& p) {
  auto &v0 = j.at("FutureAccount").get_ref<const std::string &>();
  std::strncpy(p.FutureAccount, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.FutureAccount));
  auto &v1 = j.at("FuturePwdFlag").get_ref<const std::string &>();
  p.FuturePwdFlag = v1.at(0);
  auto &v2 = j.at("FutureAccPwd").get_ref<const std::string &>();
  std::strncpy(p.FutureAccPwd, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.FutureAccPwd));
  j.at("TradeAmt").get_to(p.TradeAmt);
  j.at("CustFee").get_to(p.CustFee);
  auto &v5 = j.at("CurrencyCode").get_ref<const std::string &>();
  std::strncpy(p.CurrencyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.CurrencyCode));

}



void to_json(json& j, const CThostFtdcTransferFutureToBankRspField& p) {
  j = json{
           {"RetCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.RetCode)},
           {"RetInfo", codec_convert("UTF-8//TRANSLIT", "GBK", p.RetInfo)},
           {"FutureAccount", codec_convert("UTF-8//TRANSLIT", "GBK", p.FutureAccount)},
           {"TradeAmt", p.TradeAmt},
           {"CustFee", p.CustFee},
           {"CurrencyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyCode)},
  };
}

void from_json(const json& j, CThostFtdcTransferFutureToBankRspField& p) {
  auto &v0 = j.at("RetCode").get_ref<const std::string &>();
  std::strncpy(p.RetCode, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.RetCode));
  auto &v1 = j.at("RetInfo").get_ref<const std::string &>();
  std::strncpy(p.RetInfo, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.RetInfo));
  auto &v2 = j.at("FutureAccount").get_ref<const std::string &>();
  std::strncpy(p.FutureAccount, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.FutureAccount));
  j.at("TradeAmt").get_to(p.TradeAmt);
  j.at("CustFee").get_to(p.CustFee);
  auto &v5 = j.at("CurrencyCode").get_ref<const std::string &>();
  std::strncpy(p.CurrencyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.CurrencyCode));

}



void to_json(json& j, const CThostFtdcTransferQryBankReqField& p) {
  j = json{
           {"FutureAccount", codec_convert("UTF-8//TRANSLIT", "GBK", p.FutureAccount)},
           {"FuturePwdFlag", std::string(1, p.FuturePwdFlag)},
           {"FutureAccPwd", codec_convert("UTF-8//TRANSLIT", "GBK", p.FutureAccPwd)},
           {"CurrencyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyCode)},
  };
}

void from_json(const json& j, CThostFtdcTransferQryBankReqField& p) {
  auto &v0 = j.at("FutureAccount").get_ref<const std::string &>();
  std::strncpy(p.FutureAccount, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.FutureAccount));
  auto &v1 = j.at("FuturePwdFlag").get_ref<const std::string &>();
  p.FuturePwdFlag = v1.at(0);
  auto &v2 = j.at("FutureAccPwd").get_ref<const std::string &>();
  std::strncpy(p.FutureAccPwd, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.FutureAccPwd));
  auto &v3 = j.at("CurrencyCode").get_ref<const std::string &>();
  std::strncpy(p.CurrencyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.CurrencyCode));

}



void to_json(json& j, const CThostFtdcTransferQryBankRspField& p) {
  j = json{
           {"RetCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.RetCode)},
           {"RetInfo", codec_convert("UTF-8//TRANSLIT", "GBK", p.RetInfo)},
           {"FutureAccount", codec_convert("UTF-8//TRANSLIT", "GBK", p.FutureAccount)},
           {"TradeAmt", p.TradeAmt},
           {"UseAmt", p.UseAmt},
           {"FetchAmt", p.FetchAmt},
           {"CurrencyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyCode)},
  };
}

void from_json(const json& j, CThostFtdcTransferQryBankRspField& p) {
  auto &v0 = j.at("RetCode").get_ref<const std::string &>();
  std::strncpy(p.RetCode, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.RetCode));
  auto &v1 = j.at("RetInfo").get_ref<const std::string &>();
  std::strncpy(p.RetInfo, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.RetInfo));
  auto &v2 = j.at("FutureAccount").get_ref<const std::string &>();
  std::strncpy(p.FutureAccount, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.FutureAccount));
  j.at("TradeAmt").get_to(p.TradeAmt);
  j.at("UseAmt").get_to(p.UseAmt);
  j.at("FetchAmt").get_to(p.FetchAmt);
  auto &v6 = j.at("CurrencyCode").get_ref<const std::string &>();
  std::strncpy(p.CurrencyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.CurrencyCode));

}



void to_json(json& j, const CThostFtdcTransferQryDetailReqField& p) {
  j = json{
           {"FutureAccount", codec_convert("UTF-8//TRANSLIT", "GBK", p.FutureAccount)},
  };
}

void from_json(const json& j, CThostFtdcTransferQryDetailReqField& p) {
  auto &v0 = j.at("FutureAccount").get_ref<const std::string &>();
  std::strncpy(p.FutureAccount, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.FutureAccount));

}



void to_json(json& j, const CThostFtdcTransferQryDetailRspField& p) {
  j = json{
           {"TradeDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDate)},
           {"TradeTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTime)},
           {"TradeCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeCode)},
           {"FutureSerial", p.FutureSerial},
           {"FutureID", codec_convert("UTF-8//TRANSLIT", "GBK", p.FutureID)},
           {"FutureAccount", codec_convert("UTF-8//TRANSLIT", "GBK", p.FutureAccount)},
           {"BankSerial", p.BankSerial},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBrchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBrchID)},
           {"BankAccount", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankAccount)},
           {"CertCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.CertCode)},
           {"CurrencyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyCode)},
           {"TxAmount", p.TxAmount},
           {"Flag", std::string(1, p.Flag)},
  };
}

void from_json(const json& j, CThostFtdcTransferQryDetailRspField& p) {
  auto &v0 = j.at("TradeDate").get_ref<const std::string &>();
  std::strncpy(p.TradeDate, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradeDate));
  auto &v1 = j.at("TradeTime").get_ref<const std::string &>();
  std::strncpy(p.TradeTime, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.TradeTime));
  auto &v2 = j.at("TradeCode").get_ref<const std::string &>();
  std::strncpy(p.TradeCode, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.TradeCode));
  j.at("FutureSerial").get_to(p.FutureSerial);
  auto &v4 = j.at("FutureID").get_ref<const std::string &>();
  std::strncpy(p.FutureID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.FutureID));
  auto &v5 = j.at("FutureAccount").get_ref<const std::string &>();
  std::strncpy(p.FutureAccount, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.FutureAccount));
  j.at("BankSerial").get_to(p.BankSerial);
  auto &v7 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BankID));
  auto &v8 = j.at("BankBrchID").get_ref<const std::string &>();
  std::strncpy(p.BankBrchID, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.BankBrchID));
  auto &v9 = j.at("BankAccount").get_ref<const std::string &>();
  std::strncpy(p.BankAccount, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.BankAccount));
  auto &v10 = j.at("CertCode").get_ref<const std::string &>();
  std::strncpy(p.CertCode, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.CertCode));
  auto &v11 = j.at("CurrencyCode").get_ref<const std::string &>();
  std::strncpy(p.CurrencyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.CurrencyCode));
  j.at("TxAmount").get_to(p.TxAmount);
  auto &v13 = j.at("Flag").get_ref<const std::string &>();
  p.Flag = v13.at(0);

}



void to_json(json& j, const CThostFtdcRspInfoField& p) {
  j = json{
           {"ErrorID", p.ErrorID},
           {"ErrorMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.ErrorMsg)},
  };
}

void from_json(const json& j, CThostFtdcRspInfoField& p) {
  j.at("ErrorID").get_to(p.ErrorID);
  auto &v1 = j.at("ErrorMsg").get_ref<const std::string &>();
  std::strncpy(p.ErrorMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ErrorMsg));

}



void to_json(json& j, const CThostFtdcExchangeField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ExchangeName", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeName)},
           {"ExchangeProperty", std::string(1, p.ExchangeProperty)},
  };
}

void from_json(const json& j, CThostFtdcExchangeField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("ExchangeName").get_ref<const std::string &>();
  std::strncpy(p.ExchangeName, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeName));
  auto &v2 = j.at("ExchangeProperty").get_ref<const std::string &>();
  p.ExchangeProperty = v2.at(0);

}



void to_json(json& j, const CThostFtdcProductField& p) {
  j = json{
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ProductName", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductName)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ProductClass", std::string(1, p.ProductClass)},
           {"VolumeMultiple", p.VolumeMultiple},
           {"PriceTick", p.PriceTick},
           {"MaxMarketOrderVolume", p.MaxMarketOrderVolume},
           {"MinMarketOrderVolume", p.MinMarketOrderVolume},
           {"MaxLimitOrderVolume", p.MaxLimitOrderVolume},
           {"MinLimitOrderVolume", p.MinLimitOrderVolume},
           {"PositionType", std::string(1, p.PositionType)},
           {"PositionDateType", std::string(1, p.PositionDateType)},
           {"CloseDealType", std::string(1, p.CloseDealType)},
           {"TradeCurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeCurrencyID)},
           {"MortgageFundUseRange", std::string(1, p.MortgageFundUseRange)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"UnderlyingMultiple", p.UnderlyingMultiple},
           {"ProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductID)},
           {"ExchangeProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeProductID)},
           {"OpenLimitControlLevel", std::string(1, p.OpenLimitControlLevel)},
           {"OrderFreqControlLevel", std::string(1, p.OrderFreqControlLevel)},
  };
}

void from_json(const json& j, CThostFtdcProductField& p) {
  auto &v0 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.reserve1));
  auto &v1 = j.at("ProductName").get_ref<const std::string &>();
  std::strncpy(p.ProductName, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ProductName));
  auto &v2 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v3 = j.at("ProductClass").get_ref<const std::string &>();
  p.ProductClass = v3.at(0);
  j.at("VolumeMultiple").get_to(p.VolumeMultiple);
  j.at("PriceTick").get_to(p.PriceTick);
  j.at("MaxMarketOrderVolume").get_to(p.MaxMarketOrderVolume);
  j.at("MinMarketOrderVolume").get_to(p.MinMarketOrderVolume);
  j.at("MaxLimitOrderVolume").get_to(p.MaxLimitOrderVolume);
  j.at("MinLimitOrderVolume").get_to(p.MinLimitOrderVolume);
  auto &v10 = j.at("PositionType").get_ref<const std::string &>();
  p.PositionType = v10.at(0);
  auto &v11 = j.at("PositionDateType").get_ref<const std::string &>();
  p.PositionDateType = v11.at(0);
  auto &v12 = j.at("CloseDealType").get_ref<const std::string &>();
  p.CloseDealType = v12.at(0);
  auto &v13 = j.at("TradeCurrencyID").get_ref<const std::string &>();
  std::strncpy(p.TradeCurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.TradeCurrencyID));
  auto &v14 = j.at("MortgageFundUseRange").get_ref<const std::string &>();
  p.MortgageFundUseRange = v14.at(0);
  auto &v15 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.reserve2));
  j.at("UnderlyingMultiple").get_to(p.UnderlyingMultiple);
  auto &v17 = j.at("ProductID").get_ref<const std::string &>();
  std::strncpy(p.ProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.ProductID));
  auto &v18 = j.at("ExchangeProductID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.ExchangeProductID));
  auto &v19 = j.at("OpenLimitControlLevel").get_ref<const std::string &>();
  p.OpenLimitControlLevel = v19.at(0);
  auto &v20 = j.at("OrderFreqControlLevel").get_ref<const std::string &>();
  p.OrderFreqControlLevel = v20.at(0);

}



void to_json(json& j, const CThostFtdcInstrumentField& p) {
  j = json{
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InstrumentName", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentName)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"reserve3", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve3)},
           {"ProductClass", std::string(1, p.ProductClass)},
           {"DeliveryYear", p.DeliveryYear},
           {"DeliveryMonth", p.DeliveryMonth},
           {"MaxMarketOrderVolume", p.MaxMarketOrderVolume},
           {"MinMarketOrderVolume", p.MinMarketOrderVolume},
           {"MaxLimitOrderVolume", p.MaxLimitOrderVolume},
           {"MinLimitOrderVolume", p.MinLimitOrderVolume},
           {"VolumeMultiple", p.VolumeMultiple},
           {"PriceTick", p.PriceTick},
           {"CreateDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.CreateDate)},
           {"OpenDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.OpenDate)},
           {"ExpireDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExpireDate)},
           {"StartDelivDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.StartDelivDate)},
           {"EndDelivDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.EndDelivDate)},
           {"InstLifePhase", std::string(1, p.InstLifePhase)},
           {"IsTrading", p.IsTrading},
           {"PositionType", std::string(1, p.PositionType)},
           {"PositionDateType", std::string(1, p.PositionDateType)},
           {"LongMarginRatio", p.LongMarginRatio},
           {"ShortMarginRatio", p.ShortMarginRatio},
           {"MaxMarginSideAlgorithm", std::string(1, p.MaxMarginSideAlgorithm)},
           {"reserve4", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve4)},
           {"StrikePrice", p.StrikePrice},
           {"OptionsType", std::string(1, p.OptionsType)},
           {"UnderlyingMultiple", p.UnderlyingMultiple},
           {"CombinationType", std::string(1, p.CombinationType)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"ExchangeInstID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeInstID)},
           {"ProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductID)},
           {"UnderlyingInstrID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UnderlyingInstrID)},
  };
}

void from_json(const json& j, CThostFtdcInstrumentField& p) {
  auto &v0 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.reserve1));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v2 = j.at("InstrumentName").get_ref<const std::string &>();
  std::strncpy(p.InstrumentName, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InstrumentName));
  auto &v3 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.reserve2));
  auto &v4 = j.at("reserve3").get_ref<const std::string &>();
  std::strncpy(p.reserve3, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.reserve3));
  auto &v5 = j.at("ProductClass").get_ref<const std::string &>();
  p.ProductClass = v5.at(0);
  j.at("DeliveryYear").get_to(p.DeliveryYear);
  j.at("DeliveryMonth").get_to(p.DeliveryMonth);
  j.at("MaxMarketOrderVolume").get_to(p.MaxMarketOrderVolume);
  j.at("MinMarketOrderVolume").get_to(p.MinMarketOrderVolume);
  j.at("MaxLimitOrderVolume").get_to(p.MaxLimitOrderVolume);
  j.at("MinLimitOrderVolume").get_to(p.MinLimitOrderVolume);
  j.at("VolumeMultiple").get_to(p.VolumeMultiple);
  j.at("PriceTick").get_to(p.PriceTick);
  auto &v14 = j.at("CreateDate").get_ref<const std::string &>();
  std::strncpy(p.CreateDate, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.CreateDate));
  auto &v15 = j.at("OpenDate").get_ref<const std::string &>();
  std::strncpy(p.OpenDate, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.OpenDate));
  auto &v16 = j.at("ExpireDate").get_ref<const std::string &>();
  std::strncpy(p.ExpireDate, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.ExpireDate));
  auto &v17 = j.at("StartDelivDate").get_ref<const std::string &>();
  std::strncpy(p.StartDelivDate, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.StartDelivDate));
  auto &v18 = j.at("EndDelivDate").get_ref<const std::string &>();
  std::strncpy(p.EndDelivDate, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.EndDelivDate));
  auto &v19 = j.at("InstLifePhase").get_ref<const std::string &>();
  p.InstLifePhase = v19.at(0);
  j.at("IsTrading").get_to(p.IsTrading);
  auto &v21 = j.at("PositionType").get_ref<const std::string &>();
  p.PositionType = v21.at(0);
  auto &v22 = j.at("PositionDateType").get_ref<const std::string &>();
  p.PositionDateType = v22.at(0);
  j.at("LongMarginRatio").get_to(p.LongMarginRatio);
  j.at("ShortMarginRatio").get_to(p.ShortMarginRatio);
  auto &v25 = j.at("MaxMarginSideAlgorithm").get_ref<const std::string &>();
  p.MaxMarginSideAlgorithm = v25.at(0);
  auto &v26 = j.at("reserve4").get_ref<const std::string &>();
  std::strncpy(p.reserve4, codec_convert("GBK//TRANSLIT", "UTF-8", v26.c_str()).c_str(), sizeof(p.reserve4));
  j.at("StrikePrice").get_to(p.StrikePrice);
  auto &v28 = j.at("OptionsType").get_ref<const std::string &>();
  p.OptionsType = v28.at(0);
  j.at("UnderlyingMultiple").get_to(p.UnderlyingMultiple);
  auto &v30 = j.at("CombinationType").get_ref<const std::string &>();
  p.CombinationType = v30.at(0);
  auto &v31 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v31.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v32 = j.at("ExchangeInstID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeInstID, codec_convert("GBK//TRANSLIT", "UTF-8", v32.c_str()).c_str(), sizeof(p.ExchangeInstID));
  auto &v33 = j.at("ProductID").get_ref<const std::string &>();
  std::strncpy(p.ProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v33.c_str()).c_str(), sizeof(p.ProductID));
  auto &v34 = j.at("UnderlyingInstrID").get_ref<const std::string &>();
  std::strncpy(p.UnderlyingInstrID, codec_convert("GBK//TRANSLIT", "UTF-8", v34.c_str()).c_str(), sizeof(p.UnderlyingInstrID));

}



void to_json(json& j, const CThostFtdcBrokerField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BrokerAbbr", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerAbbr)},
           {"BrokerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerName)},
           {"IsActive", p.IsActive},
  };
}

void from_json(const json& j, CThostFtdcBrokerField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("BrokerAbbr").get_ref<const std::string &>();
  std::strncpy(p.BrokerAbbr, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerAbbr));
  auto &v2 = j.at("BrokerName").get_ref<const std::string &>();
  std::strncpy(p.BrokerName, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BrokerName));
  j.at("IsActive").get_to(p.IsActive);

}



void to_json(json& j, const CThostFtdcTraderField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"Password", codec_convert("UTF-8//TRANSLIT", "GBK", p.Password)},
           {"InstallCount", p.InstallCount},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"OrderCancelAlg", std::string(1, p.OrderCancelAlg)},
           {"TradeInstallCount", p.TradeInstallCount},
           {"MDInstallCount", p.MDInstallCount},
  };
}

void from_json(const json& j, CThostFtdcTraderField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.TraderID));
  auto &v2 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v3 = j.at("Password").get_ref<const std::string &>();
  std::strncpy(p.Password, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.Password));
  j.at("InstallCount").get_to(p.InstallCount);
  auto &v5 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v6 = j.at("OrderCancelAlg").get_ref<const std::string &>();
  p.OrderCancelAlg = v6.at(0);
  j.at("TradeInstallCount").get_to(p.TradeInstallCount);
  j.at("MDInstallCount").get_to(p.MDInstallCount);

}



void to_json(json& j, const CThostFtdcInvestorField& p) {
  j = json{
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorGroupID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorGroupID)},
           {"InvestorName", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorName)},
           {"IdentifiedCardType", std::string(1, p.IdentifiedCardType)},
           {"IdentifiedCardNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.IdentifiedCardNo)},
           {"IsActive", p.IsActive},
           {"Telephone", codec_convert("UTF-8//TRANSLIT", "GBK", p.Telephone)},
           {"Address", codec_convert("UTF-8//TRANSLIT", "GBK", p.Address)},
           {"OpenDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.OpenDate)},
           {"Mobile", codec_convert("UTF-8//TRANSLIT", "GBK", p.Mobile)},
           {"CommModelID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CommModelID)},
           {"MarginModelID", codec_convert("UTF-8//TRANSLIT", "GBK", p.MarginModelID)},
           {"IsOrderFreq", std::string(1, p.IsOrderFreq)},
           {"IsOpenVolLimit", std::string(1, p.IsOpenVolLimit)},
  };
}

void from_json(const json& j, CThostFtdcInvestorField& p) {
  auto &v0 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("InvestorGroupID").get_ref<const std::string &>();
  std::strncpy(p.InvestorGroupID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorGroupID));
  auto &v3 = j.at("InvestorName").get_ref<const std::string &>();
  std::strncpy(p.InvestorName, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InvestorName));
  auto &v4 = j.at("IdentifiedCardType").get_ref<const std::string &>();
  p.IdentifiedCardType = v4.at(0);
  auto &v5 = j.at("IdentifiedCardNo").get_ref<const std::string &>();
  std::strncpy(p.IdentifiedCardNo, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.IdentifiedCardNo));
  j.at("IsActive").get_to(p.IsActive);
  auto &v7 = j.at("Telephone").get_ref<const std::string &>();
  std::strncpy(p.Telephone, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.Telephone));
  auto &v8 = j.at("Address").get_ref<const std::string &>();
  std::strncpy(p.Address, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.Address));
  auto &v9 = j.at("OpenDate").get_ref<const std::string &>();
  std::strncpy(p.OpenDate, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.OpenDate));
  auto &v10 = j.at("Mobile").get_ref<const std::string &>();
  std::strncpy(p.Mobile, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.Mobile));
  auto &v11 = j.at("CommModelID").get_ref<const std::string &>();
  std::strncpy(p.CommModelID, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.CommModelID));
  auto &v12 = j.at("MarginModelID").get_ref<const std::string &>();
  std::strncpy(p.MarginModelID, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.MarginModelID));
  auto &v13 = j.at("IsOrderFreq").get_ref<const std::string &>();
  p.IsOrderFreq = v13.at(0);
  auto &v14 = j.at("IsOpenVolLimit").get_ref<const std::string &>();
  p.IsOpenVolLimit = v14.at(0);

}



void to_json(json& j, const CThostFtdcTradingCodeField& p) {
  j = json{
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"IsActive", p.IsActive},
           {"ClientIDType", std::string(1, p.ClientIDType)},
           {"BranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BranchID)},
           {"BizType", std::string(1, p.BizType)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
  };
}

void from_json(const json& j, CThostFtdcTradingCodeField& p) {
  auto &v0 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v3 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ClientID));
  j.at("IsActive").get_to(p.IsActive);
  auto &v5 = j.at("ClientIDType").get_ref<const std::string &>();
  p.ClientIDType = v5.at(0);
  auto &v6 = j.at("BranchID").get_ref<const std::string &>();
  std::strncpy(p.BranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.BranchID));
  auto &v7 = j.at("BizType").get_ref<const std::string &>();
  p.BizType = v7.at(0);
  auto &v8 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.InvestUnitID));

}



void to_json(json& j, const CThostFtdcPartBrokerField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"IsActive", p.IsActive},
  };
}

void from_json(const json& j, CThostFtdcPartBrokerField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v2 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ParticipantID));
  j.at("IsActive").get_to(p.IsActive);

}



void to_json(json& j, const CThostFtdcSuperUserField& p) {
  j = json{
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"UserName", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserName)},
           {"Password", codec_convert("UTF-8//TRANSLIT", "GBK", p.Password)},
           {"IsActive", p.IsActive},
  };
}

void from_json(const json& j, CThostFtdcSuperUserField& p) {
  auto &v0 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.UserID));
  auto &v1 = j.at("UserName").get_ref<const std::string &>();
  std::strncpy(p.UserName, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.UserName));
  auto &v2 = j.at("Password").get_ref<const std::string &>();
  std::strncpy(p.Password, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.Password));
  j.at("IsActive").get_to(p.IsActive);

}



void to_json(json& j, const CThostFtdcSuperUserFunctionField& p) {
  j = json{
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"FunctionCode", std::string(1, p.FunctionCode)},
  };
}

void from_json(const json& j, CThostFtdcSuperUserFunctionField& p) {
  auto &v0 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.UserID));
  auto &v1 = j.at("FunctionCode").get_ref<const std::string &>();
  p.FunctionCode = v1.at(0);

}



void to_json(json& j, const CThostFtdcInvestorGroupField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorGroupID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorGroupID)},
           {"InvestorGroupName", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorGroupName)},
  };
}

void from_json(const json& j, CThostFtdcInvestorGroupField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorGroupID").get_ref<const std::string &>();
  std::strncpy(p.InvestorGroupID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorGroupID));
  auto &v2 = j.at("InvestorGroupName").get_ref<const std::string &>();
  std::strncpy(p.InvestorGroupName, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorGroupName));

}



void to_json(json& j, const CThostFtdcTradingAccountField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"PreMortgage", p.PreMortgage},
           {"PreCredit", p.PreCredit},
           {"PreDeposit", p.PreDeposit},
           {"PreBalance", p.PreBalance},
           {"PreMargin", p.PreMargin},
           {"InterestBase", p.InterestBase},
           {"Interest", p.Interest},
           {"Deposit", p.Deposit},
           {"Withdraw", p.Withdraw},
           {"FrozenMargin", p.FrozenMargin},
           {"FrozenCash", p.FrozenCash},
           {"FrozenCommission", p.FrozenCommission},
           {"CurrMargin", p.CurrMargin},
           {"CashIn", p.CashIn},
           {"Commission", p.Commission},
           {"CloseProfit", p.CloseProfit},
           {"PositionProfit", p.PositionProfit},
           {"Balance", p.Balance},
           {"Available", p.Available},
           {"WithdrawQuota", p.WithdrawQuota},
           {"Reserve", p.Reserve},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"SettlementID", p.SettlementID},
           {"Credit", p.Credit},
           {"Mortgage", p.Mortgage},
           {"ExchangeMargin", p.ExchangeMargin},
           {"DeliveryMargin", p.DeliveryMargin},
           {"ExchangeDeliveryMargin", p.ExchangeDeliveryMargin},
           {"ReserveBalance", p.ReserveBalance},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"PreFundMortgageIn", p.PreFundMortgageIn},
           {"PreFundMortgageOut", p.PreFundMortgageOut},
           {"FundMortgageIn", p.FundMortgageIn},
           {"FundMortgageOut", p.FundMortgageOut},
           {"FundMortgageAvailable", p.FundMortgageAvailable},
           {"MortgageableFund", p.MortgageableFund},
           {"SpecProductMargin", p.SpecProductMargin},
           {"SpecProductFrozenMargin", p.SpecProductFrozenMargin},
           {"SpecProductCommission", p.SpecProductCommission},
           {"SpecProductFrozenCommission", p.SpecProductFrozenCommission},
           {"SpecProductPositionProfit", p.SpecProductPositionProfit},
           {"SpecProductCloseProfit", p.SpecProductCloseProfit},
           {"SpecProductPositionProfitByAlg", p.SpecProductPositionProfitByAlg},
           {"SpecProductExchangeMargin", p.SpecProductExchangeMargin},
           {"BizType", std::string(1, p.BizType)},
           {"FrozenSwap", p.FrozenSwap},
           {"RemainSwap", p.RemainSwap},
  };
}

void from_json(const json& j, CThostFtdcTradingAccountField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.AccountID));
  j.at("PreMortgage").get_to(p.PreMortgage);
  j.at("PreCredit").get_to(p.PreCredit);
  j.at("PreDeposit").get_to(p.PreDeposit);
  j.at("PreBalance").get_to(p.PreBalance);
  j.at("PreMargin").get_to(p.PreMargin);
  j.at("InterestBase").get_to(p.InterestBase);
  j.at("Interest").get_to(p.Interest);
  j.at("Deposit").get_to(p.Deposit);
  j.at("Withdraw").get_to(p.Withdraw);
  j.at("FrozenMargin").get_to(p.FrozenMargin);
  j.at("FrozenCash").get_to(p.FrozenCash);
  j.at("FrozenCommission").get_to(p.FrozenCommission);
  j.at("CurrMargin").get_to(p.CurrMargin);
  j.at("CashIn").get_to(p.CashIn);
  j.at("Commission").get_to(p.Commission);
  j.at("CloseProfit").get_to(p.CloseProfit);
  j.at("PositionProfit").get_to(p.PositionProfit);
  j.at("Balance").get_to(p.Balance);
  j.at("Available").get_to(p.Available);
  j.at("WithdrawQuota").get_to(p.WithdrawQuota);
  j.at("Reserve").get_to(p.Reserve);
  auto &v23 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("SettlementID").get_to(p.SettlementID);
  j.at("Credit").get_to(p.Credit);
  j.at("Mortgage").get_to(p.Mortgage);
  j.at("ExchangeMargin").get_to(p.ExchangeMargin);
  j.at("DeliveryMargin").get_to(p.DeliveryMargin);
  j.at("ExchangeDeliveryMargin").get_to(p.ExchangeDeliveryMargin);
  j.at("ReserveBalance").get_to(p.ReserveBalance);
  auto &v31 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v31.c_str()).c_str(), sizeof(p.CurrencyID));
  j.at("PreFundMortgageIn").get_to(p.PreFundMortgageIn);
  j.at("PreFundMortgageOut").get_to(p.PreFundMortgageOut);
  j.at("FundMortgageIn").get_to(p.FundMortgageIn);
  j.at("FundMortgageOut").get_to(p.FundMortgageOut);
  j.at("FundMortgageAvailable").get_to(p.FundMortgageAvailable);
  j.at("MortgageableFund").get_to(p.MortgageableFund);
  j.at("SpecProductMargin").get_to(p.SpecProductMargin);
  j.at("SpecProductFrozenMargin").get_to(p.SpecProductFrozenMargin);
  j.at("SpecProductCommission").get_to(p.SpecProductCommission);
  j.at("SpecProductFrozenCommission").get_to(p.SpecProductFrozenCommission);
  j.at("SpecProductPositionProfit").get_to(p.SpecProductPositionProfit);
  j.at("SpecProductCloseProfit").get_to(p.SpecProductCloseProfit);
  j.at("SpecProductPositionProfitByAlg").get_to(p.SpecProductPositionProfitByAlg);
  j.at("SpecProductExchangeMargin").get_to(p.SpecProductExchangeMargin);
  auto &v46 = j.at("BizType").get_ref<const std::string &>();
  p.BizType = v46.at(0);
  j.at("FrozenSwap").get_to(p.FrozenSwap);
  j.at("RemainSwap").get_to(p.RemainSwap);

}



void to_json(json& j, const CThostFtdcInvestorPositionField& p) {
  j = json{
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"PosiDirection", std::string(1, p.PosiDirection)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"PositionDate", std::string(1, p.PositionDate)},
           {"YdPosition", p.YdPosition},
           {"Position", p.Position},
           {"LongFrozen", p.LongFrozen},
           {"ShortFrozen", p.ShortFrozen},
           {"LongFrozenAmount", p.LongFrozenAmount},
           {"ShortFrozenAmount", p.ShortFrozenAmount},
           {"OpenVolume", p.OpenVolume},
           {"CloseVolume", p.CloseVolume},
           {"OpenAmount", p.OpenAmount},
           {"CloseAmount", p.CloseAmount},
           {"PositionCost", p.PositionCost},
           {"PreMargin", p.PreMargin},
           {"UseMargin", p.UseMargin},
           {"FrozenMargin", p.FrozenMargin},
           {"FrozenCash", p.FrozenCash},
           {"FrozenCommission", p.FrozenCommission},
           {"CashIn", p.CashIn},
           {"Commission", p.Commission},
           {"CloseProfit", p.CloseProfit},
           {"PositionProfit", p.PositionProfit},
           {"PreSettlementPrice", p.PreSettlementPrice},
           {"SettlementPrice", p.SettlementPrice},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"SettlementID", p.SettlementID},
           {"OpenCost", p.OpenCost},
           {"ExchangeMargin", p.ExchangeMargin},
           {"CombPosition", p.CombPosition},
           {"CombLongFrozen", p.CombLongFrozen},
           {"CombShortFrozen", p.CombShortFrozen},
           {"CloseProfitByDate", p.CloseProfitByDate},
           {"CloseProfitByTrade", p.CloseProfitByTrade},
           {"TodayPosition", p.TodayPosition},
           {"MarginRateByMoney", p.MarginRateByMoney},
           {"MarginRateByVolume", p.MarginRateByVolume},
           {"StrikeFrozen", p.StrikeFrozen},
           {"StrikeFrozenAmount", p.StrikeFrozenAmount},
           {"AbandonFrozen", p.AbandonFrozen},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"YdStrikeFrozen", p.YdStrikeFrozen},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"PositionCostOffset", p.PositionCostOffset},
           {"TasPosition", p.TasPosition},
           {"TasPositionCost", p.TasPositionCost},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcInvestorPositionField& p) {
  auto &v0 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.reserve1));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v3 = j.at("PosiDirection").get_ref<const std::string &>();
  p.PosiDirection = v3.at(0);
  auto &v4 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v4.at(0);
  auto &v5 = j.at("PositionDate").get_ref<const std::string &>();
  p.PositionDate = v5.at(0);
  j.at("YdPosition").get_to(p.YdPosition);
  j.at("Position").get_to(p.Position);
  j.at("LongFrozen").get_to(p.LongFrozen);
  j.at("ShortFrozen").get_to(p.ShortFrozen);
  j.at("LongFrozenAmount").get_to(p.LongFrozenAmount);
  j.at("ShortFrozenAmount").get_to(p.ShortFrozenAmount);
  j.at("OpenVolume").get_to(p.OpenVolume);
  j.at("CloseVolume").get_to(p.CloseVolume);
  j.at("OpenAmount").get_to(p.OpenAmount);
  j.at("CloseAmount").get_to(p.CloseAmount);
  j.at("PositionCost").get_to(p.PositionCost);
  j.at("PreMargin").get_to(p.PreMargin);
  j.at("UseMargin").get_to(p.UseMargin);
  j.at("FrozenMargin").get_to(p.FrozenMargin);
  j.at("FrozenCash").get_to(p.FrozenCash);
  j.at("FrozenCommission").get_to(p.FrozenCommission);
  j.at("CashIn").get_to(p.CashIn);
  j.at("Commission").get_to(p.Commission);
  j.at("CloseProfit").get_to(p.CloseProfit);
  j.at("PositionProfit").get_to(p.PositionProfit);
  j.at("PreSettlementPrice").get_to(p.PreSettlementPrice);
  j.at("SettlementPrice").get_to(p.SettlementPrice);
  auto &v28 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v28.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("SettlementID").get_to(p.SettlementID);
  j.at("OpenCost").get_to(p.OpenCost);
  j.at("ExchangeMargin").get_to(p.ExchangeMargin);
  j.at("CombPosition").get_to(p.CombPosition);
  j.at("CombLongFrozen").get_to(p.CombLongFrozen);
  j.at("CombShortFrozen").get_to(p.CombShortFrozen);
  j.at("CloseProfitByDate").get_to(p.CloseProfitByDate);
  j.at("CloseProfitByTrade").get_to(p.CloseProfitByTrade);
  j.at("TodayPosition").get_to(p.TodayPosition);
  j.at("MarginRateByMoney").get_to(p.MarginRateByMoney);
  j.at("MarginRateByVolume").get_to(p.MarginRateByVolume);
  j.at("StrikeFrozen").get_to(p.StrikeFrozen);
  j.at("StrikeFrozenAmount").get_to(p.StrikeFrozenAmount);
  j.at("AbandonFrozen").get_to(p.AbandonFrozen);
  auto &v43 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v43.c_str()).c_str(), sizeof(p.ExchangeID));
  j.at("YdStrikeFrozen").get_to(p.YdStrikeFrozen);
  auto &v45 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v45.c_str()).c_str(), sizeof(p.InvestUnitID));
  j.at("PositionCostOffset").get_to(p.PositionCostOffset);
  j.at("TasPosition").get_to(p.TasPosition);
  j.at("TasPositionCost").get_to(p.TasPositionCost);
  auto &v49 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v49.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcInstrumentMarginRateField& p) {
  j = json{
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"InvestorRange", std::string(1, p.InvestorRange)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"LongMarginRatioByMoney", p.LongMarginRatioByMoney},
           {"LongMarginRatioByVolume", p.LongMarginRatioByVolume},
           {"ShortMarginRatioByMoney", p.ShortMarginRatioByMoney},
           {"ShortMarginRatioByVolume", p.ShortMarginRatioByVolume},
           {"IsRelative", p.IsRelative},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcInstrumentMarginRateField& p) {
  auto &v0 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.reserve1));
  auto &v1 = j.at("InvestorRange").get_ref<const std::string &>();
  p.InvestorRange = v1.at(0);
  auto &v2 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v3 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v4 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v4.at(0);
  j.at("LongMarginRatioByMoney").get_to(p.LongMarginRatioByMoney);
  j.at("LongMarginRatioByVolume").get_to(p.LongMarginRatioByVolume);
  j.at("ShortMarginRatioByMoney").get_to(p.ShortMarginRatioByMoney);
  j.at("ShortMarginRatioByVolume").get_to(p.ShortMarginRatioByVolume);
  j.at("IsRelative").get_to(p.IsRelative);
  auto &v10 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v11 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v12 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcInstrumentCommissionRateField& p) {
  j = json{
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"InvestorRange", std::string(1, p.InvestorRange)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"OpenRatioByMoney", p.OpenRatioByMoney},
           {"OpenRatioByVolume", p.OpenRatioByVolume},
           {"CloseRatioByMoney", p.CloseRatioByMoney},
           {"CloseRatioByVolume", p.CloseRatioByVolume},
           {"CloseTodayRatioByMoney", p.CloseTodayRatioByMoney},
           {"CloseTodayRatioByVolume", p.CloseTodayRatioByVolume},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"BizType", std::string(1, p.BizType)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcInstrumentCommissionRateField& p) {
  auto &v0 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.reserve1));
  auto &v1 = j.at("InvestorRange").get_ref<const std::string &>();
  p.InvestorRange = v1.at(0);
  auto &v2 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v3 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InvestorID));
  j.at("OpenRatioByMoney").get_to(p.OpenRatioByMoney);
  j.at("OpenRatioByVolume").get_to(p.OpenRatioByVolume);
  j.at("CloseRatioByMoney").get_to(p.CloseRatioByMoney);
  j.at("CloseRatioByVolume").get_to(p.CloseRatioByVolume);
  j.at("CloseTodayRatioByMoney").get_to(p.CloseTodayRatioByMoney);
  j.at("CloseTodayRatioByVolume").get_to(p.CloseTodayRatioByVolume);
  auto &v10 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v11 = j.at("BizType").get_ref<const std::string &>();
  p.BizType = v11.at(0);
  auto &v12 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v13 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcDepthMarketDataField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"LastPrice", p.LastPrice},
           {"PreSettlementPrice", p.PreSettlementPrice},
           {"PreClosePrice", p.PreClosePrice},
           {"PreOpenInterest", p.PreOpenInterest},
           {"OpenPrice", p.OpenPrice},
           {"HighestPrice", p.HighestPrice},
           {"LowestPrice", p.LowestPrice},
           {"Volume", p.Volume},
           {"Turnover", p.Turnover},
           {"OpenInterest", p.OpenInterest},
           {"ClosePrice", p.ClosePrice},
           {"SettlementPrice", p.SettlementPrice},
           {"UpperLimitPrice", p.UpperLimitPrice},
           {"LowerLimitPrice", p.LowerLimitPrice},
           {"PreDelta", p.PreDelta},
           {"CurrDelta", p.CurrDelta},
           {"UpdateTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.UpdateTime)},
           {"UpdateMillisec", p.UpdateMillisec},
           {"BidPrice1", p.BidPrice1},
           {"BidVolume1", p.BidVolume1},
           {"AskPrice1", p.AskPrice1},
           {"AskVolume1", p.AskVolume1},
           {"BidPrice2", p.BidPrice2},
           {"BidVolume2", p.BidVolume2},
           {"AskPrice2", p.AskPrice2},
           {"AskVolume2", p.AskVolume2},
           {"BidPrice3", p.BidPrice3},
           {"BidVolume3", p.BidVolume3},
           {"AskPrice3", p.AskPrice3},
           {"AskVolume3", p.AskVolume3},
           {"BidPrice4", p.BidPrice4},
           {"BidVolume4", p.BidVolume4},
           {"AskPrice4", p.AskPrice4},
           {"AskVolume4", p.AskVolume4},
           {"BidPrice5", p.BidPrice5},
           {"BidVolume5", p.BidVolume5},
           {"AskPrice5", p.AskPrice5},
           {"AskVolume5", p.AskVolume5},
           {"AveragePrice", p.AveragePrice},
           {"ActionDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionDay)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"ExchangeInstID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeInstID)},
           {"BandingUpperPrice", p.BandingUpperPrice},
           {"BandingLowerPrice", p.BandingLowerPrice},
  };
}

void from_json(const json& j, CThostFtdcDepthMarketDataField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.reserve1));
  auto &v2 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v3 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.reserve2));
  j.at("LastPrice").get_to(p.LastPrice);
  j.at("PreSettlementPrice").get_to(p.PreSettlementPrice);
  j.at("PreClosePrice").get_to(p.PreClosePrice);
  j.at("PreOpenInterest").get_to(p.PreOpenInterest);
  j.at("OpenPrice").get_to(p.OpenPrice);
  j.at("HighestPrice").get_to(p.HighestPrice);
  j.at("LowestPrice").get_to(p.LowestPrice);
  j.at("Volume").get_to(p.Volume);
  j.at("Turnover").get_to(p.Turnover);
  j.at("OpenInterest").get_to(p.OpenInterest);
  j.at("ClosePrice").get_to(p.ClosePrice);
  j.at("SettlementPrice").get_to(p.SettlementPrice);
  j.at("UpperLimitPrice").get_to(p.UpperLimitPrice);
  j.at("LowerLimitPrice").get_to(p.LowerLimitPrice);
  j.at("PreDelta").get_to(p.PreDelta);
  j.at("CurrDelta").get_to(p.CurrDelta);
  auto &v20 = j.at("UpdateTime").get_ref<const std::string &>();
  std::strncpy(p.UpdateTime, codec_convert("GBK//TRANSLIT", "UTF-8", v20.c_str()).c_str(), sizeof(p.UpdateTime));
  j.at("UpdateMillisec").get_to(p.UpdateMillisec);
  j.at("BidPrice1").get_to(p.BidPrice1);
  j.at("BidVolume1").get_to(p.BidVolume1);
  j.at("AskPrice1").get_to(p.AskPrice1);
  j.at("AskVolume1").get_to(p.AskVolume1);
  j.at("BidPrice2").get_to(p.BidPrice2);
  j.at("BidVolume2").get_to(p.BidVolume2);
  j.at("AskPrice2").get_to(p.AskPrice2);
  j.at("AskVolume2").get_to(p.AskVolume2);
  j.at("BidPrice3").get_to(p.BidPrice3);
  j.at("BidVolume3").get_to(p.BidVolume3);
  j.at("AskPrice3").get_to(p.AskPrice3);
  j.at("AskVolume3").get_to(p.AskVolume3);
  j.at("BidPrice4").get_to(p.BidPrice4);
  j.at("BidVolume4").get_to(p.BidVolume4);
  j.at("AskPrice4").get_to(p.AskPrice4);
  j.at("AskVolume4").get_to(p.AskVolume4);
  j.at("BidPrice5").get_to(p.BidPrice5);
  j.at("BidVolume5").get_to(p.BidVolume5);
  j.at("AskPrice5").get_to(p.AskPrice5);
  j.at("AskVolume5").get_to(p.AskVolume5);
  j.at("AveragePrice").get_to(p.AveragePrice);
  auto &v43 = j.at("ActionDay").get_ref<const std::string &>();
  std::strncpy(p.ActionDay, codec_convert("GBK//TRANSLIT", "UTF-8", v43.c_str()).c_str(), sizeof(p.ActionDay));
  auto &v44 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v44.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v45 = j.at("ExchangeInstID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeInstID, codec_convert("GBK//TRANSLIT", "UTF-8", v45.c_str()).c_str(), sizeof(p.ExchangeInstID));
  j.at("BandingUpperPrice").get_to(p.BandingUpperPrice);
  j.at("BandingLowerPrice").get_to(p.BandingLowerPrice);

}



void to_json(json& j, const CThostFtdcInstrumentTradingRightField& p) {
  j = json{
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"InvestorRange", std::string(1, p.InvestorRange)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"TradingRight", std::string(1, p.TradingRight)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcInstrumentTradingRightField& p) {
  auto &v0 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.reserve1));
  auto &v1 = j.at("InvestorRange").get_ref<const std::string &>();
  p.InvestorRange = v1.at(0);
  auto &v2 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v3 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v4 = j.at("TradingRight").get_ref<const std::string &>();
  p.TradingRight = v4.at(0);
  auto &v5 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcBrokerUserField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"UserName", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserName)},
           {"UserType", std::string(1, p.UserType)},
           {"IsActive", p.IsActive},
           {"IsUsingOTP", p.IsUsingOTP},
           {"IsAuthForce", p.IsAuthForce},
  };
}

void from_json(const json& j, CThostFtdcBrokerUserField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.UserID));
  auto &v2 = j.at("UserName").get_ref<const std::string &>();
  std::strncpy(p.UserName, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.UserName));
  auto &v3 = j.at("UserType").get_ref<const std::string &>();
  p.UserType = v3.at(0);
  j.at("IsActive").get_to(p.IsActive);
  j.at("IsUsingOTP").get_to(p.IsUsingOTP);
  j.at("IsAuthForce").get_to(p.IsAuthForce);

}



void to_json(json& j, const CThostFtdcBrokerUserPasswordField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"Password", codec_convert("UTF-8//TRANSLIT", "GBK", p.Password)},
           {"LastUpdateTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.LastUpdateTime)},
           {"LastLoginTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.LastLoginTime)},
           {"ExpireDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExpireDate)},
           {"WeakExpireDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.WeakExpireDate)},
  };
}

void from_json(const json& j, CThostFtdcBrokerUserPasswordField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.UserID));
  auto &v2 = j.at("Password").get_ref<const std::string &>();
  std::strncpy(p.Password, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.Password));
  auto &v3 = j.at("LastUpdateTime").get_ref<const std::string &>();
  std::strncpy(p.LastUpdateTime, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.LastUpdateTime));
  auto &v4 = j.at("LastLoginTime").get_ref<const std::string &>();
  std::strncpy(p.LastLoginTime, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.LastLoginTime));
  auto &v5 = j.at("ExpireDate").get_ref<const std::string &>();
  std::strncpy(p.ExpireDate, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.ExpireDate));
  auto &v6 = j.at("WeakExpireDate").get_ref<const std::string &>();
  std::strncpy(p.WeakExpireDate, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.WeakExpireDate));

}



void to_json(json& j, const CThostFtdcBrokerUserFunctionField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"BrokerFunctionCode", std::string(1, p.BrokerFunctionCode)},
  };
}

void from_json(const json& j, CThostFtdcBrokerUserFunctionField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.UserID));
  auto &v2 = j.at("BrokerFunctionCode").get_ref<const std::string &>();
  p.BrokerFunctionCode = v2.at(0);

}



void to_json(json& j, const CThostFtdcTraderOfferField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"Password", codec_convert("UTF-8//TRANSLIT", "GBK", p.Password)},
           {"InstallID", p.InstallID},
           {"OrderLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderLocalID)},
           {"TraderConnectStatus", std::string(1, p.TraderConnectStatus)},
           {"ConnectRequestDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.ConnectRequestDate)},
           {"ConnectRequestTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.ConnectRequestTime)},
           {"LastReportDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.LastReportDate)},
           {"LastReportTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.LastReportTime)},
           {"ConnectDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.ConnectDate)},
           {"ConnectTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.ConnectTime)},
           {"StartDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.StartDate)},
           {"StartTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.StartTime)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"MaxTradeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.MaxTradeID)},
           {"MaxOrderMessageReference", codec_convert("UTF-8//TRANSLIT", "GBK", p.MaxOrderMessageReference)},
           {"OrderCancelAlg", std::string(1, p.OrderCancelAlg)},
  };
}

void from_json(const json& j, CThostFtdcTraderOfferField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.TraderID));
  auto &v2 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v3 = j.at("Password").get_ref<const std::string &>();
  std::strncpy(p.Password, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.Password));
  j.at("InstallID").get_to(p.InstallID);
  auto &v5 = j.at("OrderLocalID").get_ref<const std::string &>();
  std::strncpy(p.OrderLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.OrderLocalID));
  auto &v6 = j.at("TraderConnectStatus").get_ref<const std::string &>();
  p.TraderConnectStatus = v6.at(0);
  auto &v7 = j.at("ConnectRequestDate").get_ref<const std::string &>();
  std::strncpy(p.ConnectRequestDate, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.ConnectRequestDate));
  auto &v8 = j.at("ConnectRequestTime").get_ref<const std::string &>();
  std::strncpy(p.ConnectRequestTime, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.ConnectRequestTime));
  auto &v9 = j.at("LastReportDate").get_ref<const std::string &>();
  std::strncpy(p.LastReportDate, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.LastReportDate));
  auto &v10 = j.at("LastReportTime").get_ref<const std::string &>();
  std::strncpy(p.LastReportTime, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.LastReportTime));
  auto &v11 = j.at("ConnectDate").get_ref<const std::string &>();
  std::strncpy(p.ConnectDate, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.ConnectDate));
  auto &v12 = j.at("ConnectTime").get_ref<const std::string &>();
  std::strncpy(p.ConnectTime, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.ConnectTime));
  auto &v13 = j.at("StartDate").get_ref<const std::string &>();
  std::strncpy(p.StartDate, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.StartDate));
  auto &v14 = j.at("StartTime").get_ref<const std::string &>();
  std::strncpy(p.StartTime, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.StartTime));
  auto &v15 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v16 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v17 = j.at("MaxTradeID").get_ref<const std::string &>();
  std::strncpy(p.MaxTradeID, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.MaxTradeID));
  auto &v18 = j.at("MaxOrderMessageReference").get_ref<const std::string &>();
  std::strncpy(p.MaxOrderMessageReference, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.MaxOrderMessageReference));
  auto &v19 = j.at("OrderCancelAlg").get_ref<const std::string &>();
  p.OrderCancelAlg = v19.at(0);

}



void to_json(json& j, const CThostFtdcSettlementInfoField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"SettlementID", p.SettlementID},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"SequenceNo", p.SequenceNo},
           {"Content", codec_convert("UTF-8//TRANSLIT", "GBK", p.Content)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
  };
}

void from_json(const json& j, CThostFtdcSettlementInfoField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("SettlementID").get_to(p.SettlementID);
  auto &v2 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v3 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InvestorID));
  j.at("SequenceNo").get_to(p.SequenceNo);
  auto &v5 = j.at("Content").get_ref<const std::string &>();
  std::strncpy(p.Content, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.Content));
  auto &v6 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.AccountID));
  auto &v7 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.CurrencyID));

}



void to_json(json& j, const CThostFtdcInstrumentMarginRateAdjustField& p) {
  j = json{
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"InvestorRange", std::string(1, p.InvestorRange)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"LongMarginRatioByMoney", p.LongMarginRatioByMoney},
           {"LongMarginRatioByVolume", p.LongMarginRatioByVolume},
           {"ShortMarginRatioByMoney", p.ShortMarginRatioByMoney},
           {"ShortMarginRatioByVolume", p.ShortMarginRatioByVolume},
           {"IsRelative", p.IsRelative},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcInstrumentMarginRateAdjustField& p) {
  auto &v0 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.reserve1));
  auto &v1 = j.at("InvestorRange").get_ref<const std::string &>();
  p.InvestorRange = v1.at(0);
  auto &v2 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v3 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v4 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v4.at(0);
  j.at("LongMarginRatioByMoney").get_to(p.LongMarginRatioByMoney);
  j.at("LongMarginRatioByVolume").get_to(p.LongMarginRatioByVolume);
  j.at("ShortMarginRatioByMoney").get_to(p.ShortMarginRatioByMoney);
  j.at("ShortMarginRatioByVolume").get_to(p.ShortMarginRatioByVolume);
  j.at("IsRelative").get_to(p.IsRelative);
  auto &v10 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcExchangeMarginRateField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"LongMarginRatioByMoney", p.LongMarginRatioByMoney},
           {"LongMarginRatioByVolume", p.LongMarginRatioByVolume},
           {"ShortMarginRatioByMoney", p.ShortMarginRatioByMoney},
           {"ShortMarginRatioByVolume", p.ShortMarginRatioByVolume},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcExchangeMarginRateField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.reserve1));
  auto &v2 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v2.at(0);
  j.at("LongMarginRatioByMoney").get_to(p.LongMarginRatioByMoney);
  j.at("LongMarginRatioByVolume").get_to(p.LongMarginRatioByVolume);
  j.at("ShortMarginRatioByMoney").get_to(p.ShortMarginRatioByMoney);
  j.at("ShortMarginRatioByVolume").get_to(p.ShortMarginRatioByVolume);
  auto &v7 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v8 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcExchangeMarginRateAdjustField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"LongMarginRatioByMoney", p.LongMarginRatioByMoney},
           {"LongMarginRatioByVolume", p.LongMarginRatioByVolume},
           {"ShortMarginRatioByMoney", p.ShortMarginRatioByMoney},
           {"ShortMarginRatioByVolume", p.ShortMarginRatioByVolume},
           {"ExchLongMarginRatioByMoney", p.ExchLongMarginRatioByMoney},
           {"ExchLongMarginRatioByVolume", p.ExchLongMarginRatioByVolume},
           {"ExchShortMarginRatioByMoney", p.ExchShortMarginRatioByMoney},
           {"ExchShortMarginRatioByVolume", p.ExchShortMarginRatioByVolume},
           {"NoLongMarginRatioByMoney", p.NoLongMarginRatioByMoney},
           {"NoLongMarginRatioByVolume", p.NoLongMarginRatioByVolume},
           {"NoShortMarginRatioByMoney", p.NoShortMarginRatioByMoney},
           {"NoShortMarginRatioByVolume", p.NoShortMarginRatioByVolume},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcExchangeMarginRateAdjustField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.reserve1));
  auto &v2 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v2.at(0);
  j.at("LongMarginRatioByMoney").get_to(p.LongMarginRatioByMoney);
  j.at("LongMarginRatioByVolume").get_to(p.LongMarginRatioByVolume);
  j.at("ShortMarginRatioByMoney").get_to(p.ShortMarginRatioByMoney);
  j.at("ShortMarginRatioByVolume").get_to(p.ShortMarginRatioByVolume);
  j.at("ExchLongMarginRatioByMoney").get_to(p.ExchLongMarginRatioByMoney);
  j.at("ExchLongMarginRatioByVolume").get_to(p.ExchLongMarginRatioByVolume);
  j.at("ExchShortMarginRatioByMoney").get_to(p.ExchShortMarginRatioByMoney);
  j.at("ExchShortMarginRatioByVolume").get_to(p.ExchShortMarginRatioByVolume);
  j.at("NoLongMarginRatioByMoney").get_to(p.NoLongMarginRatioByMoney);
  j.at("NoLongMarginRatioByVolume").get_to(p.NoLongMarginRatioByVolume);
  j.at("NoShortMarginRatioByMoney").get_to(p.NoShortMarginRatioByMoney);
  j.at("NoShortMarginRatioByVolume").get_to(p.NoShortMarginRatioByVolume);
  auto &v15 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcExchangeRateField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"FromCurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.FromCurrencyID)},
           {"FromCurrencyUnit", p.FromCurrencyUnit},
           {"ToCurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ToCurrencyID)},
           {"ExchangeRate", p.ExchangeRate},
  };
}

void from_json(const json& j, CThostFtdcExchangeRateField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("FromCurrencyID").get_ref<const std::string &>();
  std::strncpy(p.FromCurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.FromCurrencyID));
  j.at("FromCurrencyUnit").get_to(p.FromCurrencyUnit);
  auto &v3 = j.at("ToCurrencyID").get_ref<const std::string &>();
  std::strncpy(p.ToCurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ToCurrencyID));
  j.at("ExchangeRate").get_to(p.ExchangeRate);

}



void to_json(json& j, const CThostFtdcSettlementRefField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"SettlementID", p.SettlementID},
  };
}

void from_json(const json& j, CThostFtdcSettlementRefField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("SettlementID").get_to(p.SettlementID);

}



void to_json(json& j, const CThostFtdcCurrentTimeField& p) {
  j = json{
           {"CurrDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrDate)},
           {"CurrTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrTime)},
           {"CurrMillisec", p.CurrMillisec},
           {"ActionDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionDay)},
  };
}

void from_json(const json& j, CThostFtdcCurrentTimeField& p) {
  auto &v0 = j.at("CurrDate").get_ref<const std::string &>();
  std::strncpy(p.CurrDate, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.CurrDate));
  auto &v1 = j.at("CurrTime").get_ref<const std::string &>();
  std::strncpy(p.CurrTime, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.CurrTime));
  j.at("CurrMillisec").get_to(p.CurrMillisec);
  auto &v3 = j.at("ActionDay").get_ref<const std::string &>();
  std::strncpy(p.ActionDay, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ActionDay));

}



void to_json(json& j, const CThostFtdcCommPhaseField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"CommPhaseNo", p.CommPhaseNo},
           {"SystemID", codec_convert("UTF-8//TRANSLIT", "GBK", p.SystemID)},
  };
}

void from_json(const json& j, CThostFtdcCommPhaseField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("CommPhaseNo").get_to(p.CommPhaseNo);
  auto &v2 = j.at("SystemID").get_ref<const std::string &>();
  std::strncpy(p.SystemID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.SystemID));

}



void to_json(json& j, const CThostFtdcLoginInfoField& p) {
  j = json{
           {"FrontID", p.FrontID},
           {"SessionID", p.SessionID},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"LoginDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.LoginDate)},
           {"LoginTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.LoginTime)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"UserProductInfo", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserProductInfo)},
           {"InterfaceProductInfo", codec_convert("UTF-8//TRANSLIT", "GBK", p.InterfaceProductInfo)},
           {"ProtocolInfo", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProtocolInfo)},
           {"SystemName", codec_convert("UTF-8//TRANSLIT", "GBK", p.SystemName)},
           {"PasswordDeprecated", codec_convert("UTF-8//TRANSLIT", "GBK", p.PasswordDeprecated)},
           {"MaxOrderRef", codec_convert("UTF-8//TRANSLIT", "GBK", p.MaxOrderRef)},
           {"SHFETime", codec_convert("UTF-8//TRANSLIT", "GBK", p.SHFETime)},
           {"DCETime", codec_convert("UTF-8//TRANSLIT", "GBK", p.DCETime)},
           {"CZCETime", codec_convert("UTF-8//TRANSLIT", "GBK", p.CZCETime)},
           {"FFEXTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.FFEXTime)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"OneTimePassword", codec_convert("UTF-8//TRANSLIT", "GBK", p.OneTimePassword)},
           {"INETime", codec_convert("UTF-8//TRANSLIT", "GBK", p.INETime)},
           {"IsQryControl", p.IsQryControl},
           {"LoginRemark", codec_convert("UTF-8//TRANSLIT", "GBK", p.LoginRemark)},
           {"Password", codec_convert("UTF-8//TRANSLIT", "GBK", p.Password)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
  };
}

void from_json(const json& j, CThostFtdcLoginInfoField& p) {
  j.at("FrontID").get_to(p.FrontID);
  j.at("SessionID").get_to(p.SessionID);
  auto &v2 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v3 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.UserID));
  auto &v4 = j.at("LoginDate").get_ref<const std::string &>();
  std::strncpy(p.LoginDate, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.LoginDate));
  auto &v5 = j.at("LoginTime").get_ref<const std::string &>();
  std::strncpy(p.LoginTime, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.LoginTime));
  auto &v6 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.reserve1));
  auto &v7 = j.at("UserProductInfo").get_ref<const std::string &>();
  std::strncpy(p.UserProductInfo, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.UserProductInfo));
  auto &v8 = j.at("InterfaceProductInfo").get_ref<const std::string &>();
  std::strncpy(p.InterfaceProductInfo, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.InterfaceProductInfo));
  auto &v9 = j.at("ProtocolInfo").get_ref<const std::string &>();
  std::strncpy(p.ProtocolInfo, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.ProtocolInfo));
  auto &v10 = j.at("SystemName").get_ref<const std::string &>();
  std::strncpy(p.SystemName, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.SystemName));
  auto &v11 = j.at("PasswordDeprecated").get_ref<const std::string &>();
  std::strncpy(p.PasswordDeprecated, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.PasswordDeprecated));
  auto &v12 = j.at("MaxOrderRef").get_ref<const std::string &>();
  std::strncpy(p.MaxOrderRef, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.MaxOrderRef));
  auto &v13 = j.at("SHFETime").get_ref<const std::string &>();
  std::strncpy(p.SHFETime, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.SHFETime));
  auto &v14 = j.at("DCETime").get_ref<const std::string &>();
  std::strncpy(p.DCETime, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.DCETime));
  auto &v15 = j.at("CZCETime").get_ref<const std::string &>();
  std::strncpy(p.CZCETime, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.CZCETime));
  auto &v16 = j.at("FFEXTime").get_ref<const std::string &>();
  std::strncpy(p.FFEXTime, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.FFEXTime));
  auto &v17 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v18 = j.at("OneTimePassword").get_ref<const std::string &>();
  std::strncpy(p.OneTimePassword, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.OneTimePassword));
  auto &v19 = j.at("INETime").get_ref<const std::string &>();
  std::strncpy(p.INETime, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.INETime));
  j.at("IsQryControl").get_to(p.IsQryControl);
  auto &v21 = j.at("LoginRemark").get_ref<const std::string &>();
  std::strncpy(p.LoginRemark, codec_convert("GBK//TRANSLIT", "UTF-8", v21.c_str()).c_str(), sizeof(p.LoginRemark));
  auto &v22 = j.at("Password").get_ref<const std::string &>();
  std::strncpy(p.Password, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.Password));
  auto &v23 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.IPAddress));

}



void to_json(json& j, const CThostFtdcLogoutAllField& p) {
  j = json{
           {"FrontID", p.FrontID},
           {"SessionID", p.SessionID},
           {"SystemName", codec_convert("UTF-8//TRANSLIT", "GBK", p.SystemName)},
  };
}

void from_json(const json& j, CThostFtdcLogoutAllField& p) {
  j.at("FrontID").get_to(p.FrontID);
  j.at("SessionID").get_to(p.SessionID);
  auto &v2 = j.at("SystemName").get_ref<const std::string &>();
  std::strncpy(p.SystemName, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.SystemName));

}



void to_json(json& j, const CThostFtdcFrontStatusField& p) {
  j = json{
           {"FrontID", p.FrontID},
           {"LastReportDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.LastReportDate)},
           {"LastReportTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.LastReportTime)},
           {"IsActive", p.IsActive},
  };
}

void from_json(const json& j, CThostFtdcFrontStatusField& p) {
  j.at("FrontID").get_to(p.FrontID);
  auto &v1 = j.at("LastReportDate").get_ref<const std::string &>();
  std::strncpy(p.LastReportDate, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.LastReportDate));
  auto &v2 = j.at("LastReportTime").get_ref<const std::string &>();
  std::strncpy(p.LastReportTime, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.LastReportTime));
  j.at("IsActive").get_to(p.IsActive);

}



void to_json(json& j, const CThostFtdcUserPasswordUpdateField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"OldPassword", codec_convert("UTF-8//TRANSLIT", "GBK", p.OldPassword)},
           {"NewPassword", codec_convert("UTF-8//TRANSLIT", "GBK", p.NewPassword)},
  };
}

void from_json(const json& j, CThostFtdcUserPasswordUpdateField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.UserID));
  auto &v2 = j.at("OldPassword").get_ref<const std::string &>();
  std::strncpy(p.OldPassword, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.OldPassword));
  auto &v3 = j.at("NewPassword").get_ref<const std::string &>();
  std::strncpy(p.NewPassword, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.NewPassword));

}



void to_json(json& j, const CThostFtdcInputOrderField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"OrderRef", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderRef)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"OrderPriceType", std::string(1, p.OrderPriceType)},
           {"Direction", std::string(1, p.Direction)},
           {"CombOffsetFlag", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombOffsetFlag)},
           {"CombHedgeFlag", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombHedgeFlag)},
           {"LimitPrice", p.LimitPrice},
           {"VolumeTotalOriginal", p.VolumeTotalOriginal},
           {"TimeCondition", std::string(1, p.TimeCondition)},
           {"GTDDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.GTDDate)},
           {"VolumeCondition", std::string(1, p.VolumeCondition)},
           {"MinVolume", p.MinVolume},
           {"ContingentCondition", std::string(1, p.ContingentCondition)},
           {"StopPrice", p.StopPrice},
           {"ForceCloseReason", std::string(1, p.ForceCloseReason)},
           {"IsAutoSuspend", p.IsAutoSuspend},
           {"BusinessUnit", codec_convert("UTF-8//TRANSLIT", "GBK", p.BusinessUnit)},
           {"RequestID", p.RequestID},
           {"UserForceClose", p.UserForceClose},
           {"IsSwapOrder", p.IsSwapOrder},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
           {"OrderMemo", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderMemo)},
           {"SessionReqSeq", p.SessionReqSeq},
  };
}

void from_json(const json& j, CThostFtdcInputOrderField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("OrderRef").get_ref<const std::string &>();
  std::strncpy(p.OrderRef, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.OrderRef));
  auto &v4 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.UserID));
  auto &v5 = j.at("OrderPriceType").get_ref<const std::string &>();
  p.OrderPriceType = v5.at(0);
  auto &v6 = j.at("Direction").get_ref<const std::string &>();
  p.Direction = v6.at(0);
  auto &v7 = j.at("CombOffsetFlag").get_ref<const std::string &>();
  std::strncpy(p.CombOffsetFlag, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.CombOffsetFlag));
  auto &v8 = j.at("CombHedgeFlag").get_ref<const std::string &>();
  std::strncpy(p.CombHedgeFlag, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.CombHedgeFlag));
  j.at("LimitPrice").get_to(p.LimitPrice);
  j.at("VolumeTotalOriginal").get_to(p.VolumeTotalOriginal);
  auto &v11 = j.at("TimeCondition").get_ref<const std::string &>();
  p.TimeCondition = v11.at(0);
  auto &v12 = j.at("GTDDate").get_ref<const std::string &>();
  std::strncpy(p.GTDDate, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.GTDDate));
  auto &v13 = j.at("VolumeCondition").get_ref<const std::string &>();
  p.VolumeCondition = v13.at(0);
  j.at("MinVolume").get_to(p.MinVolume);
  auto &v15 = j.at("ContingentCondition").get_ref<const std::string &>();
  p.ContingentCondition = v15.at(0);
  j.at("StopPrice").get_to(p.StopPrice);
  auto &v17 = j.at("ForceCloseReason").get_ref<const std::string &>();
  p.ForceCloseReason = v17.at(0);
  j.at("IsAutoSuspend").get_to(p.IsAutoSuspend);
  auto &v19 = j.at("BusinessUnit").get_ref<const std::string &>();
  std::strncpy(p.BusinessUnit, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.BusinessUnit));
  j.at("RequestID").get_to(p.RequestID);
  j.at("UserForceClose").get_to(p.UserForceClose);
  j.at("IsSwapOrder").get_to(p.IsSwapOrder);
  auto &v23 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v24 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v24.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v25 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v25.c_str()).c_str(), sizeof(p.AccountID));
  auto &v26 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v26.c_str()).c_str(), sizeof(p.CurrencyID));
  auto &v27 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v27.c_str()).c_str(), sizeof(p.ClientID));
  auto &v28 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v28.c_str()).c_str(), sizeof(p.reserve2));
  auto &v29 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v29.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v30 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v30.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v31 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v31.c_str()).c_str(), sizeof(p.IPAddress));
  auto &v32 = j.at("OrderMemo").get_ref<const std::string &>();
  std::strncpy(p.OrderMemo, codec_convert("GBK//TRANSLIT", "UTF-8", v32.c_str()).c_str(), sizeof(p.OrderMemo));
  j.at("SessionReqSeq").get_to(p.SessionReqSeq);

}



void to_json(json& j, const CThostFtdcOrderField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"OrderRef", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderRef)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"OrderPriceType", std::string(1, p.OrderPriceType)},
           {"Direction", std::string(1, p.Direction)},
           {"CombOffsetFlag", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombOffsetFlag)},
           {"CombHedgeFlag", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombHedgeFlag)},
           {"LimitPrice", p.LimitPrice},
           {"VolumeTotalOriginal", p.VolumeTotalOriginal},
           {"TimeCondition", std::string(1, p.TimeCondition)},
           {"GTDDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.GTDDate)},
           {"VolumeCondition", std::string(1, p.VolumeCondition)},
           {"MinVolume", p.MinVolume},
           {"ContingentCondition", std::string(1, p.ContingentCondition)},
           {"StopPrice", p.StopPrice},
           {"ForceCloseReason", std::string(1, p.ForceCloseReason)},
           {"IsAutoSuspend", p.IsAutoSuspend},
           {"BusinessUnit", codec_convert("UTF-8//TRANSLIT", "GBK", p.BusinessUnit)},
           {"RequestID", p.RequestID},
           {"OrderLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderLocalID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"InstallID", p.InstallID},
           {"OrderSubmitStatus", std::string(1, p.OrderSubmitStatus)},
           {"NotifySequence", p.NotifySequence},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"SettlementID", p.SettlementID},
           {"OrderSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderSysID)},
           {"OrderSource", std::string(1, p.OrderSource)},
           {"OrderStatus", std::string(1, p.OrderStatus)},
           {"OrderType", std::string(1, p.OrderType)},
           {"VolumeTraded", p.VolumeTraded},
           {"VolumeTotal", p.VolumeTotal},
           {"InsertDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.InsertDate)},
           {"InsertTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.InsertTime)},
           {"ActiveTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActiveTime)},
           {"SuspendTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.SuspendTime)},
           {"UpdateTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.UpdateTime)},
           {"CancelTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.CancelTime)},
           {"ActiveTraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActiveTraderID)},
           {"ClearingPartID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClearingPartID)},
           {"SequenceNo", p.SequenceNo},
           {"FrontID", p.FrontID},
           {"SessionID", p.SessionID},
           {"UserProductInfo", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserProductInfo)},
           {"StatusMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.StatusMsg)},
           {"UserForceClose", p.UserForceClose},
           {"ActiveUserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActiveUserID)},
           {"BrokerOrderSeq", p.BrokerOrderSeq},
           {"RelativeOrderSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.RelativeOrderSysID)},
           {"ZCETotalTradedVolume", p.ZCETotalTradedVolume},
           {"IsSwapOrder", p.IsSwapOrder},
           {"BranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BranchID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"reserve3", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve3)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"ExchangeInstID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeInstID)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
           {"OrderMemo", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderMemo)},
           {"SessionReqSeq", p.SessionReqSeq},
  };
}

void from_json(const json& j, CThostFtdcOrderField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("OrderRef").get_ref<const std::string &>();
  std::strncpy(p.OrderRef, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.OrderRef));
  auto &v4 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.UserID));
  auto &v5 = j.at("OrderPriceType").get_ref<const std::string &>();
  p.OrderPriceType = v5.at(0);
  auto &v6 = j.at("Direction").get_ref<const std::string &>();
  p.Direction = v6.at(0);
  auto &v7 = j.at("CombOffsetFlag").get_ref<const std::string &>();
  std::strncpy(p.CombOffsetFlag, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.CombOffsetFlag));
  auto &v8 = j.at("CombHedgeFlag").get_ref<const std::string &>();
  std::strncpy(p.CombHedgeFlag, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.CombHedgeFlag));
  j.at("LimitPrice").get_to(p.LimitPrice);
  j.at("VolumeTotalOriginal").get_to(p.VolumeTotalOriginal);
  auto &v11 = j.at("TimeCondition").get_ref<const std::string &>();
  p.TimeCondition = v11.at(0);
  auto &v12 = j.at("GTDDate").get_ref<const std::string &>();
  std::strncpy(p.GTDDate, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.GTDDate));
  auto &v13 = j.at("VolumeCondition").get_ref<const std::string &>();
  p.VolumeCondition = v13.at(0);
  j.at("MinVolume").get_to(p.MinVolume);
  auto &v15 = j.at("ContingentCondition").get_ref<const std::string &>();
  p.ContingentCondition = v15.at(0);
  j.at("StopPrice").get_to(p.StopPrice);
  auto &v17 = j.at("ForceCloseReason").get_ref<const std::string &>();
  p.ForceCloseReason = v17.at(0);
  j.at("IsAutoSuspend").get_to(p.IsAutoSuspend);
  auto &v19 = j.at("BusinessUnit").get_ref<const std::string &>();
  std::strncpy(p.BusinessUnit, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.BusinessUnit));
  j.at("RequestID").get_to(p.RequestID);
  auto &v21 = j.at("OrderLocalID").get_ref<const std::string &>();
  std::strncpy(p.OrderLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v21.c_str()).c_str(), sizeof(p.OrderLocalID));
  auto &v22 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v23 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v24 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v24.c_str()).c_str(), sizeof(p.ClientID));
  auto &v25 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v25.c_str()).c_str(), sizeof(p.reserve2));
  auto &v26 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v26.c_str()).c_str(), sizeof(p.TraderID));
  j.at("InstallID").get_to(p.InstallID);
  auto &v28 = j.at("OrderSubmitStatus").get_ref<const std::string &>();
  p.OrderSubmitStatus = v28.at(0);
  j.at("NotifySequence").get_to(p.NotifySequence);
  auto &v30 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v30.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("SettlementID").get_to(p.SettlementID);
  auto &v32 = j.at("OrderSysID").get_ref<const std::string &>();
  std::strncpy(p.OrderSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v32.c_str()).c_str(), sizeof(p.OrderSysID));
  auto &v33 = j.at("OrderSource").get_ref<const std::string &>();
  p.OrderSource = v33.at(0);
  auto &v34 = j.at("OrderStatus").get_ref<const std::string &>();
  p.OrderStatus = v34.at(0);
  auto &v35 = j.at("OrderType").get_ref<const std::string &>();
  p.OrderType = v35.at(0);
  j.at("VolumeTraded").get_to(p.VolumeTraded);
  j.at("VolumeTotal").get_to(p.VolumeTotal);
  auto &v38 = j.at("InsertDate").get_ref<const std::string &>();
  std::strncpy(p.InsertDate, codec_convert("GBK//TRANSLIT", "UTF-8", v38.c_str()).c_str(), sizeof(p.InsertDate));
  auto &v39 = j.at("InsertTime").get_ref<const std::string &>();
  std::strncpy(p.InsertTime, codec_convert("GBK//TRANSLIT", "UTF-8", v39.c_str()).c_str(), sizeof(p.InsertTime));
  auto &v40 = j.at("ActiveTime").get_ref<const std::string &>();
  std::strncpy(p.ActiveTime, codec_convert("GBK//TRANSLIT", "UTF-8", v40.c_str()).c_str(), sizeof(p.ActiveTime));
  auto &v41 = j.at("SuspendTime").get_ref<const std::string &>();
  std::strncpy(p.SuspendTime, codec_convert("GBK//TRANSLIT", "UTF-8", v41.c_str()).c_str(), sizeof(p.SuspendTime));
  auto &v42 = j.at("UpdateTime").get_ref<const std::string &>();
  std::strncpy(p.UpdateTime, codec_convert("GBK//TRANSLIT", "UTF-8", v42.c_str()).c_str(), sizeof(p.UpdateTime));
  auto &v43 = j.at("CancelTime").get_ref<const std::string &>();
  std::strncpy(p.CancelTime, codec_convert("GBK//TRANSLIT", "UTF-8", v43.c_str()).c_str(), sizeof(p.CancelTime));
  auto &v44 = j.at("ActiveTraderID").get_ref<const std::string &>();
  std::strncpy(p.ActiveTraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v44.c_str()).c_str(), sizeof(p.ActiveTraderID));
  auto &v45 = j.at("ClearingPartID").get_ref<const std::string &>();
  std::strncpy(p.ClearingPartID, codec_convert("GBK//TRANSLIT", "UTF-8", v45.c_str()).c_str(), sizeof(p.ClearingPartID));
  j.at("SequenceNo").get_to(p.SequenceNo);
  j.at("FrontID").get_to(p.FrontID);
  j.at("SessionID").get_to(p.SessionID);
  auto &v49 = j.at("UserProductInfo").get_ref<const std::string &>();
  std::strncpy(p.UserProductInfo, codec_convert("GBK//TRANSLIT", "UTF-8", v49.c_str()).c_str(), sizeof(p.UserProductInfo));
  auto &v50 = j.at("StatusMsg").get_ref<const std::string &>();
  std::strncpy(p.StatusMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v50.c_str()).c_str(), sizeof(p.StatusMsg));
  j.at("UserForceClose").get_to(p.UserForceClose);
  auto &v52 = j.at("ActiveUserID").get_ref<const std::string &>();
  std::strncpy(p.ActiveUserID, codec_convert("GBK//TRANSLIT", "UTF-8", v52.c_str()).c_str(), sizeof(p.ActiveUserID));
  j.at("BrokerOrderSeq").get_to(p.BrokerOrderSeq);
  auto &v54 = j.at("RelativeOrderSysID").get_ref<const std::string &>();
  std::strncpy(p.RelativeOrderSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v54.c_str()).c_str(), sizeof(p.RelativeOrderSysID));
  j.at("ZCETotalTradedVolume").get_to(p.ZCETotalTradedVolume);
  j.at("IsSwapOrder").get_to(p.IsSwapOrder);
  auto &v57 = j.at("BranchID").get_ref<const std::string &>();
  std::strncpy(p.BranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v57.c_str()).c_str(), sizeof(p.BranchID));
  auto &v58 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v58.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v59 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v59.c_str()).c_str(), sizeof(p.AccountID));
  auto &v60 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v60.c_str()).c_str(), sizeof(p.CurrencyID));
  auto &v61 = j.at("reserve3").get_ref<const std::string &>();
  std::strncpy(p.reserve3, codec_convert("GBK//TRANSLIT", "UTF-8", v61.c_str()).c_str(), sizeof(p.reserve3));
  auto &v62 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v62.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v63 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v63.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v64 = j.at("ExchangeInstID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeInstID, codec_convert("GBK//TRANSLIT", "UTF-8", v64.c_str()).c_str(), sizeof(p.ExchangeInstID));
  auto &v65 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v65.c_str()).c_str(), sizeof(p.IPAddress));
  auto &v66 = j.at("OrderMemo").get_ref<const std::string &>();
  std::strncpy(p.OrderMemo, codec_convert("GBK//TRANSLIT", "UTF-8", v66.c_str()).c_str(), sizeof(p.OrderMemo));
  j.at("SessionReqSeq").get_to(p.SessionReqSeq);

}



void to_json(json& j, const CThostFtdcExchangeOrderField& p) {
  j = json{
           {"OrderPriceType", std::string(1, p.OrderPriceType)},
           {"Direction", std::string(1, p.Direction)},
           {"CombOffsetFlag", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombOffsetFlag)},
           {"CombHedgeFlag", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombHedgeFlag)},
           {"LimitPrice", p.LimitPrice},
           {"VolumeTotalOriginal", p.VolumeTotalOriginal},
           {"TimeCondition", std::string(1, p.TimeCondition)},
           {"GTDDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.GTDDate)},
           {"VolumeCondition", std::string(1, p.VolumeCondition)},
           {"MinVolume", p.MinVolume},
           {"ContingentCondition", std::string(1, p.ContingentCondition)},
           {"StopPrice", p.StopPrice},
           {"ForceCloseReason", std::string(1, p.ForceCloseReason)},
           {"IsAutoSuspend", p.IsAutoSuspend},
           {"BusinessUnit", codec_convert("UTF-8//TRANSLIT", "GBK", p.BusinessUnit)},
           {"RequestID", p.RequestID},
           {"OrderLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderLocalID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"InstallID", p.InstallID},
           {"OrderSubmitStatus", std::string(1, p.OrderSubmitStatus)},
           {"NotifySequence", p.NotifySequence},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"SettlementID", p.SettlementID},
           {"OrderSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderSysID)},
           {"OrderSource", std::string(1, p.OrderSource)},
           {"OrderStatus", std::string(1, p.OrderStatus)},
           {"OrderType", std::string(1, p.OrderType)},
           {"VolumeTraded", p.VolumeTraded},
           {"VolumeTotal", p.VolumeTotal},
           {"InsertDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.InsertDate)},
           {"InsertTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.InsertTime)},
           {"ActiveTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActiveTime)},
           {"SuspendTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.SuspendTime)},
           {"UpdateTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.UpdateTime)},
           {"CancelTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.CancelTime)},
           {"ActiveTraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActiveTraderID)},
           {"ClearingPartID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClearingPartID)},
           {"SequenceNo", p.SequenceNo},
           {"BranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BranchID)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"ExchangeInstID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeInstID)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
  };
}

void from_json(const json& j, CThostFtdcExchangeOrderField& p) {
  auto &v0 = j.at("OrderPriceType").get_ref<const std::string &>();
  p.OrderPriceType = v0.at(0);
  auto &v1 = j.at("Direction").get_ref<const std::string &>();
  p.Direction = v1.at(0);
  auto &v2 = j.at("CombOffsetFlag").get_ref<const std::string &>();
  std::strncpy(p.CombOffsetFlag, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.CombOffsetFlag));
  auto &v3 = j.at("CombHedgeFlag").get_ref<const std::string &>();
  std::strncpy(p.CombHedgeFlag, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.CombHedgeFlag));
  j.at("LimitPrice").get_to(p.LimitPrice);
  j.at("VolumeTotalOriginal").get_to(p.VolumeTotalOriginal);
  auto &v6 = j.at("TimeCondition").get_ref<const std::string &>();
  p.TimeCondition = v6.at(0);
  auto &v7 = j.at("GTDDate").get_ref<const std::string &>();
  std::strncpy(p.GTDDate, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.GTDDate));
  auto &v8 = j.at("VolumeCondition").get_ref<const std::string &>();
  p.VolumeCondition = v8.at(0);
  j.at("MinVolume").get_to(p.MinVolume);
  auto &v10 = j.at("ContingentCondition").get_ref<const std::string &>();
  p.ContingentCondition = v10.at(0);
  j.at("StopPrice").get_to(p.StopPrice);
  auto &v12 = j.at("ForceCloseReason").get_ref<const std::string &>();
  p.ForceCloseReason = v12.at(0);
  j.at("IsAutoSuspend").get_to(p.IsAutoSuspend);
  auto &v14 = j.at("BusinessUnit").get_ref<const std::string &>();
  std::strncpy(p.BusinessUnit, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.BusinessUnit));
  j.at("RequestID").get_to(p.RequestID);
  auto &v16 = j.at("OrderLocalID").get_ref<const std::string &>();
  std::strncpy(p.OrderLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.OrderLocalID));
  auto &v17 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v18 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v19 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.ClientID));
  auto &v20 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v20.c_str()).c_str(), sizeof(p.reserve1));
  auto &v21 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v21.c_str()).c_str(), sizeof(p.TraderID));
  j.at("InstallID").get_to(p.InstallID);
  auto &v23 = j.at("OrderSubmitStatus").get_ref<const std::string &>();
  p.OrderSubmitStatus = v23.at(0);
  j.at("NotifySequence").get_to(p.NotifySequence);
  auto &v25 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v25.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("SettlementID").get_to(p.SettlementID);
  auto &v27 = j.at("OrderSysID").get_ref<const std::string &>();
  std::strncpy(p.OrderSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v27.c_str()).c_str(), sizeof(p.OrderSysID));
  auto &v28 = j.at("OrderSource").get_ref<const std::string &>();
  p.OrderSource = v28.at(0);
  auto &v29 = j.at("OrderStatus").get_ref<const std::string &>();
  p.OrderStatus = v29.at(0);
  auto &v30 = j.at("OrderType").get_ref<const std::string &>();
  p.OrderType = v30.at(0);
  j.at("VolumeTraded").get_to(p.VolumeTraded);
  j.at("VolumeTotal").get_to(p.VolumeTotal);
  auto &v33 = j.at("InsertDate").get_ref<const std::string &>();
  std::strncpy(p.InsertDate, codec_convert("GBK//TRANSLIT", "UTF-8", v33.c_str()).c_str(), sizeof(p.InsertDate));
  auto &v34 = j.at("InsertTime").get_ref<const std::string &>();
  std::strncpy(p.InsertTime, codec_convert("GBK//TRANSLIT", "UTF-8", v34.c_str()).c_str(), sizeof(p.InsertTime));
  auto &v35 = j.at("ActiveTime").get_ref<const std::string &>();
  std::strncpy(p.ActiveTime, codec_convert("GBK//TRANSLIT", "UTF-8", v35.c_str()).c_str(), sizeof(p.ActiveTime));
  auto &v36 = j.at("SuspendTime").get_ref<const std::string &>();
  std::strncpy(p.SuspendTime, codec_convert("GBK//TRANSLIT", "UTF-8", v36.c_str()).c_str(), sizeof(p.SuspendTime));
  auto &v37 = j.at("UpdateTime").get_ref<const std::string &>();
  std::strncpy(p.UpdateTime, codec_convert("GBK//TRANSLIT", "UTF-8", v37.c_str()).c_str(), sizeof(p.UpdateTime));
  auto &v38 = j.at("CancelTime").get_ref<const std::string &>();
  std::strncpy(p.CancelTime, codec_convert("GBK//TRANSLIT", "UTF-8", v38.c_str()).c_str(), sizeof(p.CancelTime));
  auto &v39 = j.at("ActiveTraderID").get_ref<const std::string &>();
  std::strncpy(p.ActiveTraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v39.c_str()).c_str(), sizeof(p.ActiveTraderID));
  auto &v40 = j.at("ClearingPartID").get_ref<const std::string &>();
  std::strncpy(p.ClearingPartID, codec_convert("GBK//TRANSLIT", "UTF-8", v40.c_str()).c_str(), sizeof(p.ClearingPartID));
  j.at("SequenceNo").get_to(p.SequenceNo);
  auto &v42 = j.at("BranchID").get_ref<const std::string &>();
  std::strncpy(p.BranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v42.c_str()).c_str(), sizeof(p.BranchID));
  auto &v43 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v43.c_str()).c_str(), sizeof(p.reserve2));
  auto &v44 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v44.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v45 = j.at("ExchangeInstID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeInstID, codec_convert("GBK//TRANSLIT", "UTF-8", v45.c_str()).c_str(), sizeof(p.ExchangeInstID));
  auto &v46 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v46.c_str()).c_str(), sizeof(p.IPAddress));

}



void to_json(json& j, const CThostFtdcExchangeOrderInsertErrorField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"InstallID", p.InstallID},
           {"OrderLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderLocalID)},
           {"ErrorID", p.ErrorID},
           {"ErrorMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.ErrorMsg)},
  };
}

void from_json(const json& j, CThostFtdcExchangeOrderInsertErrorField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v2 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.TraderID));
  j.at("InstallID").get_to(p.InstallID);
  auto &v4 = j.at("OrderLocalID").get_ref<const std::string &>();
  std::strncpy(p.OrderLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.OrderLocalID));
  j.at("ErrorID").get_to(p.ErrorID);
  auto &v6 = j.at("ErrorMsg").get_ref<const std::string &>();
  std::strncpy(p.ErrorMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.ErrorMsg));

}



void to_json(json& j, const CThostFtdcInputOrderActionField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"OrderActionRef", p.OrderActionRef},
           {"OrderRef", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderRef)},
           {"RequestID", p.RequestID},
           {"FrontID", p.FrontID},
           {"SessionID", p.SessionID},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"OrderSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderSysID)},
           {"ActionFlag", std::string(1, p.ActionFlag)},
           {"LimitPrice", p.LimitPrice},
           {"VolumeChange", p.VolumeChange},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
           {"OrderMemo", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderMemo)},
           {"SessionReqSeq", p.SessionReqSeq},
  };
}

void from_json(const json& j, CThostFtdcInputOrderActionField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  j.at("OrderActionRef").get_to(p.OrderActionRef);
  auto &v3 = j.at("OrderRef").get_ref<const std::string &>();
  std::strncpy(p.OrderRef, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.OrderRef));
  j.at("RequestID").get_to(p.RequestID);
  j.at("FrontID").get_to(p.FrontID);
  j.at("SessionID").get_to(p.SessionID);
  auto &v7 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v8 = j.at("OrderSysID").get_ref<const std::string &>();
  std::strncpy(p.OrderSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.OrderSysID));
  auto &v9 = j.at("ActionFlag").get_ref<const std::string &>();
  p.ActionFlag = v9.at(0);
  j.at("LimitPrice").get_to(p.LimitPrice);
  j.at("VolumeChange").get_to(p.VolumeChange);
  auto &v12 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.UserID));
  auto &v13 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.reserve1));
  auto &v14 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v15 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.reserve2));
  auto &v16 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v17 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v18 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.IPAddress));
  auto &v19 = j.at("OrderMemo").get_ref<const std::string &>();
  std::strncpy(p.OrderMemo, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.OrderMemo));
  j.at("SessionReqSeq").get_to(p.SessionReqSeq);

}



void to_json(json& j, const CThostFtdcOrderActionField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"OrderActionRef", p.OrderActionRef},
           {"OrderRef", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderRef)},
           {"RequestID", p.RequestID},
           {"FrontID", p.FrontID},
           {"SessionID", p.SessionID},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"OrderSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderSysID)},
           {"ActionFlag", std::string(1, p.ActionFlag)},
           {"LimitPrice", p.LimitPrice},
           {"VolumeChange", p.VolumeChange},
           {"ActionDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionDate)},
           {"ActionTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionTime)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"InstallID", p.InstallID},
           {"OrderLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderLocalID)},
           {"ActionLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionLocalID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"BusinessUnit", codec_convert("UTF-8//TRANSLIT", "GBK", p.BusinessUnit)},
           {"OrderActionStatus", std::string(1, p.OrderActionStatus)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"StatusMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.StatusMsg)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"BranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BranchID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
           {"OrderMemo", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderMemo)},
           {"SessionReqSeq", p.SessionReqSeq},
  };
}

void from_json(const json& j, CThostFtdcOrderActionField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  j.at("OrderActionRef").get_to(p.OrderActionRef);
  auto &v3 = j.at("OrderRef").get_ref<const std::string &>();
  std::strncpy(p.OrderRef, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.OrderRef));
  j.at("RequestID").get_to(p.RequestID);
  j.at("FrontID").get_to(p.FrontID);
  j.at("SessionID").get_to(p.SessionID);
  auto &v7 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v8 = j.at("OrderSysID").get_ref<const std::string &>();
  std::strncpy(p.OrderSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.OrderSysID));
  auto &v9 = j.at("ActionFlag").get_ref<const std::string &>();
  p.ActionFlag = v9.at(0);
  j.at("LimitPrice").get_to(p.LimitPrice);
  j.at("VolumeChange").get_to(p.VolumeChange);
  auto &v12 = j.at("ActionDate").get_ref<const std::string &>();
  std::strncpy(p.ActionDate, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.ActionDate));
  auto &v13 = j.at("ActionTime").get_ref<const std::string &>();
  std::strncpy(p.ActionTime, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.ActionTime));
  auto &v14 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.TraderID));
  j.at("InstallID").get_to(p.InstallID);
  auto &v16 = j.at("OrderLocalID").get_ref<const std::string &>();
  std::strncpy(p.OrderLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.OrderLocalID));
  auto &v17 = j.at("ActionLocalID").get_ref<const std::string &>();
  std::strncpy(p.ActionLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.ActionLocalID));
  auto &v18 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v19 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.ClientID));
  auto &v20 = j.at("BusinessUnit").get_ref<const std::string &>();
  std::strncpy(p.BusinessUnit, codec_convert("GBK//TRANSLIT", "UTF-8", v20.c_str()).c_str(), sizeof(p.BusinessUnit));
  auto &v21 = j.at("OrderActionStatus").get_ref<const std::string &>();
  p.OrderActionStatus = v21.at(0);
  auto &v22 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.UserID));
  auto &v23 = j.at("StatusMsg").get_ref<const std::string &>();
  std::strncpy(p.StatusMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.StatusMsg));
  auto &v24 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v24.c_str()).c_str(), sizeof(p.reserve1));
  auto &v25 = j.at("BranchID").get_ref<const std::string &>();
  std::strncpy(p.BranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v25.c_str()).c_str(), sizeof(p.BranchID));
  auto &v26 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v26.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v27 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v27.c_str()).c_str(), sizeof(p.reserve2));
  auto &v28 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v28.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v29 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v29.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v30 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v30.c_str()).c_str(), sizeof(p.IPAddress));
  auto &v31 = j.at("OrderMemo").get_ref<const std::string &>();
  std::strncpy(p.OrderMemo, codec_convert("GBK//TRANSLIT", "UTF-8", v31.c_str()).c_str(), sizeof(p.OrderMemo));
  j.at("SessionReqSeq").get_to(p.SessionReqSeq);

}



void to_json(json& j, const CThostFtdcExchangeOrderActionField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"OrderSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderSysID)},
           {"ActionFlag", std::string(1, p.ActionFlag)},
           {"LimitPrice", p.LimitPrice},
           {"VolumeChange", p.VolumeChange},
           {"ActionDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionDate)},
           {"ActionTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionTime)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"InstallID", p.InstallID},
           {"OrderLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderLocalID)},
           {"ActionLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionLocalID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"BusinessUnit", codec_convert("UTF-8//TRANSLIT", "GBK", p.BusinessUnit)},
           {"OrderActionStatus", std::string(1, p.OrderActionStatus)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"BranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BranchID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
  };
}

void from_json(const json& j, CThostFtdcExchangeOrderActionField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("OrderSysID").get_ref<const std::string &>();
  std::strncpy(p.OrderSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.OrderSysID));
  auto &v2 = j.at("ActionFlag").get_ref<const std::string &>();
  p.ActionFlag = v2.at(0);
  j.at("LimitPrice").get_to(p.LimitPrice);
  j.at("VolumeChange").get_to(p.VolumeChange);
  auto &v5 = j.at("ActionDate").get_ref<const std::string &>();
  std::strncpy(p.ActionDate, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.ActionDate));
  auto &v6 = j.at("ActionTime").get_ref<const std::string &>();
  std::strncpy(p.ActionTime, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.ActionTime));
  auto &v7 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.TraderID));
  j.at("InstallID").get_to(p.InstallID);
  auto &v9 = j.at("OrderLocalID").get_ref<const std::string &>();
  std::strncpy(p.OrderLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.OrderLocalID));
  auto &v10 = j.at("ActionLocalID").get_ref<const std::string &>();
  std::strncpy(p.ActionLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.ActionLocalID));
  auto &v11 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v12 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.ClientID));
  auto &v13 = j.at("BusinessUnit").get_ref<const std::string &>();
  std::strncpy(p.BusinessUnit, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.BusinessUnit));
  auto &v14 = j.at("OrderActionStatus").get_ref<const std::string &>();
  p.OrderActionStatus = v14.at(0);
  auto &v15 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.UserID));
  auto &v16 = j.at("BranchID").get_ref<const std::string &>();
  std::strncpy(p.BranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.BranchID));
  auto &v17 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.reserve1));
  auto &v18 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v19 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.IPAddress));

}



void to_json(json& j, const CThostFtdcExchangeOrderActionErrorField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"OrderSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderSysID)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"InstallID", p.InstallID},
           {"OrderLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderLocalID)},
           {"ActionLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionLocalID)},
           {"ErrorID", p.ErrorID},
           {"ErrorMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.ErrorMsg)},
  };
}

void from_json(const json& j, CThostFtdcExchangeOrderActionErrorField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("OrderSysID").get_ref<const std::string &>();
  std::strncpy(p.OrderSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.OrderSysID));
  auto &v2 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.TraderID));
  j.at("InstallID").get_to(p.InstallID);
  auto &v4 = j.at("OrderLocalID").get_ref<const std::string &>();
  std::strncpy(p.OrderLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.OrderLocalID));
  auto &v5 = j.at("ActionLocalID").get_ref<const std::string &>();
  std::strncpy(p.ActionLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.ActionLocalID));
  j.at("ErrorID").get_to(p.ErrorID);
  auto &v7 = j.at("ErrorMsg").get_ref<const std::string &>();
  std::strncpy(p.ErrorMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.ErrorMsg));

}



void to_json(json& j, const CThostFtdcExchangeTradeField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"TradeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeID)},
           {"Direction", std::string(1, p.Direction)},
           {"OrderSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderSysID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"TradingRole", std::string(1, p.TradingRole)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"OffsetFlag", std::string(1, p.OffsetFlag)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"Price", p.Price},
           {"Volume", p.Volume},
           {"TradeDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDate)},
           {"TradeTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTime)},
           {"TradeType", std::string(1, p.TradeType)},
           {"PriceSource", std::string(1, p.PriceSource)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"OrderLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderLocalID)},
           {"ClearingPartID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClearingPartID)},
           {"BusinessUnit", codec_convert("UTF-8//TRANSLIT", "GBK", p.BusinessUnit)},
           {"SequenceNo", p.SequenceNo},
           {"TradeSource", std::string(1, p.TradeSource)},
           {"ExchangeInstID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeInstID)},
  };
}

void from_json(const json& j, CThostFtdcExchangeTradeField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("TradeID").get_ref<const std::string &>();
  std::strncpy(p.TradeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.TradeID));
  auto &v2 = j.at("Direction").get_ref<const std::string &>();
  p.Direction = v2.at(0);
  auto &v3 = j.at("OrderSysID").get_ref<const std::string &>();
  std::strncpy(p.OrderSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.OrderSysID));
  auto &v4 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v5 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.ClientID));
  auto &v6 = j.at("TradingRole").get_ref<const std::string &>();
  p.TradingRole = v6.at(0);
  auto &v7 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.reserve1));
  auto &v8 = j.at("OffsetFlag").get_ref<const std::string &>();
  p.OffsetFlag = v8.at(0);
  auto &v9 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v9.at(0);
  j.at("Price").get_to(p.Price);
  j.at("Volume").get_to(p.Volume);
  auto &v12 = j.at("TradeDate").get_ref<const std::string &>();
  std::strncpy(p.TradeDate, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.TradeDate));
  auto &v13 = j.at("TradeTime").get_ref<const std::string &>();
  std::strncpy(p.TradeTime, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.TradeTime));
  auto &v14 = j.at("TradeType").get_ref<const std::string &>();
  p.TradeType = v14.at(0);
  auto &v15 = j.at("PriceSource").get_ref<const std::string &>();
  p.PriceSource = v15.at(0);
  auto &v16 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.TraderID));
  auto &v17 = j.at("OrderLocalID").get_ref<const std::string &>();
  std::strncpy(p.OrderLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.OrderLocalID));
  auto &v18 = j.at("ClearingPartID").get_ref<const std::string &>();
  std::strncpy(p.ClearingPartID, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.ClearingPartID));
  auto &v19 = j.at("BusinessUnit").get_ref<const std::string &>();
  std::strncpy(p.BusinessUnit, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.BusinessUnit));
  j.at("SequenceNo").get_to(p.SequenceNo);
  auto &v21 = j.at("TradeSource").get_ref<const std::string &>();
  p.TradeSource = v21.at(0);
  auto &v22 = j.at("ExchangeInstID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeInstID, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.ExchangeInstID));

}



void to_json(json& j, const CThostFtdcTradeField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"OrderRef", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderRef)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"TradeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeID)},
           {"Direction", std::string(1, p.Direction)},
           {"OrderSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderSysID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"TradingRole", std::string(1, p.TradingRole)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"OffsetFlag", std::string(1, p.OffsetFlag)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"Price", p.Price},
           {"Volume", p.Volume},
           {"TradeDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDate)},
           {"TradeTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTime)},
           {"TradeType", std::string(1, p.TradeType)},
           {"PriceSource", std::string(1, p.PriceSource)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"OrderLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderLocalID)},
           {"ClearingPartID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClearingPartID)},
           {"BusinessUnit", codec_convert("UTF-8//TRANSLIT", "GBK", p.BusinessUnit)},
           {"SequenceNo", p.SequenceNo},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"SettlementID", p.SettlementID},
           {"BrokerOrderSeq", p.BrokerOrderSeq},
           {"TradeSource", std::string(1, p.TradeSource)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"ExchangeInstID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeInstID)},
  };
}

void from_json(const json& j, CThostFtdcTradeField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("OrderRef").get_ref<const std::string &>();
  std::strncpy(p.OrderRef, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.OrderRef));
  auto &v4 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.UserID));
  auto &v5 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v6 = j.at("TradeID").get_ref<const std::string &>();
  std::strncpy(p.TradeID, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.TradeID));
  auto &v7 = j.at("Direction").get_ref<const std::string &>();
  p.Direction = v7.at(0);
  auto &v8 = j.at("OrderSysID").get_ref<const std::string &>();
  std::strncpy(p.OrderSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.OrderSysID));
  auto &v9 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v10 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.ClientID));
  auto &v11 = j.at("TradingRole").get_ref<const std::string &>();
  p.TradingRole = v11.at(0);
  auto &v12 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.reserve2));
  auto &v13 = j.at("OffsetFlag").get_ref<const std::string &>();
  p.OffsetFlag = v13.at(0);
  auto &v14 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v14.at(0);
  j.at("Price").get_to(p.Price);
  j.at("Volume").get_to(p.Volume);
  auto &v17 = j.at("TradeDate").get_ref<const std::string &>();
  std::strncpy(p.TradeDate, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.TradeDate));
  auto &v18 = j.at("TradeTime").get_ref<const std::string &>();
  std::strncpy(p.TradeTime, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.TradeTime));
  auto &v19 = j.at("TradeType").get_ref<const std::string &>();
  p.TradeType = v19.at(0);
  auto &v20 = j.at("PriceSource").get_ref<const std::string &>();
  p.PriceSource = v20.at(0);
  auto &v21 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v21.c_str()).c_str(), sizeof(p.TraderID));
  auto &v22 = j.at("OrderLocalID").get_ref<const std::string &>();
  std::strncpy(p.OrderLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.OrderLocalID));
  auto &v23 = j.at("ClearingPartID").get_ref<const std::string &>();
  std::strncpy(p.ClearingPartID, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.ClearingPartID));
  auto &v24 = j.at("BusinessUnit").get_ref<const std::string &>();
  std::strncpy(p.BusinessUnit, codec_convert("GBK//TRANSLIT", "UTF-8", v24.c_str()).c_str(), sizeof(p.BusinessUnit));
  j.at("SequenceNo").get_to(p.SequenceNo);
  auto &v26 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v26.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("SettlementID").get_to(p.SettlementID);
  j.at("BrokerOrderSeq").get_to(p.BrokerOrderSeq);
  auto &v29 = j.at("TradeSource").get_ref<const std::string &>();
  p.TradeSource = v29.at(0);
  auto &v30 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v30.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v31 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v31.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v32 = j.at("ExchangeInstID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeInstID, codec_convert("GBK//TRANSLIT", "UTF-8", v32.c_str()).c_str(), sizeof(p.ExchangeInstID));

}



void to_json(json& j, const CThostFtdcUserSessionField& p) {
  j = json{
           {"FrontID", p.FrontID},
           {"SessionID", p.SessionID},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"LoginDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.LoginDate)},
           {"LoginTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.LoginTime)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"UserProductInfo", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserProductInfo)},
           {"InterfaceProductInfo", codec_convert("UTF-8//TRANSLIT", "GBK", p.InterfaceProductInfo)},
           {"ProtocolInfo", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProtocolInfo)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"LoginRemark", codec_convert("UTF-8//TRANSLIT", "GBK", p.LoginRemark)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
  };
}

void from_json(const json& j, CThostFtdcUserSessionField& p) {
  j.at("FrontID").get_to(p.FrontID);
  j.at("SessionID").get_to(p.SessionID);
  auto &v2 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v3 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.UserID));
  auto &v4 = j.at("LoginDate").get_ref<const std::string &>();
  std::strncpy(p.LoginDate, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.LoginDate));
  auto &v5 = j.at("LoginTime").get_ref<const std::string &>();
  std::strncpy(p.LoginTime, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.LoginTime));
  auto &v6 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.reserve1));
  auto &v7 = j.at("UserProductInfo").get_ref<const std::string &>();
  std::strncpy(p.UserProductInfo, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.UserProductInfo));
  auto &v8 = j.at("InterfaceProductInfo").get_ref<const std::string &>();
  std::strncpy(p.InterfaceProductInfo, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.InterfaceProductInfo));
  auto &v9 = j.at("ProtocolInfo").get_ref<const std::string &>();
  std::strncpy(p.ProtocolInfo, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.ProtocolInfo));
  auto &v10 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v11 = j.at("LoginRemark").get_ref<const std::string &>();
  std::strncpy(p.LoginRemark, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.LoginRemark));
  auto &v12 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.IPAddress));

}



void to_json(json& j, const CThostFtdcQryMaxOrderVolumeField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"Direction", std::string(1, p.Direction)},
           {"OffsetFlag", std::string(1, p.OffsetFlag)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"MaxVolume", p.MaxVolume},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQryMaxOrderVolumeField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("Direction").get_ref<const std::string &>();
  p.Direction = v3.at(0);
  auto &v4 = j.at("OffsetFlag").get_ref<const std::string &>();
  p.OffsetFlag = v4.at(0);
  auto &v5 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v5.at(0);
  j.at("MaxVolume").get_to(p.MaxVolume);
  auto &v7 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v8 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v9 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcSettlementInfoConfirmField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"ConfirmDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.ConfirmDate)},
           {"ConfirmTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.ConfirmTime)},
           {"SettlementID", p.SettlementID},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
  };
}

void from_json(const json& j, CThostFtdcSettlementInfoConfirmField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("ConfirmDate").get_ref<const std::string &>();
  std::strncpy(p.ConfirmDate, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ConfirmDate));
  auto &v3 = j.at("ConfirmTime").get_ref<const std::string &>();
  std::strncpy(p.ConfirmTime, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ConfirmTime));
  j.at("SettlementID").get_to(p.SettlementID);
  auto &v5 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.AccountID));
  auto &v6 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.CurrencyID));

}



void to_json(json& j, const CThostFtdcSyncDepositField& p) {
  j = json{
           {"DepositSeqNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.DepositSeqNo)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"Deposit", p.Deposit},
           {"IsForce", p.IsForce},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"IsFromSopt", p.IsFromSopt},
           {"TradingPassword", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingPassword)},
           {"IsSecAgentTranfer", p.IsSecAgentTranfer},
  };
}

void from_json(const json& j, CThostFtdcSyncDepositField& p) {
  auto &v0 = j.at("DepositSeqNo").get_ref<const std::string &>();
  std::strncpy(p.DepositSeqNo, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.DepositSeqNo));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorID));
  j.at("Deposit").get_to(p.Deposit);
  j.at("IsForce").get_to(p.IsForce);
  auto &v5 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.CurrencyID));
  j.at("IsFromSopt").get_to(p.IsFromSopt);
  auto &v7 = j.at("TradingPassword").get_ref<const std::string &>();
  std::strncpy(p.TradingPassword, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.TradingPassword));
  j.at("IsSecAgentTranfer").get_to(p.IsSecAgentTranfer);

}



void to_json(json& j, const CThostFtdcSyncFundMortgageField& p) {
  j = json{
           {"MortgageSeqNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.MortgageSeqNo)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"FromCurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.FromCurrencyID)},
           {"MortgageAmount", p.MortgageAmount},
           {"ToCurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ToCurrencyID)},
  };
}

void from_json(const json& j, CThostFtdcSyncFundMortgageField& p) {
  auto &v0 = j.at("MortgageSeqNo").get_ref<const std::string &>();
  std::strncpy(p.MortgageSeqNo, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.MortgageSeqNo));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v3 = j.at("FromCurrencyID").get_ref<const std::string &>();
  std::strncpy(p.FromCurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.FromCurrencyID));
  j.at("MortgageAmount").get_to(p.MortgageAmount);
  auto &v5 = j.at("ToCurrencyID").get_ref<const std::string &>();
  std::strncpy(p.ToCurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.ToCurrencyID));

}



void to_json(json& j, const CThostFtdcBrokerSyncField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
  };
}

void from_json(const json& j, CThostFtdcBrokerSyncField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));

}



void to_json(json& j, const CThostFtdcSyncingInvestorField& p) {
  j = json{
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorGroupID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorGroupID)},
           {"InvestorName", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorName)},
           {"IdentifiedCardType", std::string(1, p.IdentifiedCardType)},
           {"IdentifiedCardNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.IdentifiedCardNo)},
           {"IsActive", p.IsActive},
           {"Telephone", codec_convert("UTF-8//TRANSLIT", "GBK", p.Telephone)},
           {"Address", codec_convert("UTF-8//TRANSLIT", "GBK", p.Address)},
           {"OpenDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.OpenDate)},
           {"Mobile", codec_convert("UTF-8//TRANSLIT", "GBK", p.Mobile)},
           {"CommModelID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CommModelID)},
           {"MarginModelID", codec_convert("UTF-8//TRANSLIT", "GBK", p.MarginModelID)},
           {"IsOrderFreq", std::string(1, p.IsOrderFreq)},
           {"IsOpenVolLimit", std::string(1, p.IsOpenVolLimit)},
  };
}

void from_json(const json& j, CThostFtdcSyncingInvestorField& p) {
  auto &v0 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("InvestorGroupID").get_ref<const std::string &>();
  std::strncpy(p.InvestorGroupID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorGroupID));
  auto &v3 = j.at("InvestorName").get_ref<const std::string &>();
  std::strncpy(p.InvestorName, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InvestorName));
  auto &v4 = j.at("IdentifiedCardType").get_ref<const std::string &>();
  p.IdentifiedCardType = v4.at(0);
  auto &v5 = j.at("IdentifiedCardNo").get_ref<const std::string &>();
  std::strncpy(p.IdentifiedCardNo, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.IdentifiedCardNo));
  j.at("IsActive").get_to(p.IsActive);
  auto &v7 = j.at("Telephone").get_ref<const std::string &>();
  std::strncpy(p.Telephone, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.Telephone));
  auto &v8 = j.at("Address").get_ref<const std::string &>();
  std::strncpy(p.Address, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.Address));
  auto &v9 = j.at("OpenDate").get_ref<const std::string &>();
  std::strncpy(p.OpenDate, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.OpenDate));
  auto &v10 = j.at("Mobile").get_ref<const std::string &>();
  std::strncpy(p.Mobile, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.Mobile));
  auto &v11 = j.at("CommModelID").get_ref<const std::string &>();
  std::strncpy(p.CommModelID, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.CommModelID));
  auto &v12 = j.at("MarginModelID").get_ref<const std::string &>();
  std::strncpy(p.MarginModelID, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.MarginModelID));
  auto &v13 = j.at("IsOrderFreq").get_ref<const std::string &>();
  p.IsOrderFreq = v13.at(0);
  auto &v14 = j.at("IsOpenVolLimit").get_ref<const std::string &>();
  p.IsOpenVolLimit = v14.at(0);

}



void to_json(json& j, const CThostFtdcSyncingTradingCodeField& p) {
  j = json{
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"IsActive", p.IsActive},
           {"ClientIDType", std::string(1, p.ClientIDType)},
  };
}

void from_json(const json& j, CThostFtdcSyncingTradingCodeField& p) {
  auto &v0 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v3 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ClientID));
  j.at("IsActive").get_to(p.IsActive);
  auto &v5 = j.at("ClientIDType").get_ref<const std::string &>();
  p.ClientIDType = v5.at(0);

}



void to_json(json& j, const CThostFtdcSyncingInvestorGroupField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorGroupID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorGroupID)},
           {"InvestorGroupName", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorGroupName)},
  };
}

void from_json(const json& j, CThostFtdcSyncingInvestorGroupField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorGroupID").get_ref<const std::string &>();
  std::strncpy(p.InvestorGroupID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorGroupID));
  auto &v2 = j.at("InvestorGroupName").get_ref<const std::string &>();
  std::strncpy(p.InvestorGroupName, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorGroupName));

}



void to_json(json& j, const CThostFtdcSyncingTradingAccountField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"PreMortgage", p.PreMortgage},
           {"PreCredit", p.PreCredit},
           {"PreDeposit", p.PreDeposit},
           {"PreBalance", p.PreBalance},
           {"PreMargin", p.PreMargin},
           {"InterestBase", p.InterestBase},
           {"Interest", p.Interest},
           {"Deposit", p.Deposit},
           {"Withdraw", p.Withdraw},
           {"FrozenMargin", p.FrozenMargin},
           {"FrozenCash", p.FrozenCash},
           {"FrozenCommission", p.FrozenCommission},
           {"CurrMargin", p.CurrMargin},
           {"CashIn", p.CashIn},
           {"Commission", p.Commission},
           {"CloseProfit", p.CloseProfit},
           {"PositionProfit", p.PositionProfit},
           {"Balance", p.Balance},
           {"Available", p.Available},
           {"WithdrawQuota", p.WithdrawQuota},
           {"Reserve", p.Reserve},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"SettlementID", p.SettlementID},
           {"Credit", p.Credit},
           {"Mortgage", p.Mortgage},
           {"ExchangeMargin", p.ExchangeMargin},
           {"DeliveryMargin", p.DeliveryMargin},
           {"ExchangeDeliveryMargin", p.ExchangeDeliveryMargin},
           {"ReserveBalance", p.ReserveBalance},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"PreFundMortgageIn", p.PreFundMortgageIn},
           {"PreFundMortgageOut", p.PreFundMortgageOut},
           {"FundMortgageIn", p.FundMortgageIn},
           {"FundMortgageOut", p.FundMortgageOut},
           {"FundMortgageAvailable", p.FundMortgageAvailable},
           {"MortgageableFund", p.MortgageableFund},
           {"SpecProductMargin", p.SpecProductMargin},
           {"SpecProductFrozenMargin", p.SpecProductFrozenMargin},
           {"SpecProductCommission", p.SpecProductCommission},
           {"SpecProductFrozenCommission", p.SpecProductFrozenCommission},
           {"SpecProductPositionProfit", p.SpecProductPositionProfit},
           {"SpecProductCloseProfit", p.SpecProductCloseProfit},
           {"SpecProductPositionProfitByAlg", p.SpecProductPositionProfitByAlg},
           {"SpecProductExchangeMargin", p.SpecProductExchangeMargin},
           {"FrozenSwap", p.FrozenSwap},
           {"RemainSwap", p.RemainSwap},
  };
}

void from_json(const json& j, CThostFtdcSyncingTradingAccountField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.AccountID));
  j.at("PreMortgage").get_to(p.PreMortgage);
  j.at("PreCredit").get_to(p.PreCredit);
  j.at("PreDeposit").get_to(p.PreDeposit);
  j.at("PreBalance").get_to(p.PreBalance);
  j.at("PreMargin").get_to(p.PreMargin);
  j.at("InterestBase").get_to(p.InterestBase);
  j.at("Interest").get_to(p.Interest);
  j.at("Deposit").get_to(p.Deposit);
  j.at("Withdraw").get_to(p.Withdraw);
  j.at("FrozenMargin").get_to(p.FrozenMargin);
  j.at("FrozenCash").get_to(p.FrozenCash);
  j.at("FrozenCommission").get_to(p.FrozenCommission);
  j.at("CurrMargin").get_to(p.CurrMargin);
  j.at("CashIn").get_to(p.CashIn);
  j.at("Commission").get_to(p.Commission);
  j.at("CloseProfit").get_to(p.CloseProfit);
  j.at("PositionProfit").get_to(p.PositionProfit);
  j.at("Balance").get_to(p.Balance);
  j.at("Available").get_to(p.Available);
  j.at("WithdrawQuota").get_to(p.WithdrawQuota);
  j.at("Reserve").get_to(p.Reserve);
  auto &v23 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("SettlementID").get_to(p.SettlementID);
  j.at("Credit").get_to(p.Credit);
  j.at("Mortgage").get_to(p.Mortgage);
  j.at("ExchangeMargin").get_to(p.ExchangeMargin);
  j.at("DeliveryMargin").get_to(p.DeliveryMargin);
  j.at("ExchangeDeliveryMargin").get_to(p.ExchangeDeliveryMargin);
  j.at("ReserveBalance").get_to(p.ReserveBalance);
  auto &v31 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v31.c_str()).c_str(), sizeof(p.CurrencyID));
  j.at("PreFundMortgageIn").get_to(p.PreFundMortgageIn);
  j.at("PreFundMortgageOut").get_to(p.PreFundMortgageOut);
  j.at("FundMortgageIn").get_to(p.FundMortgageIn);
  j.at("FundMortgageOut").get_to(p.FundMortgageOut);
  j.at("FundMortgageAvailable").get_to(p.FundMortgageAvailable);
  j.at("MortgageableFund").get_to(p.MortgageableFund);
  j.at("SpecProductMargin").get_to(p.SpecProductMargin);
  j.at("SpecProductFrozenMargin").get_to(p.SpecProductFrozenMargin);
  j.at("SpecProductCommission").get_to(p.SpecProductCommission);
  j.at("SpecProductFrozenCommission").get_to(p.SpecProductFrozenCommission);
  j.at("SpecProductPositionProfit").get_to(p.SpecProductPositionProfit);
  j.at("SpecProductCloseProfit").get_to(p.SpecProductCloseProfit);
  j.at("SpecProductPositionProfitByAlg").get_to(p.SpecProductPositionProfitByAlg);
  j.at("SpecProductExchangeMargin").get_to(p.SpecProductExchangeMargin);
  j.at("FrozenSwap").get_to(p.FrozenSwap);
  j.at("RemainSwap").get_to(p.RemainSwap);

}



void to_json(json& j, const CThostFtdcSyncingInvestorPositionField& p) {
  j = json{
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"PosiDirection", std::string(1, p.PosiDirection)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"PositionDate", std::string(1, p.PositionDate)},
           {"YdPosition", p.YdPosition},
           {"Position", p.Position},
           {"LongFrozen", p.LongFrozen},
           {"ShortFrozen", p.ShortFrozen},
           {"LongFrozenAmount", p.LongFrozenAmount},
           {"ShortFrozenAmount", p.ShortFrozenAmount},
           {"OpenVolume", p.OpenVolume},
           {"CloseVolume", p.CloseVolume},
           {"OpenAmount", p.OpenAmount},
           {"CloseAmount", p.CloseAmount},
           {"PositionCost", p.PositionCost},
           {"PreMargin", p.PreMargin},
           {"UseMargin", p.UseMargin},
           {"FrozenMargin", p.FrozenMargin},
           {"FrozenCash", p.FrozenCash},
           {"FrozenCommission", p.FrozenCommission},
           {"CashIn", p.CashIn},
           {"Commission", p.Commission},
           {"CloseProfit", p.CloseProfit},
           {"PositionProfit", p.PositionProfit},
           {"PreSettlementPrice", p.PreSettlementPrice},
           {"SettlementPrice", p.SettlementPrice},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"SettlementID", p.SettlementID},
           {"OpenCost", p.OpenCost},
           {"ExchangeMargin", p.ExchangeMargin},
           {"CombPosition", p.CombPosition},
           {"CombLongFrozen", p.CombLongFrozen},
           {"CombShortFrozen", p.CombShortFrozen},
           {"CloseProfitByDate", p.CloseProfitByDate},
           {"CloseProfitByTrade", p.CloseProfitByTrade},
           {"TodayPosition", p.TodayPosition},
           {"MarginRateByMoney", p.MarginRateByMoney},
           {"MarginRateByVolume", p.MarginRateByVolume},
           {"StrikeFrozen", p.StrikeFrozen},
           {"StrikeFrozenAmount", p.StrikeFrozenAmount},
           {"AbandonFrozen", p.AbandonFrozen},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"YdStrikeFrozen", p.YdStrikeFrozen},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"PositionCostOffset", p.PositionCostOffset},
           {"TasPosition", p.TasPosition},
           {"TasPositionCost", p.TasPositionCost},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcSyncingInvestorPositionField& p) {
  auto &v0 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.reserve1));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v3 = j.at("PosiDirection").get_ref<const std::string &>();
  p.PosiDirection = v3.at(0);
  auto &v4 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v4.at(0);
  auto &v5 = j.at("PositionDate").get_ref<const std::string &>();
  p.PositionDate = v5.at(0);
  j.at("YdPosition").get_to(p.YdPosition);
  j.at("Position").get_to(p.Position);
  j.at("LongFrozen").get_to(p.LongFrozen);
  j.at("ShortFrozen").get_to(p.ShortFrozen);
  j.at("LongFrozenAmount").get_to(p.LongFrozenAmount);
  j.at("ShortFrozenAmount").get_to(p.ShortFrozenAmount);
  j.at("OpenVolume").get_to(p.OpenVolume);
  j.at("CloseVolume").get_to(p.CloseVolume);
  j.at("OpenAmount").get_to(p.OpenAmount);
  j.at("CloseAmount").get_to(p.CloseAmount);
  j.at("PositionCost").get_to(p.PositionCost);
  j.at("PreMargin").get_to(p.PreMargin);
  j.at("UseMargin").get_to(p.UseMargin);
  j.at("FrozenMargin").get_to(p.FrozenMargin);
  j.at("FrozenCash").get_to(p.FrozenCash);
  j.at("FrozenCommission").get_to(p.FrozenCommission);
  j.at("CashIn").get_to(p.CashIn);
  j.at("Commission").get_to(p.Commission);
  j.at("CloseProfit").get_to(p.CloseProfit);
  j.at("PositionProfit").get_to(p.PositionProfit);
  j.at("PreSettlementPrice").get_to(p.PreSettlementPrice);
  j.at("SettlementPrice").get_to(p.SettlementPrice);
  auto &v28 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v28.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("SettlementID").get_to(p.SettlementID);
  j.at("OpenCost").get_to(p.OpenCost);
  j.at("ExchangeMargin").get_to(p.ExchangeMargin);
  j.at("CombPosition").get_to(p.CombPosition);
  j.at("CombLongFrozen").get_to(p.CombLongFrozen);
  j.at("CombShortFrozen").get_to(p.CombShortFrozen);
  j.at("CloseProfitByDate").get_to(p.CloseProfitByDate);
  j.at("CloseProfitByTrade").get_to(p.CloseProfitByTrade);
  j.at("TodayPosition").get_to(p.TodayPosition);
  j.at("MarginRateByMoney").get_to(p.MarginRateByMoney);
  j.at("MarginRateByVolume").get_to(p.MarginRateByVolume);
  j.at("StrikeFrozen").get_to(p.StrikeFrozen);
  j.at("StrikeFrozenAmount").get_to(p.StrikeFrozenAmount);
  j.at("AbandonFrozen").get_to(p.AbandonFrozen);
  auto &v43 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v43.c_str()).c_str(), sizeof(p.ExchangeID));
  j.at("YdStrikeFrozen").get_to(p.YdStrikeFrozen);
  auto &v45 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v45.c_str()).c_str(), sizeof(p.InvestUnitID));
  j.at("PositionCostOffset").get_to(p.PositionCostOffset);
  j.at("TasPosition").get_to(p.TasPosition);
  j.at("TasPositionCost").get_to(p.TasPositionCost);
  auto &v49 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v49.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcSyncingInstrumentMarginRateField& p) {
  j = json{
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"InvestorRange", std::string(1, p.InvestorRange)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"LongMarginRatioByMoney", p.LongMarginRatioByMoney},
           {"LongMarginRatioByVolume", p.LongMarginRatioByVolume},
           {"ShortMarginRatioByMoney", p.ShortMarginRatioByMoney},
           {"ShortMarginRatioByVolume", p.ShortMarginRatioByVolume},
           {"IsRelative", p.IsRelative},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcSyncingInstrumentMarginRateField& p) {
  auto &v0 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.reserve1));
  auto &v1 = j.at("InvestorRange").get_ref<const std::string &>();
  p.InvestorRange = v1.at(0);
  auto &v2 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v3 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v4 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v4.at(0);
  j.at("LongMarginRatioByMoney").get_to(p.LongMarginRatioByMoney);
  j.at("LongMarginRatioByVolume").get_to(p.LongMarginRatioByVolume);
  j.at("ShortMarginRatioByMoney").get_to(p.ShortMarginRatioByMoney);
  j.at("ShortMarginRatioByVolume").get_to(p.ShortMarginRatioByVolume);
  j.at("IsRelative").get_to(p.IsRelative);
  auto &v10 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcSyncingInstrumentCommissionRateField& p) {
  j = json{
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"InvestorRange", std::string(1, p.InvestorRange)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"OpenRatioByMoney", p.OpenRatioByMoney},
           {"OpenRatioByVolume", p.OpenRatioByVolume},
           {"CloseRatioByMoney", p.CloseRatioByMoney},
           {"CloseRatioByVolume", p.CloseRatioByVolume},
           {"CloseTodayRatioByMoney", p.CloseTodayRatioByMoney},
           {"CloseTodayRatioByVolume", p.CloseTodayRatioByVolume},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcSyncingInstrumentCommissionRateField& p) {
  auto &v0 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.reserve1));
  auto &v1 = j.at("InvestorRange").get_ref<const std::string &>();
  p.InvestorRange = v1.at(0);
  auto &v2 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v3 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InvestorID));
  j.at("OpenRatioByMoney").get_to(p.OpenRatioByMoney);
  j.at("OpenRatioByVolume").get_to(p.OpenRatioByVolume);
  j.at("CloseRatioByMoney").get_to(p.CloseRatioByMoney);
  j.at("CloseRatioByVolume").get_to(p.CloseRatioByVolume);
  j.at("CloseTodayRatioByMoney").get_to(p.CloseTodayRatioByMoney);
  j.at("CloseTodayRatioByVolume").get_to(p.CloseTodayRatioByVolume);
  auto &v10 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcSyncingInstrumentTradingRightField& p) {
  j = json{
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"InvestorRange", std::string(1, p.InvestorRange)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"TradingRight", std::string(1, p.TradingRight)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcSyncingInstrumentTradingRightField& p) {
  auto &v0 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.reserve1));
  auto &v1 = j.at("InvestorRange").get_ref<const std::string &>();
  p.InvestorRange = v1.at(0);
  auto &v2 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v3 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v4 = j.at("TradingRight").get_ref<const std::string &>();
  p.TradingRight = v4.at(0);
  auto &v5 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcQryOrderField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"OrderSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderSysID)},
           {"InsertTimeStart", codec_convert("UTF-8//TRANSLIT", "GBK", p.InsertTimeStart)},
           {"InsertTimeEnd", codec_convert("UTF-8//TRANSLIT", "GBK", p.InsertTimeEnd)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQryOrderField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v4 = j.at("OrderSysID").get_ref<const std::string &>();
  std::strncpy(p.OrderSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.OrderSysID));
  auto &v5 = j.at("InsertTimeStart").get_ref<const std::string &>();
  std::strncpy(p.InsertTimeStart, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.InsertTimeStart));
  auto &v6 = j.at("InsertTimeEnd").get_ref<const std::string &>();
  std::strncpy(p.InsertTimeEnd, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.InsertTimeEnd));
  auto &v7 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v8 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcQryTradeField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"TradeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeID)},
           {"TradeTimeStart", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTimeStart)},
           {"TradeTimeEnd", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTimeEnd)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQryTradeField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v4 = j.at("TradeID").get_ref<const std::string &>();
  std::strncpy(p.TradeID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.TradeID));
  auto &v5 = j.at("TradeTimeStart").get_ref<const std::string &>();
  std::strncpy(p.TradeTimeStart, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.TradeTimeStart));
  auto &v6 = j.at("TradeTimeEnd").get_ref<const std::string &>();
  std::strncpy(p.TradeTimeEnd, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.TradeTimeEnd));
  auto &v7 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v8 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcQryInvestorPositionField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQryInvestorPositionField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v4 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v5 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcQryTradingAccountField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"BizType", std::string(1, p.BizType)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
  };
}

void from_json(const json& j, CThostFtdcQryTradingAccountField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.CurrencyID));
  auto &v3 = j.at("BizType").get_ref<const std::string &>();
  p.BizType = v3.at(0);
  auto &v4 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.AccountID));

}



void to_json(json& j, const CThostFtdcQryInvestorField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
  };
}

void from_json(const json& j, CThostFtdcQryInvestorField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));

}



void to_json(json& j, const CThostFtdcQryTradingCodeField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"ClientIDType", std::string(1, p.ClientIDType)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
  };
}

void from_json(const json& j, CThostFtdcQryTradingCodeField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v3 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ClientID));
  auto &v4 = j.at("ClientIDType").get_ref<const std::string &>();
  p.ClientIDType = v4.at(0);
  auto &v5 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.InvestUnitID));

}



void to_json(json& j, const CThostFtdcQryInvestorGroupField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
  };
}

void from_json(const json& j, CThostFtdcQryInvestorGroupField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));

}



void to_json(json& j, const CThostFtdcQryInstrumentMarginRateField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQryInstrumentMarginRateField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v3.at(0);
  auto &v4 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v5 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v6 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcQryInstrumentCommissionRateField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQryInstrumentCommissionRateField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v4 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v5 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcQryInstrumentTradingRightField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQryInstrumentTradingRightField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcQryBrokerField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
  };
}

void from_json(const json& j, CThostFtdcQryBrokerField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));

}



void to_json(json& j, const CThostFtdcQryTraderField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
  };
}

void from_json(const json& j, CThostFtdcQryTraderField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v2 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.TraderID));

}



void to_json(json& j, const CThostFtdcQrySuperUserFunctionField& p) {
  j = json{
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
  };
}

void from_json(const json& j, CThostFtdcQrySuperUserFunctionField& p) {
  auto &v0 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.UserID));

}



void to_json(json& j, const CThostFtdcQryUserSessionField& p) {
  j = json{
           {"FrontID", p.FrontID},
           {"SessionID", p.SessionID},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
  };
}

void from_json(const json& j, CThostFtdcQryUserSessionField& p) {
  j.at("FrontID").get_to(p.FrontID);
  j.at("SessionID").get_to(p.SessionID);
  auto &v2 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v3 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.UserID));

}



void to_json(json& j, const CThostFtdcQryPartBrokerField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
  };
}

void from_json(const json& j, CThostFtdcQryPartBrokerField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ParticipantID));

}



void to_json(json& j, const CThostFtdcQryFrontStatusField& p) {
  j = json{
           {"FrontID", p.FrontID},
  };
}

void from_json(const json& j, CThostFtdcQryFrontStatusField& p) {
  j.at("FrontID").get_to(p.FrontID);

}



void to_json(json& j, const CThostFtdcQryExchangeOrderField& p) {
  j = json{
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"ExchangeInstID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeInstID)},
  };
}

void from_json(const json& j, CThostFtdcQryExchangeOrderField& p) {
  auto &v0 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v1 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ClientID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v4 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.TraderID));
  auto &v5 = j.at("ExchangeInstID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeInstID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.ExchangeInstID));

}



void to_json(json& j, const CThostFtdcQryOrderActionField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
  };
}

void from_json(const json& j, CThostFtdcQryOrderActionField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ExchangeID));

}



void to_json(json& j, const CThostFtdcQryExchangeOrderActionField& p) {
  j = json{
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
  };
}

void from_json(const json& j, CThostFtdcQryExchangeOrderActionField& p) {
  auto &v0 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v1 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ClientID));
  auto &v2 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v3 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.TraderID));

}



void to_json(json& j, const CThostFtdcQrySuperUserField& p) {
  j = json{
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
  };
}

void from_json(const json& j, CThostFtdcQrySuperUserField& p) {
  auto &v0 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.UserID));

}



void to_json(json& j, const CThostFtdcQryExchangeField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
  };
}

void from_json(const json& j, CThostFtdcQryExchangeField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));

}



void to_json(json& j, const CThostFtdcQryProductField& p) {
  j = json{
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ProductClass", std::string(1, p.ProductClass)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductID)},
  };
}

void from_json(const json& j, CThostFtdcQryProductField& p) {
  auto &v0 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.reserve1));
  auto &v1 = j.at("ProductClass").get_ref<const std::string &>();
  p.ProductClass = v1.at(0);
  auto &v2 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v3 = j.at("ProductID").get_ref<const std::string &>();
  std::strncpy(p.ProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ProductID));

}



void to_json(json& j, const CThostFtdcQryInstrumentField& p) {
  j = json{
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"reserve3", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve3)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"ExchangeInstID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeInstID)},
           {"ProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductID)},
  };
}

void from_json(const json& j, CThostFtdcQryInstrumentField& p) {
  auto &v0 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.reserve1));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v2 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve2));
  auto &v3 = j.at("reserve3").get_ref<const std::string &>();
  std::strncpy(p.reserve3, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.reserve3));
  auto &v4 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v5 = j.at("ExchangeInstID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeInstID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.ExchangeInstID));
  auto &v6 = j.at("ProductID").get_ref<const std::string &>();
  std::strncpy(p.ProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.ProductID));

}



void to_json(json& j, const CThostFtdcQryDepthMarketDataField& p) {
  j = json{
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"ProductClass", std::string(1, p.ProductClass)},
  };
}

void from_json(const json& j, CThostFtdcQryDepthMarketDataField& p) {
  auto &v0 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.reserve1));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v2 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v3 = j.at("ProductClass").get_ref<const std::string &>();
  p.ProductClass = v3.at(0);

}



void to_json(json& j, const CThostFtdcQryBrokerUserField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
  };
}

void from_json(const json& j, CThostFtdcQryBrokerUserField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.UserID));

}



void to_json(json& j, const CThostFtdcQryBrokerUserFunctionField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
  };
}

void from_json(const json& j, CThostFtdcQryBrokerUserFunctionField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.UserID));

}



void to_json(json& j, const CThostFtdcQryTraderOfferField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
  };
}

void from_json(const json& j, CThostFtdcQryTraderOfferField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v2 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.TraderID));

}



void to_json(json& j, const CThostFtdcQrySyncDepositField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"DepositSeqNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.DepositSeqNo)},
  };
}

void from_json(const json& j, CThostFtdcQrySyncDepositField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("DepositSeqNo").get_ref<const std::string &>();
  std::strncpy(p.DepositSeqNo, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.DepositSeqNo));

}



void to_json(json& j, const CThostFtdcQrySettlementInfoField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
  };
}

void from_json(const json& j, CThostFtdcQrySettlementInfoField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v3 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.AccountID));
  auto &v4 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.CurrencyID));

}



void to_json(json& j, const CThostFtdcQryExchangeMarginRateField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQryExchangeMarginRateField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.reserve1));
  auto &v2 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v2.at(0);
  auto &v3 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v4 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcQryExchangeMarginRateAdjustField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQryExchangeMarginRateAdjustField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.reserve1));
  auto &v2 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v2.at(0);
  auto &v3 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcQryExchangeRateField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"FromCurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.FromCurrencyID)},
           {"ToCurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ToCurrencyID)},
  };
}

void from_json(const json& j, CThostFtdcQryExchangeRateField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("FromCurrencyID").get_ref<const std::string &>();
  std::strncpy(p.FromCurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.FromCurrencyID));
  auto &v2 = j.at("ToCurrencyID").get_ref<const std::string &>();
  std::strncpy(p.ToCurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ToCurrencyID));

}



void to_json(json& j, const CThostFtdcQrySyncFundMortgageField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"MortgageSeqNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.MortgageSeqNo)},
  };
}

void from_json(const json& j, CThostFtdcQrySyncFundMortgageField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("MortgageSeqNo").get_ref<const std::string &>();
  std::strncpy(p.MortgageSeqNo, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.MortgageSeqNo));

}



void to_json(json& j, const CThostFtdcQryHisOrderField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"OrderSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderSysID)},
           {"InsertTimeStart", codec_convert("UTF-8//TRANSLIT", "GBK", p.InsertTimeStart)},
           {"InsertTimeEnd", codec_convert("UTF-8//TRANSLIT", "GBK", p.InsertTimeEnd)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"SettlementID", p.SettlementID},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQryHisOrderField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v4 = j.at("OrderSysID").get_ref<const std::string &>();
  std::strncpy(p.OrderSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.OrderSysID));
  auto &v5 = j.at("InsertTimeStart").get_ref<const std::string &>();
  std::strncpy(p.InsertTimeStart, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.InsertTimeStart));
  auto &v6 = j.at("InsertTimeEnd").get_ref<const std::string &>();
  std::strncpy(p.InsertTimeEnd, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.InsertTimeEnd));
  auto &v7 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("SettlementID").get_to(p.SettlementID);
  auto &v9 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcOptionInstrMiniMarginField& p) {
  j = json{
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"InvestorRange", std::string(1, p.InvestorRange)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"MinMargin", p.MinMargin},
           {"ValueMethod", std::string(1, p.ValueMethod)},
           {"IsRelative", p.IsRelative},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcOptionInstrMiniMarginField& p) {
  auto &v0 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.reserve1));
  auto &v1 = j.at("InvestorRange").get_ref<const std::string &>();
  p.InvestorRange = v1.at(0);
  auto &v2 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v3 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InvestorID));
  j.at("MinMargin").get_to(p.MinMargin);
  auto &v5 = j.at("ValueMethod").get_ref<const std::string &>();
  p.ValueMethod = v5.at(0);
  j.at("IsRelative").get_to(p.IsRelative);
  auto &v7 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcOptionInstrMarginAdjustField& p) {
  j = json{
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"InvestorRange", std::string(1, p.InvestorRange)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"SShortMarginRatioByMoney", p.SShortMarginRatioByMoney},
           {"SShortMarginRatioByVolume", p.SShortMarginRatioByVolume},
           {"HShortMarginRatioByMoney", p.HShortMarginRatioByMoney},
           {"HShortMarginRatioByVolume", p.HShortMarginRatioByVolume},
           {"AShortMarginRatioByMoney", p.AShortMarginRatioByMoney},
           {"AShortMarginRatioByVolume", p.AShortMarginRatioByVolume},
           {"IsRelative", p.IsRelative},
           {"MShortMarginRatioByMoney", p.MShortMarginRatioByMoney},
           {"MShortMarginRatioByVolume", p.MShortMarginRatioByVolume},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcOptionInstrMarginAdjustField& p) {
  auto &v0 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.reserve1));
  auto &v1 = j.at("InvestorRange").get_ref<const std::string &>();
  p.InvestorRange = v1.at(0);
  auto &v2 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v3 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InvestorID));
  j.at("SShortMarginRatioByMoney").get_to(p.SShortMarginRatioByMoney);
  j.at("SShortMarginRatioByVolume").get_to(p.SShortMarginRatioByVolume);
  j.at("HShortMarginRatioByMoney").get_to(p.HShortMarginRatioByMoney);
  j.at("HShortMarginRatioByVolume").get_to(p.HShortMarginRatioByVolume);
  j.at("AShortMarginRatioByMoney").get_to(p.AShortMarginRatioByMoney);
  j.at("AShortMarginRatioByVolume").get_to(p.AShortMarginRatioByVolume);
  j.at("IsRelative").get_to(p.IsRelative);
  j.at("MShortMarginRatioByMoney").get_to(p.MShortMarginRatioByMoney);
  j.at("MShortMarginRatioByVolume").get_to(p.MShortMarginRatioByVolume);
  auto &v13 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcOptionInstrCommRateField& p) {
  j = json{
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"InvestorRange", std::string(1, p.InvestorRange)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"OpenRatioByMoney", p.OpenRatioByMoney},
           {"OpenRatioByVolume", p.OpenRatioByVolume},
           {"CloseRatioByMoney", p.CloseRatioByMoney},
           {"CloseRatioByVolume", p.CloseRatioByVolume},
           {"CloseTodayRatioByMoney", p.CloseTodayRatioByMoney},
           {"CloseTodayRatioByVolume", p.CloseTodayRatioByVolume},
           {"StrikeRatioByMoney", p.StrikeRatioByMoney},
           {"StrikeRatioByVolume", p.StrikeRatioByVolume},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcOptionInstrCommRateField& p) {
  auto &v0 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.reserve1));
  auto &v1 = j.at("InvestorRange").get_ref<const std::string &>();
  p.InvestorRange = v1.at(0);
  auto &v2 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v3 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InvestorID));
  j.at("OpenRatioByMoney").get_to(p.OpenRatioByMoney);
  j.at("OpenRatioByVolume").get_to(p.OpenRatioByVolume);
  j.at("CloseRatioByMoney").get_to(p.CloseRatioByMoney);
  j.at("CloseRatioByVolume").get_to(p.CloseRatioByVolume);
  j.at("CloseTodayRatioByMoney").get_to(p.CloseTodayRatioByMoney);
  j.at("CloseTodayRatioByVolume").get_to(p.CloseTodayRatioByVolume);
  j.at("StrikeRatioByMoney").get_to(p.StrikeRatioByMoney);
  j.at("StrikeRatioByVolume").get_to(p.StrikeRatioByVolume);
  auto &v12 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v13 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v14 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcOptionInstrTradeCostField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"FixedMargin", p.FixedMargin},
           {"MiniMargin", p.MiniMargin},
           {"Royalty", p.Royalty},
           {"ExchFixedMargin", p.ExchFixedMargin},
           {"ExchMiniMargin", p.ExchMiniMargin},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcOptionInstrTradeCostField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v3.at(0);
  j.at("FixedMargin").get_to(p.FixedMargin);
  j.at("MiniMargin").get_to(p.MiniMargin);
  j.at("Royalty").get_to(p.Royalty);
  j.at("ExchFixedMargin").get_to(p.ExchFixedMargin);
  j.at("ExchMiniMargin").get_to(p.ExchMiniMargin);
  auto &v9 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v10 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v11 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcQryOptionInstrTradeCostField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"InputPrice", p.InputPrice},
           {"UnderlyingPrice", p.UnderlyingPrice},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQryOptionInstrTradeCostField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v3.at(0);
  j.at("InputPrice").get_to(p.InputPrice);
  j.at("UnderlyingPrice").get_to(p.UnderlyingPrice);
  auto &v6 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v7 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v8 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcQryOptionInstrCommRateField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQryOptionInstrCommRateField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v4 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v5 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcIndexPriceField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ClosePrice", p.ClosePrice},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcIndexPriceField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.reserve1));
  j.at("ClosePrice").get_to(p.ClosePrice);
  auto &v3 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcInputExecOrderField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ExecOrderRef", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExecOrderRef)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"Volume", p.Volume},
           {"RequestID", p.RequestID},
           {"BusinessUnit", codec_convert("UTF-8//TRANSLIT", "GBK", p.BusinessUnit)},
           {"OffsetFlag", std::string(1, p.OffsetFlag)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"ActionType", std::string(1, p.ActionType)},
           {"PosiDirection", std::string(1, p.PosiDirection)},
           {"ReservePositionFlag", std::string(1, p.ReservePositionFlag)},
           {"CloseFlag", std::string(1, p.CloseFlag)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
  };
}

void from_json(const json& j, CThostFtdcInputExecOrderField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("ExecOrderRef").get_ref<const std::string &>();
  std::strncpy(p.ExecOrderRef, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ExecOrderRef));
  auto &v4 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.UserID));
  j.at("Volume").get_to(p.Volume);
  j.at("RequestID").get_to(p.RequestID);
  auto &v7 = j.at("BusinessUnit").get_ref<const std::string &>();
  std::strncpy(p.BusinessUnit, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BusinessUnit));
  auto &v8 = j.at("OffsetFlag").get_ref<const std::string &>();
  p.OffsetFlag = v8.at(0);
  auto &v9 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v9.at(0);
  auto &v10 = j.at("ActionType").get_ref<const std::string &>();
  p.ActionType = v10.at(0);
  auto &v11 = j.at("PosiDirection").get_ref<const std::string &>();
  p.PosiDirection = v11.at(0);
  auto &v12 = j.at("ReservePositionFlag").get_ref<const std::string &>();
  p.ReservePositionFlag = v12.at(0);
  auto &v13 = j.at("CloseFlag").get_ref<const std::string &>();
  p.CloseFlag = v13.at(0);
  auto &v14 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v15 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v16 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.AccountID));
  auto &v17 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.CurrencyID));
  auto &v18 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.ClientID));
  auto &v19 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.reserve2));
  auto &v20 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v20.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v21 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v21.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v22 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.IPAddress));

}



void to_json(json& j, const CThostFtdcInputExecOrderActionField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"ExecOrderActionRef", p.ExecOrderActionRef},
           {"ExecOrderRef", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExecOrderRef)},
           {"RequestID", p.RequestID},
           {"FrontID", p.FrontID},
           {"SessionID", p.SessionID},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ExecOrderSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExecOrderSysID)},
           {"ActionFlag", std::string(1, p.ActionFlag)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
  };
}

void from_json(const json& j, CThostFtdcInputExecOrderActionField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  j.at("ExecOrderActionRef").get_to(p.ExecOrderActionRef);
  auto &v3 = j.at("ExecOrderRef").get_ref<const std::string &>();
  std::strncpy(p.ExecOrderRef, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ExecOrderRef));
  j.at("RequestID").get_to(p.RequestID);
  j.at("FrontID").get_to(p.FrontID);
  j.at("SessionID").get_to(p.SessionID);
  auto &v7 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v8 = j.at("ExecOrderSysID").get_ref<const std::string &>();
  std::strncpy(p.ExecOrderSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.ExecOrderSysID));
  auto &v9 = j.at("ActionFlag").get_ref<const std::string &>();
  p.ActionFlag = v9.at(0);
  auto &v10 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.UserID));
  auto &v11 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.reserve1));
  auto &v12 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v13 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.reserve2));
  auto &v14 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v15 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v16 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.IPAddress));

}



void to_json(json& j, const CThostFtdcExecOrderField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ExecOrderRef", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExecOrderRef)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"Volume", p.Volume},
           {"RequestID", p.RequestID},
           {"BusinessUnit", codec_convert("UTF-8//TRANSLIT", "GBK", p.BusinessUnit)},
           {"OffsetFlag", std::string(1, p.OffsetFlag)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"ActionType", std::string(1, p.ActionType)},
           {"PosiDirection", std::string(1, p.PosiDirection)},
           {"ReservePositionFlag", std::string(1, p.ReservePositionFlag)},
           {"CloseFlag", std::string(1, p.CloseFlag)},
           {"ExecOrderLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExecOrderLocalID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"InstallID", p.InstallID},
           {"OrderSubmitStatus", std::string(1, p.OrderSubmitStatus)},
           {"NotifySequence", p.NotifySequence},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"SettlementID", p.SettlementID},
           {"ExecOrderSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExecOrderSysID)},
           {"InsertDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.InsertDate)},
           {"InsertTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.InsertTime)},
           {"CancelTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.CancelTime)},
           {"ExecResult", std::string(1, p.ExecResult)},
           {"ClearingPartID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClearingPartID)},
           {"SequenceNo", p.SequenceNo},
           {"FrontID", p.FrontID},
           {"SessionID", p.SessionID},
           {"UserProductInfo", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserProductInfo)},
           {"StatusMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.StatusMsg)},
           {"ActiveUserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActiveUserID)},
           {"BrokerExecOrderSeq", p.BrokerExecOrderSeq},
           {"BranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BranchID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"reserve3", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve3)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"ExchangeInstID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeInstID)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
  };
}

void from_json(const json& j, CThostFtdcExecOrderField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("ExecOrderRef").get_ref<const std::string &>();
  std::strncpy(p.ExecOrderRef, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ExecOrderRef));
  auto &v4 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.UserID));
  j.at("Volume").get_to(p.Volume);
  j.at("RequestID").get_to(p.RequestID);
  auto &v7 = j.at("BusinessUnit").get_ref<const std::string &>();
  std::strncpy(p.BusinessUnit, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BusinessUnit));
  auto &v8 = j.at("OffsetFlag").get_ref<const std::string &>();
  p.OffsetFlag = v8.at(0);
  auto &v9 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v9.at(0);
  auto &v10 = j.at("ActionType").get_ref<const std::string &>();
  p.ActionType = v10.at(0);
  auto &v11 = j.at("PosiDirection").get_ref<const std::string &>();
  p.PosiDirection = v11.at(0);
  auto &v12 = j.at("ReservePositionFlag").get_ref<const std::string &>();
  p.ReservePositionFlag = v12.at(0);
  auto &v13 = j.at("CloseFlag").get_ref<const std::string &>();
  p.CloseFlag = v13.at(0);
  auto &v14 = j.at("ExecOrderLocalID").get_ref<const std::string &>();
  std::strncpy(p.ExecOrderLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.ExecOrderLocalID));
  auto &v15 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v16 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v17 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.ClientID));
  auto &v18 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.reserve2));
  auto &v19 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.TraderID));
  j.at("InstallID").get_to(p.InstallID);
  auto &v21 = j.at("OrderSubmitStatus").get_ref<const std::string &>();
  p.OrderSubmitStatus = v21.at(0);
  j.at("NotifySequence").get_to(p.NotifySequence);
  auto &v23 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("SettlementID").get_to(p.SettlementID);
  auto &v25 = j.at("ExecOrderSysID").get_ref<const std::string &>();
  std::strncpy(p.ExecOrderSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v25.c_str()).c_str(), sizeof(p.ExecOrderSysID));
  auto &v26 = j.at("InsertDate").get_ref<const std::string &>();
  std::strncpy(p.InsertDate, codec_convert("GBK//TRANSLIT", "UTF-8", v26.c_str()).c_str(), sizeof(p.InsertDate));
  auto &v27 = j.at("InsertTime").get_ref<const std::string &>();
  std::strncpy(p.InsertTime, codec_convert("GBK//TRANSLIT", "UTF-8", v27.c_str()).c_str(), sizeof(p.InsertTime));
  auto &v28 = j.at("CancelTime").get_ref<const std::string &>();
  std::strncpy(p.CancelTime, codec_convert("GBK//TRANSLIT", "UTF-8", v28.c_str()).c_str(), sizeof(p.CancelTime));
  auto &v29 = j.at("ExecResult").get_ref<const std::string &>();
  p.ExecResult = v29.at(0);
  auto &v30 = j.at("ClearingPartID").get_ref<const std::string &>();
  std::strncpy(p.ClearingPartID, codec_convert("GBK//TRANSLIT", "UTF-8", v30.c_str()).c_str(), sizeof(p.ClearingPartID));
  j.at("SequenceNo").get_to(p.SequenceNo);
  j.at("FrontID").get_to(p.FrontID);
  j.at("SessionID").get_to(p.SessionID);
  auto &v34 = j.at("UserProductInfo").get_ref<const std::string &>();
  std::strncpy(p.UserProductInfo, codec_convert("GBK//TRANSLIT", "UTF-8", v34.c_str()).c_str(), sizeof(p.UserProductInfo));
  auto &v35 = j.at("StatusMsg").get_ref<const std::string &>();
  std::strncpy(p.StatusMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v35.c_str()).c_str(), sizeof(p.StatusMsg));
  auto &v36 = j.at("ActiveUserID").get_ref<const std::string &>();
  std::strncpy(p.ActiveUserID, codec_convert("GBK//TRANSLIT", "UTF-8", v36.c_str()).c_str(), sizeof(p.ActiveUserID));
  j.at("BrokerExecOrderSeq").get_to(p.BrokerExecOrderSeq);
  auto &v38 = j.at("BranchID").get_ref<const std::string &>();
  std::strncpy(p.BranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v38.c_str()).c_str(), sizeof(p.BranchID));
  auto &v39 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v39.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v40 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v40.c_str()).c_str(), sizeof(p.AccountID));
  auto &v41 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v41.c_str()).c_str(), sizeof(p.CurrencyID));
  auto &v42 = j.at("reserve3").get_ref<const std::string &>();
  std::strncpy(p.reserve3, codec_convert("GBK//TRANSLIT", "UTF-8", v42.c_str()).c_str(), sizeof(p.reserve3));
  auto &v43 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v43.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v44 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v44.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v45 = j.at("ExchangeInstID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeInstID, codec_convert("GBK//TRANSLIT", "UTF-8", v45.c_str()).c_str(), sizeof(p.ExchangeInstID));
  auto &v46 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v46.c_str()).c_str(), sizeof(p.IPAddress));

}



void to_json(json& j, const CThostFtdcExecOrderActionField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"ExecOrderActionRef", p.ExecOrderActionRef},
           {"ExecOrderRef", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExecOrderRef)},
           {"RequestID", p.RequestID},
           {"FrontID", p.FrontID},
           {"SessionID", p.SessionID},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ExecOrderSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExecOrderSysID)},
           {"ActionFlag", std::string(1, p.ActionFlag)},
           {"ActionDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionDate)},
           {"ActionTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionTime)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"InstallID", p.InstallID},
           {"ExecOrderLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExecOrderLocalID)},
           {"ActionLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionLocalID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"BusinessUnit", codec_convert("UTF-8//TRANSLIT", "GBK", p.BusinessUnit)},
           {"OrderActionStatus", std::string(1, p.OrderActionStatus)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"ActionType", std::string(1, p.ActionType)},
           {"StatusMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.StatusMsg)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"BranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BranchID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
  };
}

void from_json(const json& j, CThostFtdcExecOrderActionField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  j.at("ExecOrderActionRef").get_to(p.ExecOrderActionRef);
  auto &v3 = j.at("ExecOrderRef").get_ref<const std::string &>();
  std::strncpy(p.ExecOrderRef, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ExecOrderRef));
  j.at("RequestID").get_to(p.RequestID);
  j.at("FrontID").get_to(p.FrontID);
  j.at("SessionID").get_to(p.SessionID);
  auto &v7 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v8 = j.at("ExecOrderSysID").get_ref<const std::string &>();
  std::strncpy(p.ExecOrderSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.ExecOrderSysID));
  auto &v9 = j.at("ActionFlag").get_ref<const std::string &>();
  p.ActionFlag = v9.at(0);
  auto &v10 = j.at("ActionDate").get_ref<const std::string &>();
  std::strncpy(p.ActionDate, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.ActionDate));
  auto &v11 = j.at("ActionTime").get_ref<const std::string &>();
  std::strncpy(p.ActionTime, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.ActionTime));
  auto &v12 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.TraderID));
  j.at("InstallID").get_to(p.InstallID);
  auto &v14 = j.at("ExecOrderLocalID").get_ref<const std::string &>();
  std::strncpy(p.ExecOrderLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.ExecOrderLocalID));
  auto &v15 = j.at("ActionLocalID").get_ref<const std::string &>();
  std::strncpy(p.ActionLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.ActionLocalID));
  auto &v16 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v17 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.ClientID));
  auto &v18 = j.at("BusinessUnit").get_ref<const std::string &>();
  std::strncpy(p.BusinessUnit, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.BusinessUnit));
  auto &v19 = j.at("OrderActionStatus").get_ref<const std::string &>();
  p.OrderActionStatus = v19.at(0);
  auto &v20 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v20.c_str()).c_str(), sizeof(p.UserID));
  auto &v21 = j.at("ActionType").get_ref<const std::string &>();
  p.ActionType = v21.at(0);
  auto &v22 = j.at("StatusMsg").get_ref<const std::string &>();
  std::strncpy(p.StatusMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.StatusMsg));
  auto &v23 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.reserve1));
  auto &v24 = j.at("BranchID").get_ref<const std::string &>();
  std::strncpy(p.BranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v24.c_str()).c_str(), sizeof(p.BranchID));
  auto &v25 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v25.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v26 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v26.c_str()).c_str(), sizeof(p.reserve2));
  auto &v27 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v27.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v28 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v28.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v29 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v29.c_str()).c_str(), sizeof(p.IPAddress));

}



void to_json(json& j, const CThostFtdcQryExecOrderField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ExecOrderSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExecOrderSysID)},
           {"InsertTimeStart", codec_convert("UTF-8//TRANSLIT", "GBK", p.InsertTimeStart)},
           {"InsertTimeEnd", codec_convert("UTF-8//TRANSLIT", "GBK", p.InsertTimeEnd)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQryExecOrderField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v4 = j.at("ExecOrderSysID").get_ref<const std::string &>();
  std::strncpy(p.ExecOrderSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.ExecOrderSysID));
  auto &v5 = j.at("InsertTimeStart").get_ref<const std::string &>();
  std::strncpy(p.InsertTimeStart, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.InsertTimeStart));
  auto &v6 = j.at("InsertTimeEnd").get_ref<const std::string &>();
  std::strncpy(p.InsertTimeEnd, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.InsertTimeEnd));
  auto &v7 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcExchangeExecOrderField& p) {
  j = json{
           {"Volume", p.Volume},
           {"RequestID", p.RequestID},
           {"BusinessUnit", codec_convert("UTF-8//TRANSLIT", "GBK", p.BusinessUnit)},
           {"OffsetFlag", std::string(1, p.OffsetFlag)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"ActionType", std::string(1, p.ActionType)},
           {"PosiDirection", std::string(1, p.PosiDirection)},
           {"ReservePositionFlag", std::string(1, p.ReservePositionFlag)},
           {"CloseFlag", std::string(1, p.CloseFlag)},
           {"ExecOrderLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExecOrderLocalID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"InstallID", p.InstallID},
           {"OrderSubmitStatus", std::string(1, p.OrderSubmitStatus)},
           {"NotifySequence", p.NotifySequence},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"SettlementID", p.SettlementID},
           {"ExecOrderSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExecOrderSysID)},
           {"InsertDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.InsertDate)},
           {"InsertTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.InsertTime)},
           {"CancelTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.CancelTime)},
           {"ExecResult", std::string(1, p.ExecResult)},
           {"ClearingPartID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClearingPartID)},
           {"SequenceNo", p.SequenceNo},
           {"BranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BranchID)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"ExchangeInstID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeInstID)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
  };
}

void from_json(const json& j, CThostFtdcExchangeExecOrderField& p) {
  j.at("Volume").get_to(p.Volume);
  j.at("RequestID").get_to(p.RequestID);
  auto &v2 = j.at("BusinessUnit").get_ref<const std::string &>();
  std::strncpy(p.BusinessUnit, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BusinessUnit));
  auto &v3 = j.at("OffsetFlag").get_ref<const std::string &>();
  p.OffsetFlag = v3.at(0);
  auto &v4 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v4.at(0);
  auto &v5 = j.at("ActionType").get_ref<const std::string &>();
  p.ActionType = v5.at(0);
  auto &v6 = j.at("PosiDirection").get_ref<const std::string &>();
  p.PosiDirection = v6.at(0);
  auto &v7 = j.at("ReservePositionFlag").get_ref<const std::string &>();
  p.ReservePositionFlag = v7.at(0);
  auto &v8 = j.at("CloseFlag").get_ref<const std::string &>();
  p.CloseFlag = v8.at(0);
  auto &v9 = j.at("ExecOrderLocalID").get_ref<const std::string &>();
  std::strncpy(p.ExecOrderLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.ExecOrderLocalID));
  auto &v10 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v11 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v12 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.ClientID));
  auto &v13 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.reserve1));
  auto &v14 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.TraderID));
  j.at("InstallID").get_to(p.InstallID);
  auto &v16 = j.at("OrderSubmitStatus").get_ref<const std::string &>();
  p.OrderSubmitStatus = v16.at(0);
  j.at("NotifySequence").get_to(p.NotifySequence);
  auto &v18 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("SettlementID").get_to(p.SettlementID);
  auto &v20 = j.at("ExecOrderSysID").get_ref<const std::string &>();
  std::strncpy(p.ExecOrderSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v20.c_str()).c_str(), sizeof(p.ExecOrderSysID));
  auto &v21 = j.at("InsertDate").get_ref<const std::string &>();
  std::strncpy(p.InsertDate, codec_convert("GBK//TRANSLIT", "UTF-8", v21.c_str()).c_str(), sizeof(p.InsertDate));
  auto &v22 = j.at("InsertTime").get_ref<const std::string &>();
  std::strncpy(p.InsertTime, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.InsertTime));
  auto &v23 = j.at("CancelTime").get_ref<const std::string &>();
  std::strncpy(p.CancelTime, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.CancelTime));
  auto &v24 = j.at("ExecResult").get_ref<const std::string &>();
  p.ExecResult = v24.at(0);
  auto &v25 = j.at("ClearingPartID").get_ref<const std::string &>();
  std::strncpy(p.ClearingPartID, codec_convert("GBK//TRANSLIT", "UTF-8", v25.c_str()).c_str(), sizeof(p.ClearingPartID));
  j.at("SequenceNo").get_to(p.SequenceNo);
  auto &v27 = j.at("BranchID").get_ref<const std::string &>();
  std::strncpy(p.BranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v27.c_str()).c_str(), sizeof(p.BranchID));
  auto &v28 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v28.c_str()).c_str(), sizeof(p.reserve2));
  auto &v29 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v29.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v30 = j.at("ExchangeInstID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeInstID, codec_convert("GBK//TRANSLIT", "UTF-8", v30.c_str()).c_str(), sizeof(p.ExchangeInstID));
  auto &v31 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v31.c_str()).c_str(), sizeof(p.IPAddress));

}



void to_json(json& j, const CThostFtdcQryExchangeExecOrderField& p) {
  j = json{
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"ExchangeInstID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeInstID)},
  };
}

void from_json(const json& j, CThostFtdcQryExchangeExecOrderField& p) {
  auto &v0 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v1 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ClientID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v4 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.TraderID));
  auto &v5 = j.at("ExchangeInstID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeInstID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.ExchangeInstID));

}



void to_json(json& j, const CThostFtdcQryExecOrderActionField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
  };
}

void from_json(const json& j, CThostFtdcQryExecOrderActionField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ExchangeID));

}



void to_json(json& j, const CThostFtdcExchangeExecOrderActionField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ExecOrderSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExecOrderSysID)},
           {"ActionFlag", std::string(1, p.ActionFlag)},
           {"ActionDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionDate)},
           {"ActionTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionTime)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"InstallID", p.InstallID},
           {"ExecOrderLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExecOrderLocalID)},
           {"ActionLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionLocalID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"BusinessUnit", codec_convert("UTF-8//TRANSLIT", "GBK", p.BusinessUnit)},
           {"OrderActionStatus", std::string(1, p.OrderActionStatus)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"ActionType", std::string(1, p.ActionType)},
           {"BranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BranchID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"Volume", p.Volume},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
           {"ExchangeInstID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeInstID)},
  };
}

void from_json(const json& j, CThostFtdcExchangeExecOrderActionField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("ExecOrderSysID").get_ref<const std::string &>();
  std::strncpy(p.ExecOrderSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExecOrderSysID));
  auto &v2 = j.at("ActionFlag").get_ref<const std::string &>();
  p.ActionFlag = v2.at(0);
  auto &v3 = j.at("ActionDate").get_ref<const std::string &>();
  std::strncpy(p.ActionDate, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ActionDate));
  auto &v4 = j.at("ActionTime").get_ref<const std::string &>();
  std::strncpy(p.ActionTime, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.ActionTime));
  auto &v5 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.TraderID));
  j.at("InstallID").get_to(p.InstallID);
  auto &v7 = j.at("ExecOrderLocalID").get_ref<const std::string &>();
  std::strncpy(p.ExecOrderLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.ExecOrderLocalID));
  auto &v8 = j.at("ActionLocalID").get_ref<const std::string &>();
  std::strncpy(p.ActionLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.ActionLocalID));
  auto &v9 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v10 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.ClientID));
  auto &v11 = j.at("BusinessUnit").get_ref<const std::string &>();
  std::strncpy(p.BusinessUnit, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.BusinessUnit));
  auto &v12 = j.at("OrderActionStatus").get_ref<const std::string &>();
  p.OrderActionStatus = v12.at(0);
  auto &v13 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.UserID));
  auto &v14 = j.at("ActionType").get_ref<const std::string &>();
  p.ActionType = v14.at(0);
  auto &v15 = j.at("BranchID").get_ref<const std::string &>();
  std::strncpy(p.BranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.BranchID));
  auto &v16 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.reserve1));
  auto &v17 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v18 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.reserve2));
  j.at("Volume").get_to(p.Volume);
  auto &v20 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v20.c_str()).c_str(), sizeof(p.IPAddress));
  auto &v21 = j.at("ExchangeInstID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeInstID, codec_convert("GBK//TRANSLIT", "UTF-8", v21.c_str()).c_str(), sizeof(p.ExchangeInstID));

}



void to_json(json& j, const CThostFtdcQryExchangeExecOrderActionField& p) {
  j = json{
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
  };
}

void from_json(const json& j, CThostFtdcQryExchangeExecOrderActionField& p) {
  auto &v0 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v1 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ClientID));
  auto &v2 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v3 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.TraderID));

}



void to_json(json& j, const CThostFtdcErrExecOrderField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ExecOrderRef", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExecOrderRef)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"Volume", p.Volume},
           {"RequestID", p.RequestID},
           {"BusinessUnit", codec_convert("UTF-8//TRANSLIT", "GBK", p.BusinessUnit)},
           {"OffsetFlag", std::string(1, p.OffsetFlag)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"ActionType", std::string(1, p.ActionType)},
           {"PosiDirection", std::string(1, p.PosiDirection)},
           {"ReservePositionFlag", std::string(1, p.ReservePositionFlag)},
           {"CloseFlag", std::string(1, p.CloseFlag)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"ErrorID", p.ErrorID},
           {"ErrorMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.ErrorMsg)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
  };
}

void from_json(const json& j, CThostFtdcErrExecOrderField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("ExecOrderRef").get_ref<const std::string &>();
  std::strncpy(p.ExecOrderRef, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ExecOrderRef));
  auto &v4 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.UserID));
  j.at("Volume").get_to(p.Volume);
  j.at("RequestID").get_to(p.RequestID);
  auto &v7 = j.at("BusinessUnit").get_ref<const std::string &>();
  std::strncpy(p.BusinessUnit, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BusinessUnit));
  auto &v8 = j.at("OffsetFlag").get_ref<const std::string &>();
  p.OffsetFlag = v8.at(0);
  auto &v9 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v9.at(0);
  auto &v10 = j.at("ActionType").get_ref<const std::string &>();
  p.ActionType = v10.at(0);
  auto &v11 = j.at("PosiDirection").get_ref<const std::string &>();
  p.PosiDirection = v11.at(0);
  auto &v12 = j.at("ReservePositionFlag").get_ref<const std::string &>();
  p.ReservePositionFlag = v12.at(0);
  auto &v13 = j.at("CloseFlag").get_ref<const std::string &>();
  p.CloseFlag = v13.at(0);
  auto &v14 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v15 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v16 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.AccountID));
  auto &v17 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.CurrencyID));
  auto &v18 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.ClientID));
  auto &v19 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.reserve2));
  auto &v20 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v20.c_str()).c_str(), sizeof(p.MacAddress));
  j.at("ErrorID").get_to(p.ErrorID);
  auto &v22 = j.at("ErrorMsg").get_ref<const std::string &>();
  std::strncpy(p.ErrorMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.ErrorMsg));
  auto &v23 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v24 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v24.c_str()).c_str(), sizeof(p.IPAddress));

}



void to_json(json& j, const CThostFtdcQryErrExecOrderField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
  };
}

void from_json(const json& j, CThostFtdcQryErrExecOrderField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));

}



void to_json(json& j, const CThostFtdcErrExecOrderActionField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"ExecOrderActionRef", p.ExecOrderActionRef},
           {"ExecOrderRef", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExecOrderRef)},
           {"RequestID", p.RequestID},
           {"FrontID", p.FrontID},
           {"SessionID", p.SessionID},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ExecOrderSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExecOrderSysID)},
           {"ActionFlag", std::string(1, p.ActionFlag)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"ErrorID", p.ErrorID},
           {"ErrorMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.ErrorMsg)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
  };
}

void from_json(const json& j, CThostFtdcErrExecOrderActionField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  j.at("ExecOrderActionRef").get_to(p.ExecOrderActionRef);
  auto &v3 = j.at("ExecOrderRef").get_ref<const std::string &>();
  std::strncpy(p.ExecOrderRef, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ExecOrderRef));
  j.at("RequestID").get_to(p.RequestID);
  j.at("FrontID").get_to(p.FrontID);
  j.at("SessionID").get_to(p.SessionID);
  auto &v7 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v8 = j.at("ExecOrderSysID").get_ref<const std::string &>();
  std::strncpy(p.ExecOrderSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.ExecOrderSysID));
  auto &v9 = j.at("ActionFlag").get_ref<const std::string &>();
  p.ActionFlag = v9.at(0);
  auto &v10 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.UserID));
  auto &v11 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.reserve1));
  auto &v12 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v13 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.reserve2));
  auto &v14 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.MacAddress));
  j.at("ErrorID").get_to(p.ErrorID);
  auto &v16 = j.at("ErrorMsg").get_ref<const std::string &>();
  std::strncpy(p.ErrorMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.ErrorMsg));
  auto &v17 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v18 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.IPAddress));

}



void to_json(json& j, const CThostFtdcQryErrExecOrderActionField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
  };
}

void from_json(const json& j, CThostFtdcQryErrExecOrderActionField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));

}



void to_json(json& j, const CThostFtdcOptionInstrTradingRightField& p) {
  j = json{
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"InvestorRange", std::string(1, p.InvestorRange)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"Direction", std::string(1, p.Direction)},
           {"TradingRight", std::string(1, p.TradingRight)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcOptionInstrTradingRightField& p) {
  auto &v0 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.reserve1));
  auto &v1 = j.at("InvestorRange").get_ref<const std::string &>();
  p.InvestorRange = v1.at(0);
  auto &v2 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v3 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v4 = j.at("Direction").get_ref<const std::string &>();
  p.Direction = v4.at(0);
  auto &v5 = j.at("TradingRight").get_ref<const std::string &>();
  p.TradingRight = v5.at(0);
  auto &v6 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcQryOptionInstrTradingRightField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"Direction", std::string(1, p.Direction)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQryOptionInstrTradingRightField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("Direction").get_ref<const std::string &>();
  p.Direction = v3.at(0);
  auto &v4 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcInputForQuoteField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ForQuoteRef", codec_convert("UTF-8//TRANSLIT", "GBK", p.ForQuoteRef)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
  };
}

void from_json(const json& j, CThostFtdcInputForQuoteField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("ForQuoteRef").get_ref<const std::string &>();
  std::strncpy(p.ForQuoteRef, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ForQuoteRef));
  auto &v4 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.UserID));
  auto &v5 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v6 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v7 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.reserve2));
  auto &v8 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v9 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v10 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.IPAddress));

}



void to_json(json& j, const CThostFtdcForQuoteField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ForQuoteRef", codec_convert("UTF-8//TRANSLIT", "GBK", p.ForQuoteRef)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"ForQuoteLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ForQuoteLocalID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"InstallID", p.InstallID},
           {"InsertDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.InsertDate)},
           {"InsertTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.InsertTime)},
           {"ForQuoteStatus", std::string(1, p.ForQuoteStatus)},
           {"FrontID", p.FrontID},
           {"SessionID", p.SessionID},
           {"StatusMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.StatusMsg)},
           {"ActiveUserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActiveUserID)},
           {"BrokerForQutoSeq", p.BrokerForQutoSeq},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"reserve3", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve3)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"ExchangeInstID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeInstID)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
  };
}

void from_json(const json& j, CThostFtdcForQuoteField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("ForQuoteRef").get_ref<const std::string &>();
  std::strncpy(p.ForQuoteRef, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ForQuoteRef));
  auto &v4 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.UserID));
  auto &v5 = j.at("ForQuoteLocalID").get_ref<const std::string &>();
  std::strncpy(p.ForQuoteLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.ForQuoteLocalID));
  auto &v6 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v7 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v8 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.ClientID));
  auto &v9 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.reserve2));
  auto &v10 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.TraderID));
  j.at("InstallID").get_to(p.InstallID);
  auto &v12 = j.at("InsertDate").get_ref<const std::string &>();
  std::strncpy(p.InsertDate, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.InsertDate));
  auto &v13 = j.at("InsertTime").get_ref<const std::string &>();
  std::strncpy(p.InsertTime, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.InsertTime));
  auto &v14 = j.at("ForQuoteStatus").get_ref<const std::string &>();
  p.ForQuoteStatus = v14.at(0);
  j.at("FrontID").get_to(p.FrontID);
  j.at("SessionID").get_to(p.SessionID);
  auto &v17 = j.at("StatusMsg").get_ref<const std::string &>();
  std::strncpy(p.StatusMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.StatusMsg));
  auto &v18 = j.at("ActiveUserID").get_ref<const std::string &>();
  std::strncpy(p.ActiveUserID, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.ActiveUserID));
  j.at("BrokerForQutoSeq").get_to(p.BrokerForQutoSeq);
  auto &v20 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v20.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v21 = j.at("reserve3").get_ref<const std::string &>();
  std::strncpy(p.reserve3, codec_convert("GBK//TRANSLIT", "UTF-8", v21.c_str()).c_str(), sizeof(p.reserve3));
  auto &v22 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v23 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v24 = j.at("ExchangeInstID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeInstID, codec_convert("GBK//TRANSLIT", "UTF-8", v24.c_str()).c_str(), sizeof(p.ExchangeInstID));
  auto &v25 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v25.c_str()).c_str(), sizeof(p.IPAddress));

}



void to_json(json& j, const CThostFtdcQryForQuoteField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InsertTimeStart", codec_convert("UTF-8//TRANSLIT", "GBK", p.InsertTimeStart)},
           {"InsertTimeEnd", codec_convert("UTF-8//TRANSLIT", "GBK", p.InsertTimeEnd)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQryForQuoteField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v4 = j.at("InsertTimeStart").get_ref<const std::string &>();
  std::strncpy(p.InsertTimeStart, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.InsertTimeStart));
  auto &v5 = j.at("InsertTimeEnd").get_ref<const std::string &>();
  std::strncpy(p.InsertTimeEnd, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.InsertTimeEnd));
  auto &v6 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v7 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcExchangeForQuoteField& p) {
  j = json{
           {"ForQuoteLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ForQuoteLocalID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"InstallID", p.InstallID},
           {"InsertDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.InsertDate)},
           {"InsertTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.InsertTime)},
           {"ForQuoteStatus", std::string(1, p.ForQuoteStatus)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"ExchangeInstID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeInstID)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
  };
}

void from_json(const json& j, CThostFtdcExchangeForQuoteField& p) {
  auto &v0 = j.at("ForQuoteLocalID").get_ref<const std::string &>();
  std::strncpy(p.ForQuoteLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ForQuoteLocalID));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v2 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v3 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ClientID));
  auto &v4 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.reserve1));
  auto &v5 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.TraderID));
  j.at("InstallID").get_to(p.InstallID);
  auto &v7 = j.at("InsertDate").get_ref<const std::string &>();
  std::strncpy(p.InsertDate, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.InsertDate));
  auto &v8 = j.at("InsertTime").get_ref<const std::string &>();
  std::strncpy(p.InsertTime, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.InsertTime));
  auto &v9 = j.at("ForQuoteStatus").get_ref<const std::string &>();
  p.ForQuoteStatus = v9.at(0);
  auto &v10 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.reserve2));
  auto &v11 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v12 = j.at("ExchangeInstID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeInstID, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.ExchangeInstID));
  auto &v13 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.IPAddress));

}



void to_json(json& j, const CThostFtdcQryExchangeForQuoteField& p) {
  j = json{
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"ExchangeInstID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeInstID)},
  };
}

void from_json(const json& j, CThostFtdcQryExchangeForQuoteField& p) {
  auto &v0 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v1 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ClientID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v4 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.TraderID));
  auto &v5 = j.at("ExchangeInstID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeInstID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.ExchangeInstID));

}



void to_json(json& j, const CThostFtdcInputQuoteField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"QuoteRef", codec_convert("UTF-8//TRANSLIT", "GBK", p.QuoteRef)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"AskPrice", p.AskPrice},
           {"BidPrice", p.BidPrice},
           {"AskVolume", p.AskVolume},
           {"BidVolume", p.BidVolume},
           {"RequestID", p.RequestID},
           {"BusinessUnit", codec_convert("UTF-8//TRANSLIT", "GBK", p.BusinessUnit)},
           {"AskOffsetFlag", std::string(1, p.AskOffsetFlag)},
           {"BidOffsetFlag", std::string(1, p.BidOffsetFlag)},
           {"AskHedgeFlag", std::string(1, p.AskHedgeFlag)},
           {"BidHedgeFlag", std::string(1, p.BidHedgeFlag)},
           {"AskOrderRef", codec_convert("UTF-8//TRANSLIT", "GBK", p.AskOrderRef)},
           {"BidOrderRef", codec_convert("UTF-8//TRANSLIT", "GBK", p.BidOrderRef)},
           {"ForQuoteSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ForQuoteSysID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
           {"ReplaceSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ReplaceSysID)},
           {"TimeCondition", std::string(1, p.TimeCondition)},
           {"OrderMemo", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderMemo)},
           {"SessionReqSeq", p.SessionReqSeq},
  };
}

void from_json(const json& j, CThostFtdcInputQuoteField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("QuoteRef").get_ref<const std::string &>();
  std::strncpy(p.QuoteRef, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.QuoteRef));
  auto &v4 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.UserID));
  j.at("AskPrice").get_to(p.AskPrice);
  j.at("BidPrice").get_to(p.BidPrice);
  j.at("AskVolume").get_to(p.AskVolume);
  j.at("BidVolume").get_to(p.BidVolume);
  j.at("RequestID").get_to(p.RequestID);
  auto &v10 = j.at("BusinessUnit").get_ref<const std::string &>();
  std::strncpy(p.BusinessUnit, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.BusinessUnit));
  auto &v11 = j.at("AskOffsetFlag").get_ref<const std::string &>();
  p.AskOffsetFlag = v11.at(0);
  auto &v12 = j.at("BidOffsetFlag").get_ref<const std::string &>();
  p.BidOffsetFlag = v12.at(0);
  auto &v13 = j.at("AskHedgeFlag").get_ref<const std::string &>();
  p.AskHedgeFlag = v13.at(0);
  auto &v14 = j.at("BidHedgeFlag").get_ref<const std::string &>();
  p.BidHedgeFlag = v14.at(0);
  auto &v15 = j.at("AskOrderRef").get_ref<const std::string &>();
  std::strncpy(p.AskOrderRef, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.AskOrderRef));
  auto &v16 = j.at("BidOrderRef").get_ref<const std::string &>();
  std::strncpy(p.BidOrderRef, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.BidOrderRef));
  auto &v17 = j.at("ForQuoteSysID").get_ref<const std::string &>();
  std::strncpy(p.ForQuoteSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.ForQuoteSysID));
  auto &v18 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v19 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v20 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v20.c_str()).c_str(), sizeof(p.ClientID));
  auto &v21 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v21.c_str()).c_str(), sizeof(p.reserve2));
  auto &v22 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v23 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v24 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v24.c_str()).c_str(), sizeof(p.IPAddress));
  auto &v25 = j.at("ReplaceSysID").get_ref<const std::string &>();
  std::strncpy(p.ReplaceSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v25.c_str()).c_str(), sizeof(p.ReplaceSysID));
  auto &v26 = j.at("TimeCondition").get_ref<const std::string &>();
  p.TimeCondition = v26.at(0);
  auto &v27 = j.at("OrderMemo").get_ref<const std::string &>();
  std::strncpy(p.OrderMemo, codec_convert("GBK//TRANSLIT", "UTF-8", v27.c_str()).c_str(), sizeof(p.OrderMemo));
  j.at("SessionReqSeq").get_to(p.SessionReqSeq);

}



void to_json(json& j, const CThostFtdcInputQuoteActionField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"QuoteActionRef", p.QuoteActionRef},
           {"QuoteRef", codec_convert("UTF-8//TRANSLIT", "GBK", p.QuoteRef)},
           {"RequestID", p.RequestID},
           {"FrontID", p.FrontID},
           {"SessionID", p.SessionID},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"QuoteSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.QuoteSysID)},
           {"ActionFlag", std::string(1, p.ActionFlag)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
           {"OrderMemo", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderMemo)},
           {"SessionReqSeq", p.SessionReqSeq},
  };
}

void from_json(const json& j, CThostFtdcInputQuoteActionField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  j.at("QuoteActionRef").get_to(p.QuoteActionRef);
  auto &v3 = j.at("QuoteRef").get_ref<const std::string &>();
  std::strncpy(p.QuoteRef, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.QuoteRef));
  j.at("RequestID").get_to(p.RequestID);
  j.at("FrontID").get_to(p.FrontID);
  j.at("SessionID").get_to(p.SessionID);
  auto &v7 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v8 = j.at("QuoteSysID").get_ref<const std::string &>();
  std::strncpy(p.QuoteSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.QuoteSysID));
  auto &v9 = j.at("ActionFlag").get_ref<const std::string &>();
  p.ActionFlag = v9.at(0);
  auto &v10 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.UserID));
  auto &v11 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.reserve1));
  auto &v12 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v13 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.ClientID));
  auto &v14 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.reserve2));
  auto &v15 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v16 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v17 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.IPAddress));
  auto &v18 = j.at("OrderMemo").get_ref<const std::string &>();
  std::strncpy(p.OrderMemo, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.OrderMemo));
  j.at("SessionReqSeq").get_to(p.SessionReqSeq);

}



void to_json(json& j, const CThostFtdcQuoteField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"QuoteRef", codec_convert("UTF-8//TRANSLIT", "GBK", p.QuoteRef)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"AskPrice", p.AskPrice},
           {"BidPrice", p.BidPrice},
           {"AskVolume", p.AskVolume},
           {"BidVolume", p.BidVolume},
           {"RequestID", p.RequestID},
           {"BusinessUnit", codec_convert("UTF-8//TRANSLIT", "GBK", p.BusinessUnit)},
           {"AskOffsetFlag", std::string(1, p.AskOffsetFlag)},
           {"BidOffsetFlag", std::string(1, p.BidOffsetFlag)},
           {"AskHedgeFlag", std::string(1, p.AskHedgeFlag)},
           {"BidHedgeFlag", std::string(1, p.BidHedgeFlag)},
           {"QuoteLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.QuoteLocalID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"InstallID", p.InstallID},
           {"NotifySequence", p.NotifySequence},
           {"OrderSubmitStatus", std::string(1, p.OrderSubmitStatus)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"SettlementID", p.SettlementID},
           {"QuoteSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.QuoteSysID)},
           {"InsertDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.InsertDate)},
           {"InsertTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.InsertTime)},
           {"CancelTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.CancelTime)},
           {"QuoteStatus", std::string(1, p.QuoteStatus)},
           {"ClearingPartID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClearingPartID)},
           {"SequenceNo", p.SequenceNo},
           {"AskOrderSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AskOrderSysID)},
           {"BidOrderSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BidOrderSysID)},
           {"FrontID", p.FrontID},
           {"SessionID", p.SessionID},
           {"UserProductInfo", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserProductInfo)},
           {"StatusMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.StatusMsg)},
           {"ActiveUserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActiveUserID)},
           {"BrokerQuoteSeq", p.BrokerQuoteSeq},
           {"AskOrderRef", codec_convert("UTF-8//TRANSLIT", "GBK", p.AskOrderRef)},
           {"BidOrderRef", codec_convert("UTF-8//TRANSLIT", "GBK", p.BidOrderRef)},
           {"ForQuoteSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ForQuoteSysID)},
           {"BranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BranchID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"reserve3", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve3)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"ExchangeInstID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeInstID)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
           {"ReplaceSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ReplaceSysID)},
           {"TimeCondition", std::string(1, p.TimeCondition)},
           {"OrderMemo", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderMemo)},
           {"SessionReqSeq", p.SessionReqSeq},
  };
}

void from_json(const json& j, CThostFtdcQuoteField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("QuoteRef").get_ref<const std::string &>();
  std::strncpy(p.QuoteRef, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.QuoteRef));
  auto &v4 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.UserID));
  j.at("AskPrice").get_to(p.AskPrice);
  j.at("BidPrice").get_to(p.BidPrice);
  j.at("AskVolume").get_to(p.AskVolume);
  j.at("BidVolume").get_to(p.BidVolume);
  j.at("RequestID").get_to(p.RequestID);
  auto &v10 = j.at("BusinessUnit").get_ref<const std::string &>();
  std::strncpy(p.BusinessUnit, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.BusinessUnit));
  auto &v11 = j.at("AskOffsetFlag").get_ref<const std::string &>();
  p.AskOffsetFlag = v11.at(0);
  auto &v12 = j.at("BidOffsetFlag").get_ref<const std::string &>();
  p.BidOffsetFlag = v12.at(0);
  auto &v13 = j.at("AskHedgeFlag").get_ref<const std::string &>();
  p.AskHedgeFlag = v13.at(0);
  auto &v14 = j.at("BidHedgeFlag").get_ref<const std::string &>();
  p.BidHedgeFlag = v14.at(0);
  auto &v15 = j.at("QuoteLocalID").get_ref<const std::string &>();
  std::strncpy(p.QuoteLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.QuoteLocalID));
  auto &v16 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v17 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v18 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.ClientID));
  auto &v19 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.reserve2));
  auto &v20 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v20.c_str()).c_str(), sizeof(p.TraderID));
  j.at("InstallID").get_to(p.InstallID);
  j.at("NotifySequence").get_to(p.NotifySequence);
  auto &v23 = j.at("OrderSubmitStatus").get_ref<const std::string &>();
  p.OrderSubmitStatus = v23.at(0);
  auto &v24 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v24.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("SettlementID").get_to(p.SettlementID);
  auto &v26 = j.at("QuoteSysID").get_ref<const std::string &>();
  std::strncpy(p.QuoteSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v26.c_str()).c_str(), sizeof(p.QuoteSysID));
  auto &v27 = j.at("InsertDate").get_ref<const std::string &>();
  std::strncpy(p.InsertDate, codec_convert("GBK//TRANSLIT", "UTF-8", v27.c_str()).c_str(), sizeof(p.InsertDate));
  auto &v28 = j.at("InsertTime").get_ref<const std::string &>();
  std::strncpy(p.InsertTime, codec_convert("GBK//TRANSLIT", "UTF-8", v28.c_str()).c_str(), sizeof(p.InsertTime));
  auto &v29 = j.at("CancelTime").get_ref<const std::string &>();
  std::strncpy(p.CancelTime, codec_convert("GBK//TRANSLIT", "UTF-8", v29.c_str()).c_str(), sizeof(p.CancelTime));
  auto &v30 = j.at("QuoteStatus").get_ref<const std::string &>();
  p.QuoteStatus = v30.at(0);
  auto &v31 = j.at("ClearingPartID").get_ref<const std::string &>();
  std::strncpy(p.ClearingPartID, codec_convert("GBK//TRANSLIT", "UTF-8", v31.c_str()).c_str(), sizeof(p.ClearingPartID));
  j.at("SequenceNo").get_to(p.SequenceNo);
  auto &v33 = j.at("AskOrderSysID").get_ref<const std::string &>();
  std::strncpy(p.AskOrderSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v33.c_str()).c_str(), sizeof(p.AskOrderSysID));
  auto &v34 = j.at("BidOrderSysID").get_ref<const std::string &>();
  std::strncpy(p.BidOrderSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v34.c_str()).c_str(), sizeof(p.BidOrderSysID));
  j.at("FrontID").get_to(p.FrontID);
  j.at("SessionID").get_to(p.SessionID);
  auto &v37 = j.at("UserProductInfo").get_ref<const std::string &>();
  std::strncpy(p.UserProductInfo, codec_convert("GBK//TRANSLIT", "UTF-8", v37.c_str()).c_str(), sizeof(p.UserProductInfo));
  auto &v38 = j.at("StatusMsg").get_ref<const std::string &>();
  std::strncpy(p.StatusMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v38.c_str()).c_str(), sizeof(p.StatusMsg));
  auto &v39 = j.at("ActiveUserID").get_ref<const std::string &>();
  std::strncpy(p.ActiveUserID, codec_convert("GBK//TRANSLIT", "UTF-8", v39.c_str()).c_str(), sizeof(p.ActiveUserID));
  j.at("BrokerQuoteSeq").get_to(p.BrokerQuoteSeq);
  auto &v41 = j.at("AskOrderRef").get_ref<const std::string &>();
  std::strncpy(p.AskOrderRef, codec_convert("GBK//TRANSLIT", "UTF-8", v41.c_str()).c_str(), sizeof(p.AskOrderRef));
  auto &v42 = j.at("BidOrderRef").get_ref<const std::string &>();
  std::strncpy(p.BidOrderRef, codec_convert("GBK//TRANSLIT", "UTF-8", v42.c_str()).c_str(), sizeof(p.BidOrderRef));
  auto &v43 = j.at("ForQuoteSysID").get_ref<const std::string &>();
  std::strncpy(p.ForQuoteSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v43.c_str()).c_str(), sizeof(p.ForQuoteSysID));
  auto &v44 = j.at("BranchID").get_ref<const std::string &>();
  std::strncpy(p.BranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v44.c_str()).c_str(), sizeof(p.BranchID));
  auto &v45 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v45.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v46 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v46.c_str()).c_str(), sizeof(p.AccountID));
  auto &v47 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v47.c_str()).c_str(), sizeof(p.CurrencyID));
  auto &v48 = j.at("reserve3").get_ref<const std::string &>();
  std::strncpy(p.reserve3, codec_convert("GBK//TRANSLIT", "UTF-8", v48.c_str()).c_str(), sizeof(p.reserve3));
  auto &v49 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v49.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v50 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v50.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v51 = j.at("ExchangeInstID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeInstID, codec_convert("GBK//TRANSLIT", "UTF-8", v51.c_str()).c_str(), sizeof(p.ExchangeInstID));
  auto &v52 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v52.c_str()).c_str(), sizeof(p.IPAddress));
  auto &v53 = j.at("ReplaceSysID").get_ref<const std::string &>();
  std::strncpy(p.ReplaceSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v53.c_str()).c_str(), sizeof(p.ReplaceSysID));
  auto &v54 = j.at("TimeCondition").get_ref<const std::string &>();
  p.TimeCondition = v54.at(0);
  auto &v55 = j.at("OrderMemo").get_ref<const std::string &>();
  std::strncpy(p.OrderMemo, codec_convert("GBK//TRANSLIT", "UTF-8", v55.c_str()).c_str(), sizeof(p.OrderMemo));
  j.at("SessionReqSeq").get_to(p.SessionReqSeq);

}



void to_json(json& j, const CThostFtdcQuoteActionField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"QuoteActionRef", p.QuoteActionRef},
           {"QuoteRef", codec_convert("UTF-8//TRANSLIT", "GBK", p.QuoteRef)},
           {"RequestID", p.RequestID},
           {"FrontID", p.FrontID},
           {"SessionID", p.SessionID},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"QuoteSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.QuoteSysID)},
           {"ActionFlag", std::string(1, p.ActionFlag)},
           {"ActionDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionDate)},
           {"ActionTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionTime)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"InstallID", p.InstallID},
           {"QuoteLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.QuoteLocalID)},
           {"ActionLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionLocalID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"BusinessUnit", codec_convert("UTF-8//TRANSLIT", "GBK", p.BusinessUnit)},
           {"OrderActionStatus", std::string(1, p.OrderActionStatus)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"StatusMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.StatusMsg)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"BranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BranchID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
           {"OrderMemo", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderMemo)},
           {"SessionReqSeq", p.SessionReqSeq},
  };
}

void from_json(const json& j, CThostFtdcQuoteActionField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  j.at("QuoteActionRef").get_to(p.QuoteActionRef);
  auto &v3 = j.at("QuoteRef").get_ref<const std::string &>();
  std::strncpy(p.QuoteRef, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.QuoteRef));
  j.at("RequestID").get_to(p.RequestID);
  j.at("FrontID").get_to(p.FrontID);
  j.at("SessionID").get_to(p.SessionID);
  auto &v7 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v8 = j.at("QuoteSysID").get_ref<const std::string &>();
  std::strncpy(p.QuoteSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.QuoteSysID));
  auto &v9 = j.at("ActionFlag").get_ref<const std::string &>();
  p.ActionFlag = v9.at(0);
  auto &v10 = j.at("ActionDate").get_ref<const std::string &>();
  std::strncpy(p.ActionDate, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.ActionDate));
  auto &v11 = j.at("ActionTime").get_ref<const std::string &>();
  std::strncpy(p.ActionTime, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.ActionTime));
  auto &v12 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.TraderID));
  j.at("InstallID").get_to(p.InstallID);
  auto &v14 = j.at("QuoteLocalID").get_ref<const std::string &>();
  std::strncpy(p.QuoteLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.QuoteLocalID));
  auto &v15 = j.at("ActionLocalID").get_ref<const std::string &>();
  std::strncpy(p.ActionLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.ActionLocalID));
  auto &v16 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v17 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.ClientID));
  auto &v18 = j.at("BusinessUnit").get_ref<const std::string &>();
  std::strncpy(p.BusinessUnit, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.BusinessUnit));
  auto &v19 = j.at("OrderActionStatus").get_ref<const std::string &>();
  p.OrderActionStatus = v19.at(0);
  auto &v20 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v20.c_str()).c_str(), sizeof(p.UserID));
  auto &v21 = j.at("StatusMsg").get_ref<const std::string &>();
  std::strncpy(p.StatusMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v21.c_str()).c_str(), sizeof(p.StatusMsg));
  auto &v22 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.reserve1));
  auto &v23 = j.at("BranchID").get_ref<const std::string &>();
  std::strncpy(p.BranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.BranchID));
  auto &v24 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v24.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v25 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v25.c_str()).c_str(), sizeof(p.reserve2));
  auto &v26 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v26.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v27 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v27.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v28 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v28.c_str()).c_str(), sizeof(p.IPAddress));
  auto &v29 = j.at("OrderMemo").get_ref<const std::string &>();
  std::strncpy(p.OrderMemo, codec_convert("GBK//TRANSLIT", "UTF-8", v29.c_str()).c_str(), sizeof(p.OrderMemo));
  j.at("SessionReqSeq").get_to(p.SessionReqSeq);

}



void to_json(json& j, const CThostFtdcQryQuoteField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"QuoteSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.QuoteSysID)},
           {"InsertTimeStart", codec_convert("UTF-8//TRANSLIT", "GBK", p.InsertTimeStart)},
           {"InsertTimeEnd", codec_convert("UTF-8//TRANSLIT", "GBK", p.InsertTimeEnd)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQryQuoteField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v4 = j.at("QuoteSysID").get_ref<const std::string &>();
  std::strncpy(p.QuoteSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.QuoteSysID));
  auto &v5 = j.at("InsertTimeStart").get_ref<const std::string &>();
  std::strncpy(p.InsertTimeStart, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.InsertTimeStart));
  auto &v6 = j.at("InsertTimeEnd").get_ref<const std::string &>();
  std::strncpy(p.InsertTimeEnd, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.InsertTimeEnd));
  auto &v7 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v8 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcExchangeQuoteField& p) {
  j = json{
           {"AskPrice", p.AskPrice},
           {"BidPrice", p.BidPrice},
           {"AskVolume", p.AskVolume},
           {"BidVolume", p.BidVolume},
           {"RequestID", p.RequestID},
           {"BusinessUnit", codec_convert("UTF-8//TRANSLIT", "GBK", p.BusinessUnit)},
           {"AskOffsetFlag", std::string(1, p.AskOffsetFlag)},
           {"BidOffsetFlag", std::string(1, p.BidOffsetFlag)},
           {"AskHedgeFlag", std::string(1, p.AskHedgeFlag)},
           {"BidHedgeFlag", std::string(1, p.BidHedgeFlag)},
           {"QuoteLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.QuoteLocalID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"InstallID", p.InstallID},
           {"NotifySequence", p.NotifySequence},
           {"OrderSubmitStatus", std::string(1, p.OrderSubmitStatus)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"SettlementID", p.SettlementID},
           {"QuoteSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.QuoteSysID)},
           {"InsertDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.InsertDate)},
           {"InsertTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.InsertTime)},
           {"CancelTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.CancelTime)},
           {"QuoteStatus", std::string(1, p.QuoteStatus)},
           {"ClearingPartID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClearingPartID)},
           {"SequenceNo", p.SequenceNo},
           {"AskOrderSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AskOrderSysID)},
           {"BidOrderSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BidOrderSysID)},
           {"ForQuoteSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ForQuoteSysID)},
           {"BranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BranchID)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"ExchangeInstID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeInstID)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
           {"TimeCondition", std::string(1, p.TimeCondition)},
  };
}

void from_json(const json& j, CThostFtdcExchangeQuoteField& p) {
  j.at("AskPrice").get_to(p.AskPrice);
  j.at("BidPrice").get_to(p.BidPrice);
  j.at("AskVolume").get_to(p.AskVolume);
  j.at("BidVolume").get_to(p.BidVolume);
  j.at("RequestID").get_to(p.RequestID);
  auto &v5 = j.at("BusinessUnit").get_ref<const std::string &>();
  std::strncpy(p.BusinessUnit, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.BusinessUnit));
  auto &v6 = j.at("AskOffsetFlag").get_ref<const std::string &>();
  p.AskOffsetFlag = v6.at(0);
  auto &v7 = j.at("BidOffsetFlag").get_ref<const std::string &>();
  p.BidOffsetFlag = v7.at(0);
  auto &v8 = j.at("AskHedgeFlag").get_ref<const std::string &>();
  p.AskHedgeFlag = v8.at(0);
  auto &v9 = j.at("BidHedgeFlag").get_ref<const std::string &>();
  p.BidHedgeFlag = v9.at(0);
  auto &v10 = j.at("QuoteLocalID").get_ref<const std::string &>();
  std::strncpy(p.QuoteLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.QuoteLocalID));
  auto &v11 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v12 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v13 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.ClientID));
  auto &v14 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.reserve1));
  auto &v15 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.TraderID));
  j.at("InstallID").get_to(p.InstallID);
  j.at("NotifySequence").get_to(p.NotifySequence);
  auto &v18 = j.at("OrderSubmitStatus").get_ref<const std::string &>();
  p.OrderSubmitStatus = v18.at(0);
  auto &v19 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("SettlementID").get_to(p.SettlementID);
  auto &v21 = j.at("QuoteSysID").get_ref<const std::string &>();
  std::strncpy(p.QuoteSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v21.c_str()).c_str(), sizeof(p.QuoteSysID));
  auto &v22 = j.at("InsertDate").get_ref<const std::string &>();
  std::strncpy(p.InsertDate, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.InsertDate));
  auto &v23 = j.at("InsertTime").get_ref<const std::string &>();
  std::strncpy(p.InsertTime, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.InsertTime));
  auto &v24 = j.at("CancelTime").get_ref<const std::string &>();
  std::strncpy(p.CancelTime, codec_convert("GBK//TRANSLIT", "UTF-8", v24.c_str()).c_str(), sizeof(p.CancelTime));
  auto &v25 = j.at("QuoteStatus").get_ref<const std::string &>();
  p.QuoteStatus = v25.at(0);
  auto &v26 = j.at("ClearingPartID").get_ref<const std::string &>();
  std::strncpy(p.ClearingPartID, codec_convert("GBK//TRANSLIT", "UTF-8", v26.c_str()).c_str(), sizeof(p.ClearingPartID));
  j.at("SequenceNo").get_to(p.SequenceNo);
  auto &v28 = j.at("AskOrderSysID").get_ref<const std::string &>();
  std::strncpy(p.AskOrderSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v28.c_str()).c_str(), sizeof(p.AskOrderSysID));
  auto &v29 = j.at("BidOrderSysID").get_ref<const std::string &>();
  std::strncpy(p.BidOrderSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v29.c_str()).c_str(), sizeof(p.BidOrderSysID));
  auto &v30 = j.at("ForQuoteSysID").get_ref<const std::string &>();
  std::strncpy(p.ForQuoteSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v30.c_str()).c_str(), sizeof(p.ForQuoteSysID));
  auto &v31 = j.at("BranchID").get_ref<const std::string &>();
  std::strncpy(p.BranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v31.c_str()).c_str(), sizeof(p.BranchID));
  auto &v32 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v32.c_str()).c_str(), sizeof(p.reserve2));
  auto &v33 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v33.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v34 = j.at("ExchangeInstID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeInstID, codec_convert("GBK//TRANSLIT", "UTF-8", v34.c_str()).c_str(), sizeof(p.ExchangeInstID));
  auto &v35 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v35.c_str()).c_str(), sizeof(p.IPAddress));
  auto &v36 = j.at("TimeCondition").get_ref<const std::string &>();
  p.TimeCondition = v36.at(0);

}



void to_json(json& j, const CThostFtdcQryExchangeQuoteField& p) {
  j = json{
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"ExchangeInstID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeInstID)},
  };
}

void from_json(const json& j, CThostFtdcQryExchangeQuoteField& p) {
  auto &v0 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v1 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ClientID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v4 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.TraderID));
  auto &v5 = j.at("ExchangeInstID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeInstID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.ExchangeInstID));

}



void to_json(json& j, const CThostFtdcQryQuoteActionField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
  };
}

void from_json(const json& j, CThostFtdcQryQuoteActionField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ExchangeID));

}



void to_json(json& j, const CThostFtdcExchangeQuoteActionField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"QuoteSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.QuoteSysID)},
           {"ActionFlag", std::string(1, p.ActionFlag)},
           {"ActionDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionDate)},
           {"ActionTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionTime)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"InstallID", p.InstallID},
           {"QuoteLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.QuoteLocalID)},
           {"ActionLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionLocalID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"BusinessUnit", codec_convert("UTF-8//TRANSLIT", "GBK", p.BusinessUnit)},
           {"OrderActionStatus", std::string(1, p.OrderActionStatus)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
  };
}

void from_json(const json& j, CThostFtdcExchangeQuoteActionField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("QuoteSysID").get_ref<const std::string &>();
  std::strncpy(p.QuoteSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.QuoteSysID));
  auto &v2 = j.at("ActionFlag").get_ref<const std::string &>();
  p.ActionFlag = v2.at(0);
  auto &v3 = j.at("ActionDate").get_ref<const std::string &>();
  std::strncpy(p.ActionDate, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ActionDate));
  auto &v4 = j.at("ActionTime").get_ref<const std::string &>();
  std::strncpy(p.ActionTime, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.ActionTime));
  auto &v5 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.TraderID));
  j.at("InstallID").get_to(p.InstallID);
  auto &v7 = j.at("QuoteLocalID").get_ref<const std::string &>();
  std::strncpy(p.QuoteLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.QuoteLocalID));
  auto &v8 = j.at("ActionLocalID").get_ref<const std::string &>();
  std::strncpy(p.ActionLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.ActionLocalID));
  auto &v9 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v10 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.ClientID));
  auto &v11 = j.at("BusinessUnit").get_ref<const std::string &>();
  std::strncpy(p.BusinessUnit, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.BusinessUnit));
  auto &v12 = j.at("OrderActionStatus").get_ref<const std::string &>();
  p.OrderActionStatus = v12.at(0);
  auto &v13 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.UserID));
  auto &v14 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.reserve1));
  auto &v15 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v16 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.IPAddress));

}



void to_json(json& j, const CThostFtdcQryExchangeQuoteActionField& p) {
  j = json{
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
  };
}

void from_json(const json& j, CThostFtdcQryExchangeQuoteActionField& p) {
  auto &v0 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v1 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ClientID));
  auto &v2 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v3 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.TraderID));

}



void to_json(json& j, const CThostFtdcOptionInstrDeltaField& p) {
  j = json{
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"InvestorRange", std::string(1, p.InvestorRange)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"Delta", p.Delta},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcOptionInstrDeltaField& p) {
  auto &v0 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.reserve1));
  auto &v1 = j.at("InvestorRange").get_ref<const std::string &>();
  p.InvestorRange = v1.at(0);
  auto &v2 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v3 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InvestorID));
  j.at("Delta").get_to(p.Delta);
  auto &v5 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcForQuoteRspField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ForQuoteSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ForQuoteSysID)},
           {"ForQuoteTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.ForQuoteTime)},
           {"ActionDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionDay)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcForQuoteRspField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.reserve1));
  auto &v2 = j.at("ForQuoteSysID").get_ref<const std::string &>();
  std::strncpy(p.ForQuoteSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ForQuoteSysID));
  auto &v3 = j.at("ForQuoteTime").get_ref<const std::string &>();
  std::strncpy(p.ForQuoteTime, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ForQuoteTime));
  auto &v4 = j.at("ActionDay").get_ref<const std::string &>();
  std::strncpy(p.ActionDay, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.ActionDay));
  auto &v5 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v6 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcStrikeOffsetField& p) {
  j = json{
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"InvestorRange", std::string(1, p.InvestorRange)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"Offset", p.Offset},
           {"OffsetType", std::string(1, p.OffsetType)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcStrikeOffsetField& p) {
  auto &v0 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.reserve1));
  auto &v1 = j.at("InvestorRange").get_ref<const std::string &>();
  p.InvestorRange = v1.at(0);
  auto &v2 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v3 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InvestorID));
  j.at("Offset").get_to(p.Offset);
  auto &v5 = j.at("OffsetType").get_ref<const std::string &>();
  p.OffsetType = v5.at(0);
  auto &v6 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcQryStrikeOffsetField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQryStrikeOffsetField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcInputBatchOrderActionField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"OrderActionRef", p.OrderActionRef},
           {"RequestID", p.RequestID},
           {"FrontID", p.FrontID},
           {"SessionID", p.SessionID},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
  };
}

void from_json(const json& j, CThostFtdcInputBatchOrderActionField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  j.at("OrderActionRef").get_to(p.OrderActionRef);
  j.at("RequestID").get_to(p.RequestID);
  j.at("FrontID").get_to(p.FrontID);
  j.at("SessionID").get_to(p.SessionID);
  auto &v6 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v7 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.UserID));
  auto &v8 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v9 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.reserve1));
  auto &v10 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v11 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.IPAddress));

}



void to_json(json& j, const CThostFtdcBatchOrderActionField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"OrderActionRef", p.OrderActionRef},
           {"RequestID", p.RequestID},
           {"FrontID", p.FrontID},
           {"SessionID", p.SessionID},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ActionDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionDate)},
           {"ActionTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionTime)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"InstallID", p.InstallID},
           {"ActionLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionLocalID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"BusinessUnit", codec_convert("UTF-8//TRANSLIT", "GBK", p.BusinessUnit)},
           {"OrderActionStatus", std::string(1, p.OrderActionStatus)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"StatusMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.StatusMsg)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
  };
}

void from_json(const json& j, CThostFtdcBatchOrderActionField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  j.at("OrderActionRef").get_to(p.OrderActionRef);
  j.at("RequestID").get_to(p.RequestID);
  j.at("FrontID").get_to(p.FrontID);
  j.at("SessionID").get_to(p.SessionID);
  auto &v6 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v7 = j.at("ActionDate").get_ref<const std::string &>();
  std::strncpy(p.ActionDate, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.ActionDate));
  auto &v8 = j.at("ActionTime").get_ref<const std::string &>();
  std::strncpy(p.ActionTime, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.ActionTime));
  auto &v9 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.TraderID));
  j.at("InstallID").get_to(p.InstallID);
  auto &v11 = j.at("ActionLocalID").get_ref<const std::string &>();
  std::strncpy(p.ActionLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.ActionLocalID));
  auto &v12 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v13 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.ClientID));
  auto &v14 = j.at("BusinessUnit").get_ref<const std::string &>();
  std::strncpy(p.BusinessUnit, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.BusinessUnit));
  auto &v15 = j.at("OrderActionStatus").get_ref<const std::string &>();
  p.OrderActionStatus = v15.at(0);
  auto &v16 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.UserID));
  auto &v17 = j.at("StatusMsg").get_ref<const std::string &>();
  std::strncpy(p.StatusMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.StatusMsg));
  auto &v18 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v19 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.reserve1));
  auto &v20 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v20.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v21 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v21.c_str()).c_str(), sizeof(p.IPAddress));

}



void to_json(json& j, const CThostFtdcExchangeBatchOrderActionField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ActionDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionDate)},
           {"ActionTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionTime)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"InstallID", p.InstallID},
           {"ActionLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionLocalID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"BusinessUnit", codec_convert("UTF-8//TRANSLIT", "GBK", p.BusinessUnit)},
           {"OrderActionStatus", std::string(1, p.OrderActionStatus)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
  };
}

void from_json(const json& j, CThostFtdcExchangeBatchOrderActionField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("ActionDate").get_ref<const std::string &>();
  std::strncpy(p.ActionDate, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ActionDate));
  auto &v2 = j.at("ActionTime").get_ref<const std::string &>();
  std::strncpy(p.ActionTime, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ActionTime));
  auto &v3 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.TraderID));
  j.at("InstallID").get_to(p.InstallID);
  auto &v5 = j.at("ActionLocalID").get_ref<const std::string &>();
  std::strncpy(p.ActionLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.ActionLocalID));
  auto &v6 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v7 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.ClientID));
  auto &v8 = j.at("BusinessUnit").get_ref<const std::string &>();
  std::strncpy(p.BusinessUnit, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.BusinessUnit));
  auto &v9 = j.at("OrderActionStatus").get_ref<const std::string &>();
  p.OrderActionStatus = v9.at(0);
  auto &v10 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.UserID));
  auto &v11 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.reserve1));
  auto &v12 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v13 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.IPAddress));

}



void to_json(json& j, const CThostFtdcQryBatchOrderActionField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
  };
}

void from_json(const json& j, CThostFtdcQryBatchOrderActionField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ExchangeID));

}



void to_json(json& j, const CThostFtdcCombInstrumentGuardField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"GuarantRatio", p.GuarantRatio},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
  };
}

void from_json(const json& j, CThostFtdcCombInstrumentGuardField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.reserve1));
  j.at("GuarantRatio").get_to(p.GuarantRatio);
  auto &v3 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ExchangeID));

}



void to_json(json& j, const CThostFtdcQryCombInstrumentGuardField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQryCombInstrumentGuardField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.reserve1));
  auto &v2 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v3 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcInputCombActionField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"CombActionRef", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombActionRef)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"Direction", std::string(1, p.Direction)},
           {"Volume", p.Volume},
           {"CombDirection", std::string(1, p.CombDirection)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"FrontID", p.FrontID},
           {"SessionID", p.SessionID},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
  };
}

void from_json(const json& j, CThostFtdcInputCombActionField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("CombActionRef").get_ref<const std::string &>();
  std::strncpy(p.CombActionRef, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.CombActionRef));
  auto &v4 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.UserID));
  auto &v5 = j.at("Direction").get_ref<const std::string &>();
  p.Direction = v5.at(0);
  j.at("Volume").get_to(p.Volume);
  auto &v7 = j.at("CombDirection").get_ref<const std::string &>();
  p.CombDirection = v7.at(0);
  auto &v8 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v8.at(0);
  auto &v9 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v10 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.reserve2));
  auto &v11 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v12 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.InvestUnitID));
  j.at("FrontID").get_to(p.FrontID);
  j.at("SessionID").get_to(p.SessionID);
  auto &v15 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v16 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.IPAddress));

}



void to_json(json& j, const CThostFtdcCombActionField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"CombActionRef", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombActionRef)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"Direction", std::string(1, p.Direction)},
           {"Volume", p.Volume},
           {"CombDirection", std::string(1, p.CombDirection)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"ActionLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionLocalID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"InstallID", p.InstallID},
           {"ActionStatus", std::string(1, p.ActionStatus)},
           {"NotifySequence", p.NotifySequence},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"SettlementID", p.SettlementID},
           {"SequenceNo", p.SequenceNo},
           {"FrontID", p.FrontID},
           {"SessionID", p.SessionID},
           {"UserProductInfo", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserProductInfo)},
           {"StatusMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.StatusMsg)},
           {"reserve3", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve3)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"ComTradeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ComTradeID)},
           {"BranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BranchID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"ExchangeInstID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeInstID)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
  };
}

void from_json(const json& j, CThostFtdcCombActionField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("CombActionRef").get_ref<const std::string &>();
  std::strncpy(p.CombActionRef, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.CombActionRef));
  auto &v4 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.UserID));
  auto &v5 = j.at("Direction").get_ref<const std::string &>();
  p.Direction = v5.at(0);
  j.at("Volume").get_to(p.Volume);
  auto &v7 = j.at("CombDirection").get_ref<const std::string &>();
  p.CombDirection = v7.at(0);
  auto &v8 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v8.at(0);
  auto &v9 = j.at("ActionLocalID").get_ref<const std::string &>();
  std::strncpy(p.ActionLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.ActionLocalID));
  auto &v10 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v11 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v12 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.ClientID));
  auto &v13 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.reserve2));
  auto &v14 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.TraderID));
  j.at("InstallID").get_to(p.InstallID);
  auto &v16 = j.at("ActionStatus").get_ref<const std::string &>();
  p.ActionStatus = v16.at(0);
  j.at("NotifySequence").get_to(p.NotifySequence);
  auto &v18 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("SettlementID").get_to(p.SettlementID);
  j.at("SequenceNo").get_to(p.SequenceNo);
  j.at("FrontID").get_to(p.FrontID);
  j.at("SessionID").get_to(p.SessionID);
  auto &v23 = j.at("UserProductInfo").get_ref<const std::string &>();
  std::strncpy(p.UserProductInfo, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.UserProductInfo));
  auto &v24 = j.at("StatusMsg").get_ref<const std::string &>();
  std::strncpy(p.StatusMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v24.c_str()).c_str(), sizeof(p.StatusMsg));
  auto &v25 = j.at("reserve3").get_ref<const std::string &>();
  std::strncpy(p.reserve3, codec_convert("GBK//TRANSLIT", "UTF-8", v25.c_str()).c_str(), sizeof(p.reserve3));
  auto &v26 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v26.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v27 = j.at("ComTradeID").get_ref<const std::string &>();
  std::strncpy(p.ComTradeID, codec_convert("GBK//TRANSLIT", "UTF-8", v27.c_str()).c_str(), sizeof(p.ComTradeID));
  auto &v28 = j.at("BranchID").get_ref<const std::string &>();
  std::strncpy(p.BranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v28.c_str()).c_str(), sizeof(p.BranchID));
  auto &v29 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v29.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v30 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v30.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v31 = j.at("ExchangeInstID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeInstID, codec_convert("GBK//TRANSLIT", "UTF-8", v31.c_str()).c_str(), sizeof(p.ExchangeInstID));
  auto &v32 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v32.c_str()).c_str(), sizeof(p.IPAddress));

}



void to_json(json& j, const CThostFtdcQryCombActionField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQryCombActionField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v4 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v5 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcExchangeCombActionField& p) {
  j = json{
           {"Direction", std::string(1, p.Direction)},
           {"Volume", p.Volume},
           {"CombDirection", std::string(1, p.CombDirection)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"ActionLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionLocalID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"InstallID", p.InstallID},
           {"ActionStatus", std::string(1, p.ActionStatus)},
           {"NotifySequence", p.NotifySequence},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"SettlementID", p.SettlementID},
           {"SequenceNo", p.SequenceNo},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"ComTradeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ComTradeID)},
           {"BranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BranchID)},
           {"ExchangeInstID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeInstID)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
  };
}

void from_json(const json& j, CThostFtdcExchangeCombActionField& p) {
  auto &v0 = j.at("Direction").get_ref<const std::string &>();
  p.Direction = v0.at(0);
  j.at("Volume").get_to(p.Volume);
  auto &v2 = j.at("CombDirection").get_ref<const std::string &>();
  p.CombDirection = v2.at(0);
  auto &v3 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v3.at(0);
  auto &v4 = j.at("ActionLocalID").get_ref<const std::string &>();
  std::strncpy(p.ActionLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.ActionLocalID));
  auto &v5 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v6 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v7 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.ClientID));
  auto &v8 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.reserve1));
  auto &v9 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.TraderID));
  j.at("InstallID").get_to(p.InstallID);
  auto &v11 = j.at("ActionStatus").get_ref<const std::string &>();
  p.ActionStatus = v11.at(0);
  j.at("NotifySequence").get_to(p.NotifySequence);
  auto &v13 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("SettlementID").get_to(p.SettlementID);
  j.at("SequenceNo").get_to(p.SequenceNo);
  auto &v16 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.reserve2));
  auto &v17 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v18 = j.at("ComTradeID").get_ref<const std::string &>();
  std::strncpy(p.ComTradeID, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.ComTradeID));
  auto &v19 = j.at("BranchID").get_ref<const std::string &>();
  std::strncpy(p.BranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.BranchID));
  auto &v20 = j.at("ExchangeInstID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeInstID, codec_convert("GBK//TRANSLIT", "UTF-8", v20.c_str()).c_str(), sizeof(p.ExchangeInstID));
  auto &v21 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v21.c_str()).c_str(), sizeof(p.IPAddress));

}



void to_json(json& j, const CThostFtdcQryExchangeCombActionField& p) {
  j = json{
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"ExchangeInstID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeInstID)},
  };
}

void from_json(const json& j, CThostFtdcQryExchangeCombActionField& p) {
  auto &v0 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v1 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ClientID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v4 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.TraderID));
  auto &v5 = j.at("ExchangeInstID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeInstID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.ExchangeInstID));

}



void to_json(json& j, const CThostFtdcProductExchRateField& p) {
  j = json{
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"QuoteCurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.QuoteCurrencyID)},
           {"ExchangeRate", p.ExchangeRate},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductID)},
  };
}

void from_json(const json& j, CThostFtdcProductExchRateField& p) {
  auto &v0 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.reserve1));
  auto &v1 = j.at("QuoteCurrencyID").get_ref<const std::string &>();
  std::strncpy(p.QuoteCurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.QuoteCurrencyID));
  j.at("ExchangeRate").get_to(p.ExchangeRate);
  auto &v3 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v4 = j.at("ProductID").get_ref<const std::string &>();
  std::strncpy(p.ProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.ProductID));

}



void to_json(json& j, const CThostFtdcQryProductExchRateField& p) {
  j = json{
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductID)},
  };
}

void from_json(const json& j, CThostFtdcQryProductExchRateField& p) {
  auto &v0 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.reserve1));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v2 = j.at("ProductID").get_ref<const std::string &>();
  std::strncpy(p.ProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ProductID));

}



void to_json(json& j, const CThostFtdcQryForQuoteParamField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQryForQuoteParamField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.reserve1));
  auto &v2 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v3 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcForQuoteParamField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"LastPrice", p.LastPrice},
           {"PriceInterval", p.PriceInterval},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcForQuoteParamField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.reserve1));
  auto &v2 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ExchangeID));
  j.at("LastPrice").get_to(p.LastPrice);
  j.at("PriceInterval").get_to(p.PriceInterval);
  auto &v5 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcMMOptionInstrCommRateField& p) {
  j = json{
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"InvestorRange", std::string(1, p.InvestorRange)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"OpenRatioByMoney", p.OpenRatioByMoney},
           {"OpenRatioByVolume", p.OpenRatioByVolume},
           {"CloseRatioByMoney", p.CloseRatioByMoney},
           {"CloseRatioByVolume", p.CloseRatioByVolume},
           {"CloseTodayRatioByMoney", p.CloseTodayRatioByMoney},
           {"CloseTodayRatioByVolume", p.CloseTodayRatioByVolume},
           {"StrikeRatioByMoney", p.StrikeRatioByMoney},
           {"StrikeRatioByVolume", p.StrikeRatioByVolume},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcMMOptionInstrCommRateField& p) {
  auto &v0 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.reserve1));
  auto &v1 = j.at("InvestorRange").get_ref<const std::string &>();
  p.InvestorRange = v1.at(0);
  auto &v2 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v3 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InvestorID));
  j.at("OpenRatioByMoney").get_to(p.OpenRatioByMoney);
  j.at("OpenRatioByVolume").get_to(p.OpenRatioByVolume);
  j.at("CloseRatioByMoney").get_to(p.CloseRatioByMoney);
  j.at("CloseRatioByVolume").get_to(p.CloseRatioByVolume);
  j.at("CloseTodayRatioByMoney").get_to(p.CloseTodayRatioByMoney);
  j.at("CloseTodayRatioByVolume").get_to(p.CloseTodayRatioByVolume);
  j.at("StrikeRatioByMoney").get_to(p.StrikeRatioByMoney);
  j.at("StrikeRatioByVolume").get_to(p.StrikeRatioByVolume);
  auto &v12 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcQryMMOptionInstrCommRateField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQryMMOptionInstrCommRateField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcMMInstrumentCommissionRateField& p) {
  j = json{
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"InvestorRange", std::string(1, p.InvestorRange)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"OpenRatioByMoney", p.OpenRatioByMoney},
           {"OpenRatioByVolume", p.OpenRatioByVolume},
           {"CloseRatioByMoney", p.CloseRatioByMoney},
           {"CloseRatioByVolume", p.CloseRatioByVolume},
           {"CloseTodayRatioByMoney", p.CloseTodayRatioByMoney},
           {"CloseTodayRatioByVolume", p.CloseTodayRatioByVolume},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcMMInstrumentCommissionRateField& p) {
  auto &v0 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.reserve1));
  auto &v1 = j.at("InvestorRange").get_ref<const std::string &>();
  p.InvestorRange = v1.at(0);
  auto &v2 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v3 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InvestorID));
  j.at("OpenRatioByMoney").get_to(p.OpenRatioByMoney);
  j.at("OpenRatioByVolume").get_to(p.OpenRatioByVolume);
  j.at("CloseRatioByMoney").get_to(p.CloseRatioByMoney);
  j.at("CloseRatioByVolume").get_to(p.CloseRatioByVolume);
  j.at("CloseTodayRatioByMoney").get_to(p.CloseTodayRatioByMoney);
  j.at("CloseTodayRatioByVolume").get_to(p.CloseTodayRatioByVolume);
  auto &v10 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcQryMMInstrumentCommissionRateField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQryMMInstrumentCommissionRateField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcInstrumentOrderCommRateField& p) {
  j = json{
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"InvestorRange", std::string(1, p.InvestorRange)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"OrderCommByVolume", p.OrderCommByVolume},
           {"OrderActionCommByVolume", p.OrderActionCommByVolume},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"OrderCommByTrade", p.OrderCommByTrade},
           {"OrderActionCommByTrade", p.OrderActionCommByTrade},
  };
}

void from_json(const json& j, CThostFtdcInstrumentOrderCommRateField& p) {
  auto &v0 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.reserve1));
  auto &v1 = j.at("InvestorRange").get_ref<const std::string &>();
  p.InvestorRange = v1.at(0);
  auto &v2 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v3 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v4 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v4.at(0);
  j.at("OrderCommByVolume").get_to(p.OrderCommByVolume);
  j.at("OrderActionCommByVolume").get_to(p.OrderActionCommByVolume);
  auto &v7 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v8 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v9 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.InstrumentID));
  j.at("OrderCommByTrade").get_to(p.OrderCommByTrade);
  j.at("OrderActionCommByTrade").get_to(p.OrderActionCommByTrade);

}



void to_json(json& j, const CThostFtdcQryInstrumentOrderCommRateField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQryInstrumentOrderCommRateField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcTradeParamField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"TradeParamID", std::string(1, p.TradeParamID)},
           {"TradeParamValue", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeParamValue)},
           {"Memo", codec_convert("UTF-8//TRANSLIT", "GBK", p.Memo)},
  };
}

void from_json(const json& j, CThostFtdcTradeParamField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("TradeParamID").get_ref<const std::string &>();
  p.TradeParamID = v1.at(0);
  auto &v2 = j.at("TradeParamValue").get_ref<const std::string &>();
  std::strncpy(p.TradeParamValue, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.TradeParamValue));
  auto &v3 = j.at("Memo").get_ref<const std::string &>();
  std::strncpy(p.Memo, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.Memo));

}



void to_json(json& j, const CThostFtdcInstrumentMarginRateULField& p) {
  j = json{
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"InvestorRange", std::string(1, p.InvestorRange)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"LongMarginRatioByMoney", p.LongMarginRatioByMoney},
           {"LongMarginRatioByVolume", p.LongMarginRatioByVolume},
           {"ShortMarginRatioByMoney", p.ShortMarginRatioByMoney},
           {"ShortMarginRatioByVolume", p.ShortMarginRatioByVolume},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcInstrumentMarginRateULField& p) {
  auto &v0 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.reserve1));
  auto &v1 = j.at("InvestorRange").get_ref<const std::string &>();
  p.InvestorRange = v1.at(0);
  auto &v2 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v3 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v4 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v4.at(0);
  j.at("LongMarginRatioByMoney").get_to(p.LongMarginRatioByMoney);
  j.at("LongMarginRatioByVolume").get_to(p.LongMarginRatioByVolume);
  j.at("ShortMarginRatioByMoney").get_to(p.ShortMarginRatioByMoney);
  j.at("ShortMarginRatioByVolume").get_to(p.ShortMarginRatioByVolume);
  auto &v9 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcFutureLimitPosiParamField& p) {
  j = json{
           {"InvestorRange", std::string(1, p.InvestorRange)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"SpecOpenVolume", p.SpecOpenVolume},
           {"ArbiOpenVolume", p.ArbiOpenVolume},
           {"OpenVolume", p.OpenVolume},
           {"ProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductID)},
  };
}

void from_json(const json& j, CThostFtdcFutureLimitPosiParamField& p) {
  auto &v0 = j.at("InvestorRange").get_ref<const std::string &>();
  p.InvestorRange = v0.at(0);
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v3 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.reserve1));
  j.at("SpecOpenVolume").get_to(p.SpecOpenVolume);
  j.at("ArbiOpenVolume").get_to(p.ArbiOpenVolume);
  j.at("OpenVolume").get_to(p.OpenVolume);
  auto &v7 = j.at("ProductID").get_ref<const std::string &>();
  std::strncpy(p.ProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.ProductID));

}



void to_json(json& j, const CThostFtdcLoginForbiddenIPField& p) {
  j = json{
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
  };
}

void from_json(const json& j, CThostFtdcLoginForbiddenIPField& p) {
  auto &v0 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.reserve1));
  auto &v1 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.IPAddress));

}



void to_json(json& j, const CThostFtdcIPListField& p) {
  j = json{
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"IsWhite", p.IsWhite},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
  };
}

void from_json(const json& j, CThostFtdcIPListField& p) {
  auto &v0 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.reserve1));
  j.at("IsWhite").get_to(p.IsWhite);
  auto &v2 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.IPAddress));

}



void to_json(json& j, const CThostFtdcInputOptionSelfCloseField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"OptionSelfCloseRef", codec_convert("UTF-8//TRANSLIT", "GBK", p.OptionSelfCloseRef)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"Volume", p.Volume},
           {"RequestID", p.RequestID},
           {"BusinessUnit", codec_convert("UTF-8//TRANSLIT", "GBK", p.BusinessUnit)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"OptSelfCloseFlag", std::string(1, p.OptSelfCloseFlag)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
  };
}

void from_json(const json& j, CThostFtdcInputOptionSelfCloseField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("OptionSelfCloseRef").get_ref<const std::string &>();
  std::strncpy(p.OptionSelfCloseRef, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.OptionSelfCloseRef));
  auto &v4 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.UserID));
  j.at("Volume").get_to(p.Volume);
  j.at("RequestID").get_to(p.RequestID);
  auto &v7 = j.at("BusinessUnit").get_ref<const std::string &>();
  std::strncpy(p.BusinessUnit, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BusinessUnit));
  auto &v8 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v8.at(0);
  auto &v9 = j.at("OptSelfCloseFlag").get_ref<const std::string &>();
  p.OptSelfCloseFlag = v9.at(0);
  auto &v10 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v11 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v12 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.AccountID));
  auto &v13 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.CurrencyID));
  auto &v14 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.ClientID));
  auto &v15 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.reserve2));
  auto &v16 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v17 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v18 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.IPAddress));

}



void to_json(json& j, const CThostFtdcInputOptionSelfCloseActionField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"OptionSelfCloseActionRef", p.OptionSelfCloseActionRef},
           {"OptionSelfCloseRef", codec_convert("UTF-8//TRANSLIT", "GBK", p.OptionSelfCloseRef)},
           {"RequestID", p.RequestID},
           {"FrontID", p.FrontID},
           {"SessionID", p.SessionID},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"OptionSelfCloseSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.OptionSelfCloseSysID)},
           {"ActionFlag", std::string(1, p.ActionFlag)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
  };
}

void from_json(const json& j, CThostFtdcInputOptionSelfCloseActionField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  j.at("OptionSelfCloseActionRef").get_to(p.OptionSelfCloseActionRef);
  auto &v3 = j.at("OptionSelfCloseRef").get_ref<const std::string &>();
  std::strncpy(p.OptionSelfCloseRef, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.OptionSelfCloseRef));
  j.at("RequestID").get_to(p.RequestID);
  j.at("FrontID").get_to(p.FrontID);
  j.at("SessionID").get_to(p.SessionID);
  auto &v7 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v8 = j.at("OptionSelfCloseSysID").get_ref<const std::string &>();
  std::strncpy(p.OptionSelfCloseSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.OptionSelfCloseSysID));
  auto &v9 = j.at("ActionFlag").get_ref<const std::string &>();
  p.ActionFlag = v9.at(0);
  auto &v10 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.UserID));
  auto &v11 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.reserve1));
  auto &v12 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v13 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.reserve2));
  auto &v14 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v15 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v16 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.IPAddress));

}



void to_json(json& j, const CThostFtdcOptionSelfCloseField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"OptionSelfCloseRef", codec_convert("UTF-8//TRANSLIT", "GBK", p.OptionSelfCloseRef)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"Volume", p.Volume},
           {"RequestID", p.RequestID},
           {"BusinessUnit", codec_convert("UTF-8//TRANSLIT", "GBK", p.BusinessUnit)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"OptSelfCloseFlag", std::string(1, p.OptSelfCloseFlag)},
           {"OptionSelfCloseLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.OptionSelfCloseLocalID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"InstallID", p.InstallID},
           {"OrderSubmitStatus", std::string(1, p.OrderSubmitStatus)},
           {"NotifySequence", p.NotifySequence},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"SettlementID", p.SettlementID},
           {"OptionSelfCloseSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.OptionSelfCloseSysID)},
           {"InsertDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.InsertDate)},
           {"InsertTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.InsertTime)},
           {"CancelTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.CancelTime)},
           {"ExecResult", std::string(1, p.ExecResult)},
           {"ClearingPartID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClearingPartID)},
           {"SequenceNo", p.SequenceNo},
           {"FrontID", p.FrontID},
           {"SessionID", p.SessionID},
           {"UserProductInfo", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserProductInfo)},
           {"StatusMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.StatusMsg)},
           {"ActiveUserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActiveUserID)},
           {"BrokerOptionSelfCloseSeq", p.BrokerOptionSelfCloseSeq},
           {"BranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BranchID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"reserve3", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve3)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"ExchangeInstID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeInstID)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
  };
}

void from_json(const json& j, CThostFtdcOptionSelfCloseField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("OptionSelfCloseRef").get_ref<const std::string &>();
  std::strncpy(p.OptionSelfCloseRef, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.OptionSelfCloseRef));
  auto &v4 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.UserID));
  j.at("Volume").get_to(p.Volume);
  j.at("RequestID").get_to(p.RequestID);
  auto &v7 = j.at("BusinessUnit").get_ref<const std::string &>();
  std::strncpy(p.BusinessUnit, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BusinessUnit));
  auto &v8 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v8.at(0);
  auto &v9 = j.at("OptSelfCloseFlag").get_ref<const std::string &>();
  p.OptSelfCloseFlag = v9.at(0);
  auto &v10 = j.at("OptionSelfCloseLocalID").get_ref<const std::string &>();
  std::strncpy(p.OptionSelfCloseLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.OptionSelfCloseLocalID));
  auto &v11 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v12 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v13 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.ClientID));
  auto &v14 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.reserve2));
  auto &v15 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.TraderID));
  j.at("InstallID").get_to(p.InstallID);
  auto &v17 = j.at("OrderSubmitStatus").get_ref<const std::string &>();
  p.OrderSubmitStatus = v17.at(0);
  j.at("NotifySequence").get_to(p.NotifySequence);
  auto &v19 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("SettlementID").get_to(p.SettlementID);
  auto &v21 = j.at("OptionSelfCloseSysID").get_ref<const std::string &>();
  std::strncpy(p.OptionSelfCloseSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v21.c_str()).c_str(), sizeof(p.OptionSelfCloseSysID));
  auto &v22 = j.at("InsertDate").get_ref<const std::string &>();
  std::strncpy(p.InsertDate, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.InsertDate));
  auto &v23 = j.at("InsertTime").get_ref<const std::string &>();
  std::strncpy(p.InsertTime, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.InsertTime));
  auto &v24 = j.at("CancelTime").get_ref<const std::string &>();
  std::strncpy(p.CancelTime, codec_convert("GBK//TRANSLIT", "UTF-8", v24.c_str()).c_str(), sizeof(p.CancelTime));
  auto &v25 = j.at("ExecResult").get_ref<const std::string &>();
  p.ExecResult = v25.at(0);
  auto &v26 = j.at("ClearingPartID").get_ref<const std::string &>();
  std::strncpy(p.ClearingPartID, codec_convert("GBK//TRANSLIT", "UTF-8", v26.c_str()).c_str(), sizeof(p.ClearingPartID));
  j.at("SequenceNo").get_to(p.SequenceNo);
  j.at("FrontID").get_to(p.FrontID);
  j.at("SessionID").get_to(p.SessionID);
  auto &v30 = j.at("UserProductInfo").get_ref<const std::string &>();
  std::strncpy(p.UserProductInfo, codec_convert("GBK//TRANSLIT", "UTF-8", v30.c_str()).c_str(), sizeof(p.UserProductInfo));
  auto &v31 = j.at("StatusMsg").get_ref<const std::string &>();
  std::strncpy(p.StatusMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v31.c_str()).c_str(), sizeof(p.StatusMsg));
  auto &v32 = j.at("ActiveUserID").get_ref<const std::string &>();
  std::strncpy(p.ActiveUserID, codec_convert("GBK//TRANSLIT", "UTF-8", v32.c_str()).c_str(), sizeof(p.ActiveUserID));
  j.at("BrokerOptionSelfCloseSeq").get_to(p.BrokerOptionSelfCloseSeq);
  auto &v34 = j.at("BranchID").get_ref<const std::string &>();
  std::strncpy(p.BranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v34.c_str()).c_str(), sizeof(p.BranchID));
  auto &v35 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v35.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v36 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v36.c_str()).c_str(), sizeof(p.AccountID));
  auto &v37 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v37.c_str()).c_str(), sizeof(p.CurrencyID));
  auto &v38 = j.at("reserve3").get_ref<const std::string &>();
  std::strncpy(p.reserve3, codec_convert("GBK//TRANSLIT", "UTF-8", v38.c_str()).c_str(), sizeof(p.reserve3));
  auto &v39 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v39.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v40 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v40.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v41 = j.at("ExchangeInstID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeInstID, codec_convert("GBK//TRANSLIT", "UTF-8", v41.c_str()).c_str(), sizeof(p.ExchangeInstID));
  auto &v42 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v42.c_str()).c_str(), sizeof(p.IPAddress));

}



void to_json(json& j, const CThostFtdcOptionSelfCloseActionField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"OptionSelfCloseActionRef", p.OptionSelfCloseActionRef},
           {"OptionSelfCloseRef", codec_convert("UTF-8//TRANSLIT", "GBK", p.OptionSelfCloseRef)},
           {"RequestID", p.RequestID},
           {"FrontID", p.FrontID},
           {"SessionID", p.SessionID},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"OptionSelfCloseSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.OptionSelfCloseSysID)},
           {"ActionFlag", std::string(1, p.ActionFlag)},
           {"ActionDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionDate)},
           {"ActionTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionTime)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"InstallID", p.InstallID},
           {"OptionSelfCloseLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.OptionSelfCloseLocalID)},
           {"ActionLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionLocalID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"BusinessUnit", codec_convert("UTF-8//TRANSLIT", "GBK", p.BusinessUnit)},
           {"OrderActionStatus", std::string(1, p.OrderActionStatus)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"StatusMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.StatusMsg)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"BranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BranchID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
  };
}

void from_json(const json& j, CThostFtdcOptionSelfCloseActionField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  j.at("OptionSelfCloseActionRef").get_to(p.OptionSelfCloseActionRef);
  auto &v3 = j.at("OptionSelfCloseRef").get_ref<const std::string &>();
  std::strncpy(p.OptionSelfCloseRef, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.OptionSelfCloseRef));
  j.at("RequestID").get_to(p.RequestID);
  j.at("FrontID").get_to(p.FrontID);
  j.at("SessionID").get_to(p.SessionID);
  auto &v7 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v8 = j.at("OptionSelfCloseSysID").get_ref<const std::string &>();
  std::strncpy(p.OptionSelfCloseSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.OptionSelfCloseSysID));
  auto &v9 = j.at("ActionFlag").get_ref<const std::string &>();
  p.ActionFlag = v9.at(0);
  auto &v10 = j.at("ActionDate").get_ref<const std::string &>();
  std::strncpy(p.ActionDate, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.ActionDate));
  auto &v11 = j.at("ActionTime").get_ref<const std::string &>();
  std::strncpy(p.ActionTime, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.ActionTime));
  auto &v12 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.TraderID));
  j.at("InstallID").get_to(p.InstallID);
  auto &v14 = j.at("OptionSelfCloseLocalID").get_ref<const std::string &>();
  std::strncpy(p.OptionSelfCloseLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.OptionSelfCloseLocalID));
  auto &v15 = j.at("ActionLocalID").get_ref<const std::string &>();
  std::strncpy(p.ActionLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.ActionLocalID));
  auto &v16 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v17 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.ClientID));
  auto &v18 = j.at("BusinessUnit").get_ref<const std::string &>();
  std::strncpy(p.BusinessUnit, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.BusinessUnit));
  auto &v19 = j.at("OrderActionStatus").get_ref<const std::string &>();
  p.OrderActionStatus = v19.at(0);
  auto &v20 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v20.c_str()).c_str(), sizeof(p.UserID));
  auto &v21 = j.at("StatusMsg").get_ref<const std::string &>();
  std::strncpy(p.StatusMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v21.c_str()).c_str(), sizeof(p.StatusMsg));
  auto &v22 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.reserve1));
  auto &v23 = j.at("BranchID").get_ref<const std::string &>();
  std::strncpy(p.BranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.BranchID));
  auto &v24 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v24.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v25 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v25.c_str()).c_str(), sizeof(p.reserve2));
  auto &v26 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v26.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v27 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v27.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v28 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v28.c_str()).c_str(), sizeof(p.IPAddress));

}



void to_json(json& j, const CThostFtdcQryOptionSelfCloseField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"OptionSelfCloseSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.OptionSelfCloseSysID)},
           {"InsertTimeStart", codec_convert("UTF-8//TRANSLIT", "GBK", p.InsertTimeStart)},
           {"InsertTimeEnd", codec_convert("UTF-8//TRANSLIT", "GBK", p.InsertTimeEnd)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQryOptionSelfCloseField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v4 = j.at("OptionSelfCloseSysID").get_ref<const std::string &>();
  std::strncpy(p.OptionSelfCloseSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.OptionSelfCloseSysID));
  auto &v5 = j.at("InsertTimeStart").get_ref<const std::string &>();
  std::strncpy(p.InsertTimeStart, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.InsertTimeStart));
  auto &v6 = j.at("InsertTimeEnd").get_ref<const std::string &>();
  std::strncpy(p.InsertTimeEnd, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.InsertTimeEnd));
  auto &v7 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcExchangeOptionSelfCloseField& p) {
  j = json{
           {"Volume", p.Volume},
           {"RequestID", p.RequestID},
           {"BusinessUnit", codec_convert("UTF-8//TRANSLIT", "GBK", p.BusinessUnit)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"OptSelfCloseFlag", std::string(1, p.OptSelfCloseFlag)},
           {"OptionSelfCloseLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.OptionSelfCloseLocalID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"InstallID", p.InstallID},
           {"OrderSubmitStatus", std::string(1, p.OrderSubmitStatus)},
           {"NotifySequence", p.NotifySequence},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"SettlementID", p.SettlementID},
           {"OptionSelfCloseSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.OptionSelfCloseSysID)},
           {"InsertDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.InsertDate)},
           {"InsertTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.InsertTime)},
           {"CancelTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.CancelTime)},
           {"ExecResult", std::string(1, p.ExecResult)},
           {"ClearingPartID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClearingPartID)},
           {"SequenceNo", p.SequenceNo},
           {"BranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BranchID)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"ExchangeInstID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeInstID)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
  };
}

void from_json(const json& j, CThostFtdcExchangeOptionSelfCloseField& p) {
  j.at("Volume").get_to(p.Volume);
  j.at("RequestID").get_to(p.RequestID);
  auto &v2 = j.at("BusinessUnit").get_ref<const std::string &>();
  std::strncpy(p.BusinessUnit, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BusinessUnit));
  auto &v3 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v3.at(0);
  auto &v4 = j.at("OptSelfCloseFlag").get_ref<const std::string &>();
  p.OptSelfCloseFlag = v4.at(0);
  auto &v5 = j.at("OptionSelfCloseLocalID").get_ref<const std::string &>();
  std::strncpy(p.OptionSelfCloseLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.OptionSelfCloseLocalID));
  auto &v6 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v7 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v8 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.ClientID));
  auto &v9 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.reserve1));
  auto &v10 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.TraderID));
  j.at("InstallID").get_to(p.InstallID);
  auto &v12 = j.at("OrderSubmitStatus").get_ref<const std::string &>();
  p.OrderSubmitStatus = v12.at(0);
  j.at("NotifySequence").get_to(p.NotifySequence);
  auto &v14 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("SettlementID").get_to(p.SettlementID);
  auto &v16 = j.at("OptionSelfCloseSysID").get_ref<const std::string &>();
  std::strncpy(p.OptionSelfCloseSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.OptionSelfCloseSysID));
  auto &v17 = j.at("InsertDate").get_ref<const std::string &>();
  std::strncpy(p.InsertDate, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.InsertDate));
  auto &v18 = j.at("InsertTime").get_ref<const std::string &>();
  std::strncpy(p.InsertTime, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.InsertTime));
  auto &v19 = j.at("CancelTime").get_ref<const std::string &>();
  std::strncpy(p.CancelTime, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.CancelTime));
  auto &v20 = j.at("ExecResult").get_ref<const std::string &>();
  p.ExecResult = v20.at(0);
  auto &v21 = j.at("ClearingPartID").get_ref<const std::string &>();
  std::strncpy(p.ClearingPartID, codec_convert("GBK//TRANSLIT", "UTF-8", v21.c_str()).c_str(), sizeof(p.ClearingPartID));
  j.at("SequenceNo").get_to(p.SequenceNo);
  auto &v23 = j.at("BranchID").get_ref<const std::string &>();
  std::strncpy(p.BranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.BranchID));
  auto &v24 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v24.c_str()).c_str(), sizeof(p.reserve2));
  auto &v25 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v25.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v26 = j.at("ExchangeInstID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeInstID, codec_convert("GBK//TRANSLIT", "UTF-8", v26.c_str()).c_str(), sizeof(p.ExchangeInstID));
  auto &v27 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v27.c_str()).c_str(), sizeof(p.IPAddress));

}



void to_json(json& j, const CThostFtdcQryOptionSelfCloseActionField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
  };
}

void from_json(const json& j, CThostFtdcQryOptionSelfCloseActionField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ExchangeID));

}



void to_json(json& j, const CThostFtdcExchangeOptionSelfCloseActionField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"OptionSelfCloseSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.OptionSelfCloseSysID)},
           {"ActionFlag", std::string(1, p.ActionFlag)},
           {"ActionDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionDate)},
           {"ActionTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionTime)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"InstallID", p.InstallID},
           {"OptionSelfCloseLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.OptionSelfCloseLocalID)},
           {"ActionLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionLocalID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"BusinessUnit", codec_convert("UTF-8//TRANSLIT", "GBK", p.BusinessUnit)},
           {"OrderActionStatus", std::string(1, p.OrderActionStatus)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"BranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BranchID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"OptSelfCloseFlag", std::string(1, p.OptSelfCloseFlag)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
           {"ExchangeInstID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeInstID)},
  };
}

void from_json(const json& j, CThostFtdcExchangeOptionSelfCloseActionField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("OptionSelfCloseSysID").get_ref<const std::string &>();
  std::strncpy(p.OptionSelfCloseSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.OptionSelfCloseSysID));
  auto &v2 = j.at("ActionFlag").get_ref<const std::string &>();
  p.ActionFlag = v2.at(0);
  auto &v3 = j.at("ActionDate").get_ref<const std::string &>();
  std::strncpy(p.ActionDate, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ActionDate));
  auto &v4 = j.at("ActionTime").get_ref<const std::string &>();
  std::strncpy(p.ActionTime, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.ActionTime));
  auto &v5 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.TraderID));
  j.at("InstallID").get_to(p.InstallID);
  auto &v7 = j.at("OptionSelfCloseLocalID").get_ref<const std::string &>();
  std::strncpy(p.OptionSelfCloseLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.OptionSelfCloseLocalID));
  auto &v8 = j.at("ActionLocalID").get_ref<const std::string &>();
  std::strncpy(p.ActionLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.ActionLocalID));
  auto &v9 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v10 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.ClientID));
  auto &v11 = j.at("BusinessUnit").get_ref<const std::string &>();
  std::strncpy(p.BusinessUnit, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.BusinessUnit));
  auto &v12 = j.at("OrderActionStatus").get_ref<const std::string &>();
  p.OrderActionStatus = v12.at(0);
  auto &v13 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.UserID));
  auto &v14 = j.at("BranchID").get_ref<const std::string &>();
  std::strncpy(p.BranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.BranchID));
  auto &v15 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.reserve1));
  auto &v16 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v17 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.reserve2));
  auto &v18 = j.at("OptSelfCloseFlag").get_ref<const std::string &>();
  p.OptSelfCloseFlag = v18.at(0);
  auto &v19 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.IPAddress));
  auto &v20 = j.at("ExchangeInstID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeInstID, codec_convert("GBK//TRANSLIT", "UTF-8", v20.c_str()).c_str(), sizeof(p.ExchangeInstID));

}



void to_json(json& j, const CThostFtdcSyncDelaySwapField& p) {
  j = json{
           {"DelaySwapSeqNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.DelaySwapSeqNo)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"FromCurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.FromCurrencyID)},
           {"FromAmount", p.FromAmount},
           {"FromFrozenSwap", p.FromFrozenSwap},
           {"FromRemainSwap", p.FromRemainSwap},
           {"ToCurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ToCurrencyID)},
           {"ToAmount", p.ToAmount},
           {"IsManualSwap", p.IsManualSwap},
           {"IsAllRemainSetZero", p.IsAllRemainSetZero},
  };
}

void from_json(const json& j, CThostFtdcSyncDelaySwapField& p) {
  auto &v0 = j.at("DelaySwapSeqNo").get_ref<const std::string &>();
  std::strncpy(p.DelaySwapSeqNo, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.DelaySwapSeqNo));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v3 = j.at("FromCurrencyID").get_ref<const std::string &>();
  std::strncpy(p.FromCurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.FromCurrencyID));
  j.at("FromAmount").get_to(p.FromAmount);
  j.at("FromFrozenSwap").get_to(p.FromFrozenSwap);
  j.at("FromRemainSwap").get_to(p.FromRemainSwap);
  auto &v7 = j.at("ToCurrencyID").get_ref<const std::string &>();
  std::strncpy(p.ToCurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.ToCurrencyID));
  j.at("ToAmount").get_to(p.ToAmount);
  j.at("IsManualSwap").get_to(p.IsManualSwap);
  j.at("IsAllRemainSetZero").get_to(p.IsAllRemainSetZero);

}



void to_json(json& j, const CThostFtdcQrySyncDelaySwapField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"DelaySwapSeqNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.DelaySwapSeqNo)},
  };
}

void from_json(const json& j, CThostFtdcQrySyncDelaySwapField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("DelaySwapSeqNo").get_ref<const std::string &>();
  std::strncpy(p.DelaySwapSeqNo, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.DelaySwapSeqNo));

}



void to_json(json& j, const CThostFtdcInvestUnitField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"InvestorUnitName", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorUnitName)},
           {"InvestorGroupID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorGroupID)},
           {"CommModelID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CommModelID)},
           {"MarginModelID", codec_convert("UTF-8//TRANSLIT", "GBK", p.MarginModelID)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
  };
}

void from_json(const json& j, CThostFtdcInvestUnitField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v3 = j.at("InvestorUnitName").get_ref<const std::string &>();
  std::strncpy(p.InvestorUnitName, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InvestorUnitName));
  auto &v4 = j.at("InvestorGroupID").get_ref<const std::string &>();
  std::strncpy(p.InvestorGroupID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.InvestorGroupID));
  auto &v5 = j.at("CommModelID").get_ref<const std::string &>();
  std::strncpy(p.CommModelID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.CommModelID));
  auto &v6 = j.at("MarginModelID").get_ref<const std::string &>();
  std::strncpy(p.MarginModelID, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.MarginModelID));
  auto &v7 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.AccountID));
  auto &v8 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.CurrencyID));

}



void to_json(json& j, const CThostFtdcQryInvestUnitField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
  };
}

void from_json(const json& j, CThostFtdcQryInvestUnitField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestUnitID));

}



void to_json(json& j, const CThostFtdcSecAgentCheckModeField& p) {
  j = json{
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"BrokerSecAgentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerSecAgentID)},
           {"CheckSelfAccount", p.CheckSelfAccount},
  };
}

void from_json(const json& j, CThostFtdcSecAgentCheckModeField& p) {
  auto &v0 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.CurrencyID));
  auto &v3 = j.at("BrokerSecAgentID").get_ref<const std::string &>();
  std::strncpy(p.BrokerSecAgentID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.BrokerSecAgentID));
  j.at("CheckSelfAccount").get_to(p.CheckSelfAccount);

}



void to_json(json& j, const CThostFtdcSecAgentTradeInfoField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BrokerSecAgentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerSecAgentID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"LongCustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.LongCustomerName)},
  };
}

void from_json(const json& j, CThostFtdcSecAgentTradeInfoField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("BrokerSecAgentID").get_ref<const std::string &>();
  std::strncpy(p.BrokerSecAgentID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerSecAgentID));
  auto &v2 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v3 = j.at("LongCustomerName").get_ref<const std::string &>();
  std::strncpy(p.LongCustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.LongCustomerName));

}



void to_json(json& j, const CThostFtdcMarketDataField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"LastPrice", p.LastPrice},
           {"PreSettlementPrice", p.PreSettlementPrice},
           {"PreClosePrice", p.PreClosePrice},
           {"PreOpenInterest", p.PreOpenInterest},
           {"OpenPrice", p.OpenPrice},
           {"HighestPrice", p.HighestPrice},
           {"LowestPrice", p.LowestPrice},
           {"Volume", p.Volume},
           {"Turnover", p.Turnover},
           {"OpenInterest", p.OpenInterest},
           {"ClosePrice", p.ClosePrice},
           {"SettlementPrice", p.SettlementPrice},
           {"UpperLimitPrice", p.UpperLimitPrice},
           {"LowerLimitPrice", p.LowerLimitPrice},
           {"PreDelta", p.PreDelta},
           {"CurrDelta", p.CurrDelta},
           {"UpdateTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.UpdateTime)},
           {"UpdateMillisec", p.UpdateMillisec},
           {"ActionDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionDay)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"ExchangeInstID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeInstID)},
  };
}

void from_json(const json& j, CThostFtdcMarketDataField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.reserve1));
  auto &v2 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v3 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.reserve2));
  j.at("LastPrice").get_to(p.LastPrice);
  j.at("PreSettlementPrice").get_to(p.PreSettlementPrice);
  j.at("PreClosePrice").get_to(p.PreClosePrice);
  j.at("PreOpenInterest").get_to(p.PreOpenInterest);
  j.at("OpenPrice").get_to(p.OpenPrice);
  j.at("HighestPrice").get_to(p.HighestPrice);
  j.at("LowestPrice").get_to(p.LowestPrice);
  j.at("Volume").get_to(p.Volume);
  j.at("Turnover").get_to(p.Turnover);
  j.at("OpenInterest").get_to(p.OpenInterest);
  j.at("ClosePrice").get_to(p.ClosePrice);
  j.at("SettlementPrice").get_to(p.SettlementPrice);
  j.at("UpperLimitPrice").get_to(p.UpperLimitPrice);
  j.at("LowerLimitPrice").get_to(p.LowerLimitPrice);
  j.at("PreDelta").get_to(p.PreDelta);
  j.at("CurrDelta").get_to(p.CurrDelta);
  auto &v20 = j.at("UpdateTime").get_ref<const std::string &>();
  std::strncpy(p.UpdateTime, codec_convert("GBK//TRANSLIT", "UTF-8", v20.c_str()).c_str(), sizeof(p.UpdateTime));
  j.at("UpdateMillisec").get_to(p.UpdateMillisec);
  auto &v22 = j.at("ActionDay").get_ref<const std::string &>();
  std::strncpy(p.ActionDay, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.ActionDay));
  auto &v23 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v24 = j.at("ExchangeInstID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeInstID, codec_convert("GBK//TRANSLIT", "UTF-8", v24.c_str()).c_str(), sizeof(p.ExchangeInstID));

}



void to_json(json& j, const CThostFtdcMarketDataBaseField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"PreSettlementPrice", p.PreSettlementPrice},
           {"PreClosePrice", p.PreClosePrice},
           {"PreOpenInterest", p.PreOpenInterest},
           {"PreDelta", p.PreDelta},
  };
}

void from_json(const json& j, CThostFtdcMarketDataBaseField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("PreSettlementPrice").get_to(p.PreSettlementPrice);
  j.at("PreClosePrice").get_to(p.PreClosePrice);
  j.at("PreOpenInterest").get_to(p.PreOpenInterest);
  j.at("PreDelta").get_to(p.PreDelta);

}



void to_json(json& j, const CThostFtdcMarketDataStaticField& p) {
  j = json{
           {"OpenPrice", p.OpenPrice},
           {"HighestPrice", p.HighestPrice},
           {"LowestPrice", p.LowestPrice},
           {"ClosePrice", p.ClosePrice},
           {"UpperLimitPrice", p.UpperLimitPrice},
           {"LowerLimitPrice", p.LowerLimitPrice},
           {"SettlementPrice", p.SettlementPrice},
           {"CurrDelta", p.CurrDelta},
  };
}

void from_json(const json& j, CThostFtdcMarketDataStaticField& p) {
  j.at("OpenPrice").get_to(p.OpenPrice);
  j.at("HighestPrice").get_to(p.HighestPrice);
  j.at("LowestPrice").get_to(p.LowestPrice);
  j.at("ClosePrice").get_to(p.ClosePrice);
  j.at("UpperLimitPrice").get_to(p.UpperLimitPrice);
  j.at("LowerLimitPrice").get_to(p.LowerLimitPrice);
  j.at("SettlementPrice").get_to(p.SettlementPrice);
  j.at("CurrDelta").get_to(p.CurrDelta);

}



void to_json(json& j, const CThostFtdcMarketDataLastMatchField& p) {
  j = json{
           {"LastPrice", p.LastPrice},
           {"Volume", p.Volume},
           {"Turnover", p.Turnover},
           {"OpenInterest", p.OpenInterest},
  };
}

void from_json(const json& j, CThostFtdcMarketDataLastMatchField& p) {
  j.at("LastPrice").get_to(p.LastPrice);
  j.at("Volume").get_to(p.Volume);
  j.at("Turnover").get_to(p.Turnover);
  j.at("OpenInterest").get_to(p.OpenInterest);

}



void to_json(json& j, const CThostFtdcMarketDataBestPriceField& p) {
  j = json{
           {"BidPrice1", p.BidPrice1},
           {"BidVolume1", p.BidVolume1},
           {"AskPrice1", p.AskPrice1},
           {"AskVolume1", p.AskVolume1},
  };
}

void from_json(const json& j, CThostFtdcMarketDataBestPriceField& p) {
  j.at("BidPrice1").get_to(p.BidPrice1);
  j.at("BidVolume1").get_to(p.BidVolume1);
  j.at("AskPrice1").get_to(p.AskPrice1);
  j.at("AskVolume1").get_to(p.AskVolume1);

}



void to_json(json& j, const CThostFtdcMarketDataBid23Field& p) {
  j = json{
           {"BidPrice2", p.BidPrice2},
           {"BidVolume2", p.BidVolume2},
           {"BidPrice3", p.BidPrice3},
           {"BidVolume3", p.BidVolume3},
  };
}

void from_json(const json& j, CThostFtdcMarketDataBid23Field& p) {
  j.at("BidPrice2").get_to(p.BidPrice2);
  j.at("BidVolume2").get_to(p.BidVolume2);
  j.at("BidPrice3").get_to(p.BidPrice3);
  j.at("BidVolume3").get_to(p.BidVolume3);

}



void to_json(json& j, const CThostFtdcMarketDataAsk23Field& p) {
  j = json{
           {"AskPrice2", p.AskPrice2},
           {"AskVolume2", p.AskVolume2},
           {"AskPrice3", p.AskPrice3},
           {"AskVolume3", p.AskVolume3},
  };
}

void from_json(const json& j, CThostFtdcMarketDataAsk23Field& p) {
  j.at("AskPrice2").get_to(p.AskPrice2);
  j.at("AskVolume2").get_to(p.AskVolume2);
  j.at("AskPrice3").get_to(p.AskPrice3);
  j.at("AskVolume3").get_to(p.AskVolume3);

}



void to_json(json& j, const CThostFtdcMarketDataBid45Field& p) {
  j = json{
           {"BidPrice4", p.BidPrice4},
           {"BidVolume4", p.BidVolume4},
           {"BidPrice5", p.BidPrice5},
           {"BidVolume5", p.BidVolume5},
  };
}

void from_json(const json& j, CThostFtdcMarketDataBid45Field& p) {
  j.at("BidPrice4").get_to(p.BidPrice4);
  j.at("BidVolume4").get_to(p.BidVolume4);
  j.at("BidPrice5").get_to(p.BidPrice5);
  j.at("BidVolume5").get_to(p.BidVolume5);

}



void to_json(json& j, const CThostFtdcMarketDataAsk45Field& p) {
  j = json{
           {"AskPrice4", p.AskPrice4},
           {"AskVolume4", p.AskVolume4},
           {"AskPrice5", p.AskPrice5},
           {"AskVolume5", p.AskVolume5},
  };
}

void from_json(const json& j, CThostFtdcMarketDataAsk45Field& p) {
  j.at("AskPrice4").get_to(p.AskPrice4);
  j.at("AskVolume4").get_to(p.AskVolume4);
  j.at("AskPrice5").get_to(p.AskPrice5);
  j.at("AskVolume5").get_to(p.AskVolume5);

}



void to_json(json& j, const CThostFtdcMarketDataUpdateTimeField& p) {
  j = json{
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"UpdateTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.UpdateTime)},
           {"UpdateMillisec", p.UpdateMillisec},
           {"ActionDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionDay)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcMarketDataUpdateTimeField& p) {
  auto &v0 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.reserve1));
  auto &v1 = j.at("UpdateTime").get_ref<const std::string &>();
  std::strncpy(p.UpdateTime, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.UpdateTime));
  j.at("UpdateMillisec").get_to(p.UpdateMillisec);
  auto &v3 = j.at("ActionDay").get_ref<const std::string &>();
  std::strncpy(p.ActionDay, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ActionDay));
  auto &v4 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcMarketDataBandingPriceField& p) {
  j = json{
           {"BandingUpperPrice", p.BandingUpperPrice},
           {"BandingLowerPrice", p.BandingLowerPrice},
  };
}

void from_json(const json& j, CThostFtdcMarketDataBandingPriceField& p) {
  j.at("BandingUpperPrice").get_to(p.BandingUpperPrice);
  j.at("BandingLowerPrice").get_to(p.BandingLowerPrice);

}



void to_json(json& j, const CThostFtdcMarketDataExchangeField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
  };
}

void from_json(const json& j, CThostFtdcMarketDataExchangeField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));

}



void to_json(json& j, const CThostFtdcSpecificInstrumentField& p) {
  j = json{
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcSpecificInstrumentField& p) {
  auto &v0 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.reserve1));
  auto &v1 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcInstrumentStatusField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"SettlementGroupID", codec_convert("UTF-8//TRANSLIT", "GBK", p.SettlementGroupID)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"InstrumentStatus", std::string(1, p.InstrumentStatus)},
           {"TradingSegmentSN", p.TradingSegmentSN},
           {"EnterTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.EnterTime)},
           {"EnterReason", std::string(1, p.EnterReason)},
           {"ExchangeInstID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeInstID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcInstrumentStatusField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.reserve1));
  auto &v2 = j.at("SettlementGroupID").get_ref<const std::string &>();
  std::strncpy(p.SettlementGroupID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.SettlementGroupID));
  auto &v3 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.reserve2));
  auto &v4 = j.at("InstrumentStatus").get_ref<const std::string &>();
  p.InstrumentStatus = v4.at(0);
  j.at("TradingSegmentSN").get_to(p.TradingSegmentSN);
  auto &v6 = j.at("EnterTime").get_ref<const std::string &>();
  std::strncpy(p.EnterTime, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.EnterTime));
  auto &v7 = j.at("EnterReason").get_ref<const std::string &>();
  p.EnterReason = v7.at(0);
  auto &v8 = j.at("ExchangeInstID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeInstID, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.ExchangeInstID));
  auto &v9 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcQryInstrumentStatusField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ExchangeInstID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeInstID)},
  };
}

void from_json(const json& j, CThostFtdcQryInstrumentStatusField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.reserve1));
  auto &v2 = j.at("ExchangeInstID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeInstID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ExchangeInstID));

}



void to_json(json& j, const CThostFtdcInvestorAccountField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
  };
}

void from_json(const json& j, CThostFtdcInvestorAccountField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.AccountID));
  auto &v3 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.CurrencyID));

}



void to_json(json& j, const CThostFtdcPositionProfitAlgorithmField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"Algorithm", std::string(1, p.Algorithm)},
           {"Memo", codec_convert("UTF-8//TRANSLIT", "GBK", p.Memo)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
  };
}

void from_json(const json& j, CThostFtdcPositionProfitAlgorithmField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.AccountID));
  auto &v2 = j.at("Algorithm").get_ref<const std::string &>();
  p.Algorithm = v2.at(0);
  auto &v3 = j.at("Memo").get_ref<const std::string &>();
  std::strncpy(p.Memo, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.Memo));
  auto &v4 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.CurrencyID));

}



void to_json(json& j, const CThostFtdcDiscountField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorRange", std::string(1, p.InvestorRange)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"Discount", p.Discount},
  };
}

void from_json(const json& j, CThostFtdcDiscountField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorRange").get_ref<const std::string &>();
  p.InvestorRange = v1.at(0);
  auto &v2 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorID));
  j.at("Discount").get_to(p.Discount);

}



void to_json(json& j, const CThostFtdcQryTransferBankField& p) {
  j = json{
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBrchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBrchID)},
  };
}

void from_json(const json& j, CThostFtdcQryTransferBankField& p) {
  auto &v0 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BankID));
  auto &v1 = j.at("BankBrchID").get_ref<const std::string &>();
  std::strncpy(p.BankBrchID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BankBrchID));

}



void to_json(json& j, const CThostFtdcTransferBankField& p) {
  j = json{
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBrchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBrchID)},
           {"BankName", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankName)},
           {"IsActive", p.IsActive},
  };
}

void from_json(const json& j, CThostFtdcTransferBankField& p) {
  auto &v0 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BankID));
  auto &v1 = j.at("BankBrchID").get_ref<const std::string &>();
  std::strncpy(p.BankBrchID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BankBrchID));
  auto &v2 = j.at("BankName").get_ref<const std::string &>();
  std::strncpy(p.BankName, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BankName));
  j.at("IsActive").get_to(p.IsActive);

}



void to_json(json& j, const CThostFtdcQryInvestorPositionDetailField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQryInvestorPositionDetailField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v4 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v5 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcInvestorPositionDetailField& p) {
  j = json{
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"Direction", std::string(1, p.Direction)},
           {"OpenDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.OpenDate)},
           {"TradeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeID)},
           {"Volume", p.Volume},
           {"OpenPrice", p.OpenPrice},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"SettlementID", p.SettlementID},
           {"TradeType", std::string(1, p.TradeType)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"CloseProfitByDate", p.CloseProfitByDate},
           {"CloseProfitByTrade", p.CloseProfitByTrade},
           {"PositionProfitByDate", p.PositionProfitByDate},
           {"PositionProfitByTrade", p.PositionProfitByTrade},
           {"Margin", p.Margin},
           {"ExchMargin", p.ExchMargin},
           {"MarginRateByMoney", p.MarginRateByMoney},
           {"MarginRateByVolume", p.MarginRateByVolume},
           {"LastSettlementPrice", p.LastSettlementPrice},
           {"SettlementPrice", p.SettlementPrice},
           {"CloseVolume", p.CloseVolume},
           {"CloseAmount", p.CloseAmount},
           {"TimeFirstVolume", p.TimeFirstVolume},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"SpecPosiType", std::string(1, p.SpecPosiType)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"CombInstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombInstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcInvestorPositionDetailField& p) {
  auto &v0 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.reserve1));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v3 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v3.at(0);
  auto &v4 = j.at("Direction").get_ref<const std::string &>();
  p.Direction = v4.at(0);
  auto &v5 = j.at("OpenDate").get_ref<const std::string &>();
  std::strncpy(p.OpenDate, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.OpenDate));
  auto &v6 = j.at("TradeID").get_ref<const std::string &>();
  std::strncpy(p.TradeID, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.TradeID));
  j.at("Volume").get_to(p.Volume);
  j.at("OpenPrice").get_to(p.OpenPrice);
  auto &v9 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("SettlementID").get_to(p.SettlementID);
  auto &v11 = j.at("TradeType").get_ref<const std::string &>();
  p.TradeType = v11.at(0);
  auto &v12 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.reserve2));
  auto &v13 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.ExchangeID));
  j.at("CloseProfitByDate").get_to(p.CloseProfitByDate);
  j.at("CloseProfitByTrade").get_to(p.CloseProfitByTrade);
  j.at("PositionProfitByDate").get_to(p.PositionProfitByDate);
  j.at("PositionProfitByTrade").get_to(p.PositionProfitByTrade);
  j.at("Margin").get_to(p.Margin);
  j.at("ExchMargin").get_to(p.ExchMargin);
  j.at("MarginRateByMoney").get_to(p.MarginRateByMoney);
  j.at("MarginRateByVolume").get_to(p.MarginRateByVolume);
  j.at("LastSettlementPrice").get_to(p.LastSettlementPrice);
  j.at("SettlementPrice").get_to(p.SettlementPrice);
  j.at("CloseVolume").get_to(p.CloseVolume);
  j.at("CloseAmount").get_to(p.CloseAmount);
  j.at("TimeFirstVolume").get_to(p.TimeFirstVolume);
  auto &v27 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v27.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v28 = j.at("SpecPosiType").get_ref<const std::string &>();
  p.SpecPosiType = v28.at(0);
  auto &v29 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v29.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v30 = j.at("CombInstrumentID").get_ref<const std::string &>();
  std::strncpy(p.CombInstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v30.c_str()).c_str(), sizeof(p.CombInstrumentID));

}



void to_json(json& j, const CThostFtdcTradingAccountPasswordField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"Password", codec_convert("UTF-8//TRANSLIT", "GBK", p.Password)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
  };
}

void from_json(const json& j, CThostFtdcTradingAccountPasswordField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.AccountID));
  auto &v2 = j.at("Password").get_ref<const std::string &>();
  std::strncpy(p.Password, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.Password));
  auto &v3 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.CurrencyID));

}



void to_json(json& j, const CThostFtdcMDTraderOfferField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"Password", codec_convert("UTF-8//TRANSLIT", "GBK", p.Password)},
           {"InstallID", p.InstallID},
           {"OrderLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderLocalID)},
           {"TraderConnectStatus", std::string(1, p.TraderConnectStatus)},
           {"ConnectRequestDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.ConnectRequestDate)},
           {"ConnectRequestTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.ConnectRequestTime)},
           {"LastReportDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.LastReportDate)},
           {"LastReportTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.LastReportTime)},
           {"ConnectDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.ConnectDate)},
           {"ConnectTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.ConnectTime)},
           {"StartDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.StartDate)},
           {"StartTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.StartTime)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"MaxTradeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.MaxTradeID)},
           {"MaxOrderMessageReference", codec_convert("UTF-8//TRANSLIT", "GBK", p.MaxOrderMessageReference)},
           {"OrderCancelAlg", std::string(1, p.OrderCancelAlg)},
  };
}

void from_json(const json& j, CThostFtdcMDTraderOfferField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.TraderID));
  auto &v2 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v3 = j.at("Password").get_ref<const std::string &>();
  std::strncpy(p.Password, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.Password));
  j.at("InstallID").get_to(p.InstallID);
  auto &v5 = j.at("OrderLocalID").get_ref<const std::string &>();
  std::strncpy(p.OrderLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.OrderLocalID));
  auto &v6 = j.at("TraderConnectStatus").get_ref<const std::string &>();
  p.TraderConnectStatus = v6.at(0);
  auto &v7 = j.at("ConnectRequestDate").get_ref<const std::string &>();
  std::strncpy(p.ConnectRequestDate, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.ConnectRequestDate));
  auto &v8 = j.at("ConnectRequestTime").get_ref<const std::string &>();
  std::strncpy(p.ConnectRequestTime, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.ConnectRequestTime));
  auto &v9 = j.at("LastReportDate").get_ref<const std::string &>();
  std::strncpy(p.LastReportDate, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.LastReportDate));
  auto &v10 = j.at("LastReportTime").get_ref<const std::string &>();
  std::strncpy(p.LastReportTime, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.LastReportTime));
  auto &v11 = j.at("ConnectDate").get_ref<const std::string &>();
  std::strncpy(p.ConnectDate, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.ConnectDate));
  auto &v12 = j.at("ConnectTime").get_ref<const std::string &>();
  std::strncpy(p.ConnectTime, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.ConnectTime));
  auto &v13 = j.at("StartDate").get_ref<const std::string &>();
  std::strncpy(p.StartDate, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.StartDate));
  auto &v14 = j.at("StartTime").get_ref<const std::string &>();
  std::strncpy(p.StartTime, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.StartTime));
  auto &v15 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v16 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v17 = j.at("MaxTradeID").get_ref<const std::string &>();
  std::strncpy(p.MaxTradeID, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.MaxTradeID));
  auto &v18 = j.at("MaxOrderMessageReference").get_ref<const std::string &>();
  std::strncpy(p.MaxOrderMessageReference, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.MaxOrderMessageReference));
  auto &v19 = j.at("OrderCancelAlg").get_ref<const std::string &>();
  p.OrderCancelAlg = v19.at(0);

}



void to_json(json& j, const CThostFtdcQryMDTraderOfferField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
  };
}

void from_json(const json& j, CThostFtdcQryMDTraderOfferField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v2 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.TraderID));

}



void to_json(json& j, const CThostFtdcQryNoticeField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
  };
}

void from_json(const json& j, CThostFtdcQryNoticeField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));

}



void to_json(json& j, const CThostFtdcNoticeField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"Content", codec_convert("UTF-8//TRANSLIT", "GBK", p.Content)},
           {"SequenceLabel", codec_convert("UTF-8//TRANSLIT", "GBK", p.SequenceLabel)},
  };
}

void from_json(const json& j, CThostFtdcNoticeField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("Content").get_ref<const std::string &>();
  std::strncpy(p.Content, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.Content));
  auto &v2 = j.at("SequenceLabel").get_ref<const std::string &>();
  std::strncpy(p.SequenceLabel, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.SequenceLabel));

}



void to_json(json& j, const CThostFtdcUserRightField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"UserRightType", std::string(1, p.UserRightType)},
           {"IsForbidden", p.IsForbidden},
  };
}

void from_json(const json& j, CThostFtdcUserRightField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.UserID));
  auto &v2 = j.at("UserRightType").get_ref<const std::string &>();
  p.UserRightType = v2.at(0);
  j.at("IsForbidden").get_to(p.IsForbidden);

}



void to_json(json& j, const CThostFtdcQrySettlementInfoConfirmField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
  };
}

void from_json(const json& j, CThostFtdcQrySettlementInfoConfirmField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.AccountID));
  auto &v3 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.CurrencyID));

}



void to_json(json& j, const CThostFtdcLoadSettlementInfoField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
  };
}

void from_json(const json& j, CThostFtdcLoadSettlementInfoField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));

}



void to_json(json& j, const CThostFtdcBrokerWithdrawAlgorithmField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"WithdrawAlgorithm", std::string(1, p.WithdrawAlgorithm)},
           {"UsingRatio", p.UsingRatio},
           {"IncludeCloseProfit", std::string(1, p.IncludeCloseProfit)},
           {"AllWithoutTrade", std::string(1, p.AllWithoutTrade)},
           {"AvailIncludeCloseProfit", std::string(1, p.AvailIncludeCloseProfit)},
           {"IsBrokerUserEvent", p.IsBrokerUserEvent},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"FundMortgageRatio", p.FundMortgageRatio},
           {"BalanceAlgorithm", std::string(1, p.BalanceAlgorithm)},
  };
}

void from_json(const json& j, CThostFtdcBrokerWithdrawAlgorithmField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("WithdrawAlgorithm").get_ref<const std::string &>();
  p.WithdrawAlgorithm = v1.at(0);
  j.at("UsingRatio").get_to(p.UsingRatio);
  auto &v3 = j.at("IncludeCloseProfit").get_ref<const std::string &>();
  p.IncludeCloseProfit = v3.at(0);
  auto &v4 = j.at("AllWithoutTrade").get_ref<const std::string &>();
  p.AllWithoutTrade = v4.at(0);
  auto &v5 = j.at("AvailIncludeCloseProfit").get_ref<const std::string &>();
  p.AvailIncludeCloseProfit = v5.at(0);
  j.at("IsBrokerUserEvent").get_to(p.IsBrokerUserEvent);
  auto &v7 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.CurrencyID));
  j.at("FundMortgageRatio").get_to(p.FundMortgageRatio);
  auto &v9 = j.at("BalanceAlgorithm").get_ref<const std::string &>();
  p.BalanceAlgorithm = v9.at(0);

}



void to_json(json& j, const CThostFtdcTradingAccountPasswordUpdateV1Field& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"OldPassword", codec_convert("UTF-8//TRANSLIT", "GBK", p.OldPassword)},
           {"NewPassword", codec_convert("UTF-8//TRANSLIT", "GBK", p.NewPassword)},
  };
}

void from_json(const json& j, CThostFtdcTradingAccountPasswordUpdateV1Field& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("OldPassword").get_ref<const std::string &>();
  std::strncpy(p.OldPassword, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.OldPassword));
  auto &v3 = j.at("NewPassword").get_ref<const std::string &>();
  std::strncpy(p.NewPassword, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.NewPassword));

}



void to_json(json& j, const CThostFtdcTradingAccountPasswordUpdateField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"OldPassword", codec_convert("UTF-8//TRANSLIT", "GBK", p.OldPassword)},
           {"NewPassword", codec_convert("UTF-8//TRANSLIT", "GBK", p.NewPassword)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
  };
}

void from_json(const json& j, CThostFtdcTradingAccountPasswordUpdateField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.AccountID));
  auto &v2 = j.at("OldPassword").get_ref<const std::string &>();
  std::strncpy(p.OldPassword, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.OldPassword));
  auto &v3 = j.at("NewPassword").get_ref<const std::string &>();
  std::strncpy(p.NewPassword, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.NewPassword));
  auto &v4 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.CurrencyID));

}



void to_json(json& j, const CThostFtdcQryCombinationLegField& p) {
  j = json{
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"LegID", p.LegID},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"CombInstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombInstrumentID)},
           {"LegInstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.LegInstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQryCombinationLegField& p) {
  auto &v0 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.reserve1));
  j.at("LegID").get_to(p.LegID);
  auto &v2 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve2));
  auto &v3 = j.at("CombInstrumentID").get_ref<const std::string &>();
  std::strncpy(p.CombInstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.CombInstrumentID));
  auto &v4 = j.at("LegInstrumentID").get_ref<const std::string &>();
  std::strncpy(p.LegInstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.LegInstrumentID));

}



void to_json(json& j, const CThostFtdcQrySyncStatusField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
  };
}

void from_json(const json& j, CThostFtdcQrySyncStatusField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));

}



void to_json(json& j, const CThostFtdcCombinationLegField& p) {
  j = json{
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"LegID", p.LegID},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"Direction", std::string(1, p.Direction)},
           {"LegMultiple", p.LegMultiple},
           {"ImplyLevel", p.ImplyLevel},
           {"CombInstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombInstrumentID)},
           {"LegInstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.LegInstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcCombinationLegField& p) {
  auto &v0 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.reserve1));
  j.at("LegID").get_to(p.LegID);
  auto &v2 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve2));
  auto &v3 = j.at("Direction").get_ref<const std::string &>();
  p.Direction = v3.at(0);
  j.at("LegMultiple").get_to(p.LegMultiple);
  j.at("ImplyLevel").get_to(p.ImplyLevel);
  auto &v6 = j.at("CombInstrumentID").get_ref<const std::string &>();
  std::strncpy(p.CombInstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.CombInstrumentID));
  auto &v7 = j.at("LegInstrumentID").get_ref<const std::string &>();
  std::strncpy(p.LegInstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.LegInstrumentID));

}



void to_json(json& j, const CThostFtdcSyncStatusField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"DataSyncStatus", std::string(1, p.DataSyncStatus)},
  };
}

void from_json(const json& j, CThostFtdcSyncStatusField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("DataSyncStatus").get_ref<const std::string &>();
  p.DataSyncStatus = v1.at(0);

}



void to_json(json& j, const CThostFtdcQryLinkManField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
  };
}

void from_json(const json& j, CThostFtdcQryLinkManField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));

}



void to_json(json& j, const CThostFtdcLinkManField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"PersonType", std::string(1, p.PersonType)},
           {"IdentifiedCardType", std::string(1, p.IdentifiedCardType)},
           {"IdentifiedCardNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.IdentifiedCardNo)},
           {"PersonName", codec_convert("UTF-8//TRANSLIT", "GBK", p.PersonName)},
           {"Telephone", codec_convert("UTF-8//TRANSLIT", "GBK", p.Telephone)},
           {"Address", codec_convert("UTF-8//TRANSLIT", "GBK", p.Address)},
           {"ZipCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.ZipCode)},
           {"Priority", p.Priority},
           {"UOAZipCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.UOAZipCode)},
           {"PersonFullName", codec_convert("UTF-8//TRANSLIT", "GBK", p.PersonFullName)},
  };
}

void from_json(const json& j, CThostFtdcLinkManField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("PersonType").get_ref<const std::string &>();
  p.PersonType = v2.at(0);
  auto &v3 = j.at("IdentifiedCardType").get_ref<const std::string &>();
  p.IdentifiedCardType = v3.at(0);
  auto &v4 = j.at("IdentifiedCardNo").get_ref<const std::string &>();
  std::strncpy(p.IdentifiedCardNo, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.IdentifiedCardNo));
  auto &v5 = j.at("PersonName").get_ref<const std::string &>();
  std::strncpy(p.PersonName, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.PersonName));
  auto &v6 = j.at("Telephone").get_ref<const std::string &>();
  std::strncpy(p.Telephone, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.Telephone));
  auto &v7 = j.at("Address").get_ref<const std::string &>();
  std::strncpy(p.Address, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.Address));
  auto &v8 = j.at("ZipCode").get_ref<const std::string &>();
  std::strncpy(p.ZipCode, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.ZipCode));
  j.at("Priority").get_to(p.Priority);
  auto &v10 = j.at("UOAZipCode").get_ref<const std::string &>();
  std::strncpy(p.UOAZipCode, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.UOAZipCode));
  auto &v11 = j.at("PersonFullName").get_ref<const std::string &>();
  std::strncpy(p.PersonFullName, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.PersonFullName));

}



void to_json(json& j, const CThostFtdcQryBrokerUserEventField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"UserEventType", std::string(1, p.UserEventType)},
  };
}

void from_json(const json& j, CThostFtdcQryBrokerUserEventField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.UserID));
  auto &v2 = j.at("UserEventType").get_ref<const std::string &>();
  p.UserEventType = v2.at(0);

}



void to_json(json& j, const CThostFtdcBrokerUserEventField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"UserEventType", std::string(1, p.UserEventType)},
           {"EventSequenceNo", p.EventSequenceNo},
           {"EventDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.EventDate)},
           {"EventTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.EventTime)},
           {"UserEventInfo", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserEventInfo)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"DRIdentityID", p.DRIdentityID},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
  };
}

void from_json(const json& j, CThostFtdcBrokerUserEventField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.UserID));
  auto &v2 = j.at("UserEventType").get_ref<const std::string &>();
  p.UserEventType = v2.at(0);
  j.at("EventSequenceNo").get_to(p.EventSequenceNo);
  auto &v4 = j.at("EventDate").get_ref<const std::string &>();
  std::strncpy(p.EventDate, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.EventDate));
  auto &v5 = j.at("EventTime").get_ref<const std::string &>();
  std::strncpy(p.EventTime, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.EventTime));
  auto &v6 = j.at("UserEventInfo").get_ref<const std::string &>();
  std::strncpy(p.UserEventInfo, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.UserEventInfo));
  auto &v7 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v8 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.reserve1));
  auto &v9 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.InstrumentID));
  j.at("DRIdentityID").get_to(p.DRIdentityID);
  auto &v11 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.TradingDay));

}



void to_json(json& j, const CThostFtdcQryContractBankField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBrchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBrchID)},
  };
}

void from_json(const json& j, CThostFtdcQryContractBankField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BankID));
  auto &v2 = j.at("BankBrchID").get_ref<const std::string &>();
  std::strncpy(p.BankBrchID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BankBrchID));

}



void to_json(json& j, const CThostFtdcContractBankField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBrchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBrchID)},
           {"BankName", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankName)},
  };
}

void from_json(const json& j, CThostFtdcContractBankField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BankID));
  auto &v2 = j.at("BankBrchID").get_ref<const std::string &>();
  std::strncpy(p.BankBrchID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BankBrchID));
  auto &v3 = j.at("BankName").get_ref<const std::string &>();
  std::strncpy(p.BankName, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.BankName));

}



void to_json(json& j, const CThostFtdcInvestorPositionCombineDetailField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"OpenDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.OpenDate)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"SettlementID", p.SettlementID},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"ComTradeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ComTradeID)},
           {"TradeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"Direction", std::string(1, p.Direction)},
           {"TotalAmt", p.TotalAmt},
           {"Margin", p.Margin},
           {"ExchMargin", p.ExchMargin},
           {"MarginRateByMoney", p.MarginRateByMoney},
           {"MarginRateByVolume", p.MarginRateByVolume},
           {"LegID", p.LegID},
           {"LegMultiple", p.LegMultiple},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"TradeGroupID", p.TradeGroupID},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"CombInstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombInstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcInvestorPositionCombineDetailField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("OpenDate").get_ref<const std::string &>();
  std::strncpy(p.OpenDate, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.OpenDate));
  auto &v2 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ExchangeID));
  j.at("SettlementID").get_to(p.SettlementID);
  auto &v4 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v5 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v6 = j.at("ComTradeID").get_ref<const std::string &>();
  std::strncpy(p.ComTradeID, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.ComTradeID));
  auto &v7 = j.at("TradeID").get_ref<const std::string &>();
  std::strncpy(p.TradeID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.TradeID));
  auto &v8 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.reserve1));
  auto &v9 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v9.at(0);
  auto &v10 = j.at("Direction").get_ref<const std::string &>();
  p.Direction = v10.at(0);
  j.at("TotalAmt").get_to(p.TotalAmt);
  j.at("Margin").get_to(p.Margin);
  j.at("ExchMargin").get_to(p.ExchMargin);
  j.at("MarginRateByMoney").get_to(p.MarginRateByMoney);
  j.at("MarginRateByVolume").get_to(p.MarginRateByVolume);
  j.at("LegID").get_to(p.LegID);
  j.at("LegMultiple").get_to(p.LegMultiple);
  auto &v18 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.reserve2));
  j.at("TradeGroupID").get_to(p.TradeGroupID);
  auto &v20 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v20.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v21 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v21.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v22 = j.at("CombInstrumentID").get_ref<const std::string &>();
  std::strncpy(p.CombInstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.CombInstrumentID));

}



void to_json(json& j, const CThostFtdcParkedOrderField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"OrderRef", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderRef)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"OrderPriceType", std::string(1, p.OrderPriceType)},
           {"Direction", std::string(1, p.Direction)},
           {"CombOffsetFlag", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombOffsetFlag)},
           {"CombHedgeFlag", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombHedgeFlag)},
           {"LimitPrice", p.LimitPrice},
           {"VolumeTotalOriginal", p.VolumeTotalOriginal},
           {"TimeCondition", std::string(1, p.TimeCondition)},
           {"GTDDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.GTDDate)},
           {"VolumeCondition", std::string(1, p.VolumeCondition)},
           {"MinVolume", p.MinVolume},
           {"ContingentCondition", std::string(1, p.ContingentCondition)},
           {"StopPrice", p.StopPrice},
           {"ForceCloseReason", std::string(1, p.ForceCloseReason)},
           {"IsAutoSuspend", p.IsAutoSuspend},
           {"BusinessUnit", codec_convert("UTF-8//TRANSLIT", "GBK", p.BusinessUnit)},
           {"RequestID", p.RequestID},
           {"UserForceClose", p.UserForceClose},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ParkedOrderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParkedOrderID)},
           {"UserType", std::string(1, p.UserType)},
           {"Status", std::string(1, p.Status)},
           {"ErrorID", p.ErrorID},
           {"ErrorMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.ErrorMsg)},
           {"IsSwapOrder", p.IsSwapOrder},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
  };
}

void from_json(const json& j, CThostFtdcParkedOrderField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("OrderRef").get_ref<const std::string &>();
  std::strncpy(p.OrderRef, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.OrderRef));
  auto &v4 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.UserID));
  auto &v5 = j.at("OrderPriceType").get_ref<const std::string &>();
  p.OrderPriceType = v5.at(0);
  auto &v6 = j.at("Direction").get_ref<const std::string &>();
  p.Direction = v6.at(0);
  auto &v7 = j.at("CombOffsetFlag").get_ref<const std::string &>();
  std::strncpy(p.CombOffsetFlag, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.CombOffsetFlag));
  auto &v8 = j.at("CombHedgeFlag").get_ref<const std::string &>();
  std::strncpy(p.CombHedgeFlag, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.CombHedgeFlag));
  j.at("LimitPrice").get_to(p.LimitPrice);
  j.at("VolumeTotalOriginal").get_to(p.VolumeTotalOriginal);
  auto &v11 = j.at("TimeCondition").get_ref<const std::string &>();
  p.TimeCondition = v11.at(0);
  auto &v12 = j.at("GTDDate").get_ref<const std::string &>();
  std::strncpy(p.GTDDate, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.GTDDate));
  auto &v13 = j.at("VolumeCondition").get_ref<const std::string &>();
  p.VolumeCondition = v13.at(0);
  j.at("MinVolume").get_to(p.MinVolume);
  auto &v15 = j.at("ContingentCondition").get_ref<const std::string &>();
  p.ContingentCondition = v15.at(0);
  j.at("StopPrice").get_to(p.StopPrice);
  auto &v17 = j.at("ForceCloseReason").get_ref<const std::string &>();
  p.ForceCloseReason = v17.at(0);
  j.at("IsAutoSuspend").get_to(p.IsAutoSuspend);
  auto &v19 = j.at("BusinessUnit").get_ref<const std::string &>();
  std::strncpy(p.BusinessUnit, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.BusinessUnit));
  j.at("RequestID").get_to(p.RequestID);
  j.at("UserForceClose").get_to(p.UserForceClose);
  auto &v22 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v23 = j.at("ParkedOrderID").get_ref<const std::string &>();
  std::strncpy(p.ParkedOrderID, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.ParkedOrderID));
  auto &v24 = j.at("UserType").get_ref<const std::string &>();
  p.UserType = v24.at(0);
  auto &v25 = j.at("Status").get_ref<const std::string &>();
  p.Status = v25.at(0);
  j.at("ErrorID").get_to(p.ErrorID);
  auto &v27 = j.at("ErrorMsg").get_ref<const std::string &>();
  std::strncpy(p.ErrorMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v27.c_str()).c_str(), sizeof(p.ErrorMsg));
  j.at("IsSwapOrder").get_to(p.IsSwapOrder);
  auto &v29 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v29.c_str()).c_str(), sizeof(p.AccountID));
  auto &v30 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v30.c_str()).c_str(), sizeof(p.CurrencyID));
  auto &v31 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v31.c_str()).c_str(), sizeof(p.ClientID));
  auto &v32 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v32.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v33 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v33.c_str()).c_str(), sizeof(p.reserve2));
  auto &v34 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v34.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v35 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v35.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v36 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v36.c_str()).c_str(), sizeof(p.IPAddress));

}



void to_json(json& j, const CThostFtdcParkedOrderActionField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"OrderActionRef", p.OrderActionRef},
           {"OrderRef", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderRef)},
           {"RequestID", p.RequestID},
           {"FrontID", p.FrontID},
           {"SessionID", p.SessionID},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"OrderSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderSysID)},
           {"ActionFlag", std::string(1, p.ActionFlag)},
           {"LimitPrice", p.LimitPrice},
           {"VolumeChange", p.VolumeChange},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ParkedOrderActionID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParkedOrderActionID)},
           {"UserType", std::string(1, p.UserType)},
           {"Status", std::string(1, p.Status)},
           {"ErrorID", p.ErrorID},
           {"ErrorMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.ErrorMsg)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
  };
}

void from_json(const json& j, CThostFtdcParkedOrderActionField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  j.at("OrderActionRef").get_to(p.OrderActionRef);
  auto &v3 = j.at("OrderRef").get_ref<const std::string &>();
  std::strncpy(p.OrderRef, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.OrderRef));
  j.at("RequestID").get_to(p.RequestID);
  j.at("FrontID").get_to(p.FrontID);
  j.at("SessionID").get_to(p.SessionID);
  auto &v7 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v8 = j.at("OrderSysID").get_ref<const std::string &>();
  std::strncpy(p.OrderSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.OrderSysID));
  auto &v9 = j.at("ActionFlag").get_ref<const std::string &>();
  p.ActionFlag = v9.at(0);
  j.at("LimitPrice").get_to(p.LimitPrice);
  j.at("VolumeChange").get_to(p.VolumeChange);
  auto &v12 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.UserID));
  auto &v13 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.reserve1));
  auto &v14 = j.at("ParkedOrderActionID").get_ref<const std::string &>();
  std::strncpy(p.ParkedOrderActionID, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.ParkedOrderActionID));
  auto &v15 = j.at("UserType").get_ref<const std::string &>();
  p.UserType = v15.at(0);
  auto &v16 = j.at("Status").get_ref<const std::string &>();
  p.Status = v16.at(0);
  j.at("ErrorID").get_to(p.ErrorID);
  auto &v18 = j.at("ErrorMsg").get_ref<const std::string &>();
  std::strncpy(p.ErrorMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.ErrorMsg));
  auto &v19 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v20 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v20.c_str()).c_str(), sizeof(p.reserve2));
  auto &v21 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v21.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v22 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v23 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.IPAddress));

}



void to_json(json& j, const CThostFtdcQryParkedOrderField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQryParkedOrderField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v4 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v5 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcQryParkedOrderActionField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQryParkedOrderActionField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v4 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v5 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcRemoveParkedOrderField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"ParkedOrderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParkedOrderID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
  };
}

void from_json(const json& j, CThostFtdcRemoveParkedOrderField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("ParkedOrderID").get_ref<const std::string &>();
  std::strncpy(p.ParkedOrderID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ParkedOrderID));
  auto &v3 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InvestUnitID));

}



void to_json(json& j, const CThostFtdcRemoveParkedOrderActionField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"ParkedOrderActionID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParkedOrderActionID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
  };
}

void from_json(const json& j, CThostFtdcRemoveParkedOrderActionField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("ParkedOrderActionID").get_ref<const std::string &>();
  std::strncpy(p.ParkedOrderActionID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ParkedOrderActionID));
  auto &v3 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InvestUnitID));

}



void to_json(json& j, const CThostFtdcInvestorWithdrawAlgorithmField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorRange", std::string(1, p.InvestorRange)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"UsingRatio", p.UsingRatio},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"FundMortgageRatio", p.FundMortgageRatio},
  };
}

void from_json(const json& j, CThostFtdcInvestorWithdrawAlgorithmField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorRange").get_ref<const std::string &>();
  p.InvestorRange = v1.at(0);
  auto &v2 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorID));
  j.at("UsingRatio").get_to(p.UsingRatio);
  auto &v4 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.CurrencyID));
  j.at("FundMortgageRatio").get_to(p.FundMortgageRatio);

}



void to_json(json& j, const CThostFtdcQryInvestorPositionCombineDetailField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"CombInstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombInstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQryInvestorPositionCombineDetailField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v4 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v5 = j.at("CombInstrumentID").get_ref<const std::string &>();
  std::strncpy(p.CombInstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.CombInstrumentID));

}



void to_json(json& j, const CThostFtdcMarketDataAveragePriceField& p) {
  j = json{
           {"AveragePrice", p.AveragePrice},
  };
}

void from_json(const json& j, CThostFtdcMarketDataAveragePriceField& p) {
  j.at("AveragePrice").get_to(p.AveragePrice);

}



void to_json(json& j, const CThostFtdcVerifyInvestorPasswordField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"Password", codec_convert("UTF-8//TRANSLIT", "GBK", p.Password)},
  };
}

void from_json(const json& j, CThostFtdcVerifyInvestorPasswordField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("Password").get_ref<const std::string &>();
  std::strncpy(p.Password, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.Password));

}



void to_json(json& j, const CThostFtdcUserIPField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
           {"IPMask", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPMask)},
  };
}

void from_json(const json& j, CThostFtdcUserIPField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.UserID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.reserve2));
  auto &v4 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v5 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.IPAddress));
  auto &v6 = j.at("IPMask").get_ref<const std::string &>();
  std::strncpy(p.IPMask, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.IPMask));

}



void to_json(json& j, const CThostFtdcTradingNoticeInfoField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"SendTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.SendTime)},
           {"FieldContent", codec_convert("UTF-8//TRANSLIT", "GBK", p.FieldContent)},
           {"SequenceSeries", p.SequenceSeries},
           {"SequenceNo", p.SequenceNo},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
  };
}

void from_json(const json& j, CThostFtdcTradingNoticeInfoField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("SendTime").get_ref<const std::string &>();
  std::strncpy(p.SendTime, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.SendTime));
  auto &v3 = j.at("FieldContent").get_ref<const std::string &>();
  std::strncpy(p.FieldContent, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.FieldContent));
  j.at("SequenceSeries").get_to(p.SequenceSeries);
  j.at("SequenceNo").get_to(p.SequenceNo);
  auto &v6 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.InvestUnitID));

}



void to_json(json& j, const CThostFtdcTradingNoticeField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorRange", std::string(1, p.InvestorRange)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"SequenceSeries", p.SequenceSeries},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"SendTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.SendTime)},
           {"SequenceNo", p.SequenceNo},
           {"FieldContent", codec_convert("UTF-8//TRANSLIT", "GBK", p.FieldContent)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
  };
}

void from_json(const json& j, CThostFtdcTradingNoticeField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorRange").get_ref<const std::string &>();
  p.InvestorRange = v1.at(0);
  auto &v2 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorID));
  j.at("SequenceSeries").get_to(p.SequenceSeries);
  auto &v4 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.UserID));
  auto &v5 = j.at("SendTime").get_ref<const std::string &>();
  std::strncpy(p.SendTime, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.SendTime));
  j.at("SequenceNo").get_to(p.SequenceNo);
  auto &v7 = j.at("FieldContent").get_ref<const std::string &>();
  std::strncpy(p.FieldContent, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.FieldContent));
  auto &v8 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.InvestUnitID));

}



void to_json(json& j, const CThostFtdcQryTradingNoticeField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
  };
}

void from_json(const json& j, CThostFtdcQryTradingNoticeField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestUnitID));

}



void to_json(json& j, const CThostFtdcQryErrOrderField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
  };
}

void from_json(const json& j, CThostFtdcQryErrOrderField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));

}



void to_json(json& j, const CThostFtdcErrOrderField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"OrderRef", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderRef)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"OrderPriceType", std::string(1, p.OrderPriceType)},
           {"Direction", std::string(1, p.Direction)},
           {"CombOffsetFlag", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombOffsetFlag)},
           {"CombHedgeFlag", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombHedgeFlag)},
           {"LimitPrice", p.LimitPrice},
           {"VolumeTotalOriginal", p.VolumeTotalOriginal},
           {"TimeCondition", std::string(1, p.TimeCondition)},
           {"GTDDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.GTDDate)},
           {"VolumeCondition", std::string(1, p.VolumeCondition)},
           {"MinVolume", p.MinVolume},
           {"ContingentCondition", std::string(1, p.ContingentCondition)},
           {"StopPrice", p.StopPrice},
           {"ForceCloseReason", std::string(1, p.ForceCloseReason)},
           {"IsAutoSuspend", p.IsAutoSuspend},
           {"BusinessUnit", codec_convert("UTF-8//TRANSLIT", "GBK", p.BusinessUnit)},
           {"RequestID", p.RequestID},
           {"UserForceClose", p.UserForceClose},
           {"ErrorID", p.ErrorID},
           {"ErrorMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.ErrorMsg)},
           {"IsSwapOrder", p.IsSwapOrder},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
           {"OrderMemo", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderMemo)},
           {"SessionReqSeq", p.SessionReqSeq},
  };
}

void from_json(const json& j, CThostFtdcErrOrderField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("OrderRef").get_ref<const std::string &>();
  std::strncpy(p.OrderRef, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.OrderRef));
  auto &v4 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.UserID));
  auto &v5 = j.at("OrderPriceType").get_ref<const std::string &>();
  p.OrderPriceType = v5.at(0);
  auto &v6 = j.at("Direction").get_ref<const std::string &>();
  p.Direction = v6.at(0);
  auto &v7 = j.at("CombOffsetFlag").get_ref<const std::string &>();
  std::strncpy(p.CombOffsetFlag, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.CombOffsetFlag));
  auto &v8 = j.at("CombHedgeFlag").get_ref<const std::string &>();
  std::strncpy(p.CombHedgeFlag, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.CombHedgeFlag));
  j.at("LimitPrice").get_to(p.LimitPrice);
  j.at("VolumeTotalOriginal").get_to(p.VolumeTotalOriginal);
  auto &v11 = j.at("TimeCondition").get_ref<const std::string &>();
  p.TimeCondition = v11.at(0);
  auto &v12 = j.at("GTDDate").get_ref<const std::string &>();
  std::strncpy(p.GTDDate, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.GTDDate));
  auto &v13 = j.at("VolumeCondition").get_ref<const std::string &>();
  p.VolumeCondition = v13.at(0);
  j.at("MinVolume").get_to(p.MinVolume);
  auto &v15 = j.at("ContingentCondition").get_ref<const std::string &>();
  p.ContingentCondition = v15.at(0);
  j.at("StopPrice").get_to(p.StopPrice);
  auto &v17 = j.at("ForceCloseReason").get_ref<const std::string &>();
  p.ForceCloseReason = v17.at(0);
  j.at("IsAutoSuspend").get_to(p.IsAutoSuspend);
  auto &v19 = j.at("BusinessUnit").get_ref<const std::string &>();
  std::strncpy(p.BusinessUnit, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.BusinessUnit));
  j.at("RequestID").get_to(p.RequestID);
  j.at("UserForceClose").get_to(p.UserForceClose);
  j.at("ErrorID").get_to(p.ErrorID);
  auto &v23 = j.at("ErrorMsg").get_ref<const std::string &>();
  std::strncpy(p.ErrorMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.ErrorMsg));
  j.at("IsSwapOrder").get_to(p.IsSwapOrder);
  auto &v25 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v25.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v26 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v26.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v27 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v27.c_str()).c_str(), sizeof(p.AccountID));
  auto &v28 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v28.c_str()).c_str(), sizeof(p.CurrencyID));
  auto &v29 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v29.c_str()).c_str(), sizeof(p.ClientID));
  auto &v30 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v30.c_str()).c_str(), sizeof(p.reserve2));
  auto &v31 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v31.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v32 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v32.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v33 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v33.c_str()).c_str(), sizeof(p.IPAddress));
  auto &v34 = j.at("OrderMemo").get_ref<const std::string &>();
  std::strncpy(p.OrderMemo, codec_convert("GBK//TRANSLIT", "UTF-8", v34.c_str()).c_str(), sizeof(p.OrderMemo));
  j.at("SessionReqSeq").get_to(p.SessionReqSeq);

}



void to_json(json& j, const CThostFtdcErrorConditionalOrderField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"OrderRef", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderRef)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"OrderPriceType", std::string(1, p.OrderPriceType)},
           {"Direction", std::string(1, p.Direction)},
           {"CombOffsetFlag", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombOffsetFlag)},
           {"CombHedgeFlag", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombHedgeFlag)},
           {"LimitPrice", p.LimitPrice},
           {"VolumeTotalOriginal", p.VolumeTotalOriginal},
           {"TimeCondition", std::string(1, p.TimeCondition)},
           {"GTDDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.GTDDate)},
           {"VolumeCondition", std::string(1, p.VolumeCondition)},
           {"MinVolume", p.MinVolume},
           {"ContingentCondition", std::string(1, p.ContingentCondition)},
           {"StopPrice", p.StopPrice},
           {"ForceCloseReason", std::string(1, p.ForceCloseReason)},
           {"IsAutoSuspend", p.IsAutoSuspend},
           {"BusinessUnit", codec_convert("UTF-8//TRANSLIT", "GBK", p.BusinessUnit)},
           {"RequestID", p.RequestID},
           {"OrderLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderLocalID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"InstallID", p.InstallID},
           {"OrderSubmitStatus", std::string(1, p.OrderSubmitStatus)},
           {"NotifySequence", p.NotifySequence},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"SettlementID", p.SettlementID},
           {"OrderSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderSysID)},
           {"OrderSource", std::string(1, p.OrderSource)},
           {"OrderStatus", std::string(1, p.OrderStatus)},
           {"OrderType", std::string(1, p.OrderType)},
           {"VolumeTraded", p.VolumeTraded},
           {"VolumeTotal", p.VolumeTotal},
           {"InsertDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.InsertDate)},
           {"InsertTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.InsertTime)},
           {"ActiveTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActiveTime)},
           {"SuspendTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.SuspendTime)},
           {"UpdateTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.UpdateTime)},
           {"CancelTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.CancelTime)},
           {"ActiveTraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActiveTraderID)},
           {"ClearingPartID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClearingPartID)},
           {"SequenceNo", p.SequenceNo},
           {"FrontID", p.FrontID},
           {"SessionID", p.SessionID},
           {"UserProductInfo", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserProductInfo)},
           {"StatusMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.StatusMsg)},
           {"UserForceClose", p.UserForceClose},
           {"ActiveUserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActiveUserID)},
           {"BrokerOrderSeq", p.BrokerOrderSeq},
           {"RelativeOrderSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.RelativeOrderSysID)},
           {"ZCETotalTradedVolume", p.ZCETotalTradedVolume},
           {"ErrorID", p.ErrorID},
           {"ErrorMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.ErrorMsg)},
           {"IsSwapOrder", p.IsSwapOrder},
           {"BranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BranchID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"reserve3", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve3)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"ExchangeInstID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeInstID)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
  };
}

void from_json(const json& j, CThostFtdcErrorConditionalOrderField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("OrderRef").get_ref<const std::string &>();
  std::strncpy(p.OrderRef, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.OrderRef));
  auto &v4 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.UserID));
  auto &v5 = j.at("OrderPriceType").get_ref<const std::string &>();
  p.OrderPriceType = v5.at(0);
  auto &v6 = j.at("Direction").get_ref<const std::string &>();
  p.Direction = v6.at(0);
  auto &v7 = j.at("CombOffsetFlag").get_ref<const std::string &>();
  std::strncpy(p.CombOffsetFlag, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.CombOffsetFlag));
  auto &v8 = j.at("CombHedgeFlag").get_ref<const std::string &>();
  std::strncpy(p.CombHedgeFlag, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.CombHedgeFlag));
  j.at("LimitPrice").get_to(p.LimitPrice);
  j.at("VolumeTotalOriginal").get_to(p.VolumeTotalOriginal);
  auto &v11 = j.at("TimeCondition").get_ref<const std::string &>();
  p.TimeCondition = v11.at(0);
  auto &v12 = j.at("GTDDate").get_ref<const std::string &>();
  std::strncpy(p.GTDDate, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.GTDDate));
  auto &v13 = j.at("VolumeCondition").get_ref<const std::string &>();
  p.VolumeCondition = v13.at(0);
  j.at("MinVolume").get_to(p.MinVolume);
  auto &v15 = j.at("ContingentCondition").get_ref<const std::string &>();
  p.ContingentCondition = v15.at(0);
  j.at("StopPrice").get_to(p.StopPrice);
  auto &v17 = j.at("ForceCloseReason").get_ref<const std::string &>();
  p.ForceCloseReason = v17.at(0);
  j.at("IsAutoSuspend").get_to(p.IsAutoSuspend);
  auto &v19 = j.at("BusinessUnit").get_ref<const std::string &>();
  std::strncpy(p.BusinessUnit, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.BusinessUnit));
  j.at("RequestID").get_to(p.RequestID);
  auto &v21 = j.at("OrderLocalID").get_ref<const std::string &>();
  std::strncpy(p.OrderLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v21.c_str()).c_str(), sizeof(p.OrderLocalID));
  auto &v22 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v23 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v24 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v24.c_str()).c_str(), sizeof(p.ClientID));
  auto &v25 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v25.c_str()).c_str(), sizeof(p.reserve2));
  auto &v26 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v26.c_str()).c_str(), sizeof(p.TraderID));
  j.at("InstallID").get_to(p.InstallID);
  auto &v28 = j.at("OrderSubmitStatus").get_ref<const std::string &>();
  p.OrderSubmitStatus = v28.at(0);
  j.at("NotifySequence").get_to(p.NotifySequence);
  auto &v30 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v30.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("SettlementID").get_to(p.SettlementID);
  auto &v32 = j.at("OrderSysID").get_ref<const std::string &>();
  std::strncpy(p.OrderSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v32.c_str()).c_str(), sizeof(p.OrderSysID));
  auto &v33 = j.at("OrderSource").get_ref<const std::string &>();
  p.OrderSource = v33.at(0);
  auto &v34 = j.at("OrderStatus").get_ref<const std::string &>();
  p.OrderStatus = v34.at(0);
  auto &v35 = j.at("OrderType").get_ref<const std::string &>();
  p.OrderType = v35.at(0);
  j.at("VolumeTraded").get_to(p.VolumeTraded);
  j.at("VolumeTotal").get_to(p.VolumeTotal);
  auto &v38 = j.at("InsertDate").get_ref<const std::string &>();
  std::strncpy(p.InsertDate, codec_convert("GBK//TRANSLIT", "UTF-8", v38.c_str()).c_str(), sizeof(p.InsertDate));
  auto &v39 = j.at("InsertTime").get_ref<const std::string &>();
  std::strncpy(p.InsertTime, codec_convert("GBK//TRANSLIT", "UTF-8", v39.c_str()).c_str(), sizeof(p.InsertTime));
  auto &v40 = j.at("ActiveTime").get_ref<const std::string &>();
  std::strncpy(p.ActiveTime, codec_convert("GBK//TRANSLIT", "UTF-8", v40.c_str()).c_str(), sizeof(p.ActiveTime));
  auto &v41 = j.at("SuspendTime").get_ref<const std::string &>();
  std::strncpy(p.SuspendTime, codec_convert("GBK//TRANSLIT", "UTF-8", v41.c_str()).c_str(), sizeof(p.SuspendTime));
  auto &v42 = j.at("UpdateTime").get_ref<const std::string &>();
  std::strncpy(p.UpdateTime, codec_convert("GBK//TRANSLIT", "UTF-8", v42.c_str()).c_str(), sizeof(p.UpdateTime));
  auto &v43 = j.at("CancelTime").get_ref<const std::string &>();
  std::strncpy(p.CancelTime, codec_convert("GBK//TRANSLIT", "UTF-8", v43.c_str()).c_str(), sizeof(p.CancelTime));
  auto &v44 = j.at("ActiveTraderID").get_ref<const std::string &>();
  std::strncpy(p.ActiveTraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v44.c_str()).c_str(), sizeof(p.ActiveTraderID));
  auto &v45 = j.at("ClearingPartID").get_ref<const std::string &>();
  std::strncpy(p.ClearingPartID, codec_convert("GBK//TRANSLIT", "UTF-8", v45.c_str()).c_str(), sizeof(p.ClearingPartID));
  j.at("SequenceNo").get_to(p.SequenceNo);
  j.at("FrontID").get_to(p.FrontID);
  j.at("SessionID").get_to(p.SessionID);
  auto &v49 = j.at("UserProductInfo").get_ref<const std::string &>();
  std::strncpy(p.UserProductInfo, codec_convert("GBK//TRANSLIT", "UTF-8", v49.c_str()).c_str(), sizeof(p.UserProductInfo));
  auto &v50 = j.at("StatusMsg").get_ref<const std::string &>();
  std::strncpy(p.StatusMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v50.c_str()).c_str(), sizeof(p.StatusMsg));
  j.at("UserForceClose").get_to(p.UserForceClose);
  auto &v52 = j.at("ActiveUserID").get_ref<const std::string &>();
  std::strncpy(p.ActiveUserID, codec_convert("GBK//TRANSLIT", "UTF-8", v52.c_str()).c_str(), sizeof(p.ActiveUserID));
  j.at("BrokerOrderSeq").get_to(p.BrokerOrderSeq);
  auto &v54 = j.at("RelativeOrderSysID").get_ref<const std::string &>();
  std::strncpy(p.RelativeOrderSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v54.c_str()).c_str(), sizeof(p.RelativeOrderSysID));
  j.at("ZCETotalTradedVolume").get_to(p.ZCETotalTradedVolume);
  j.at("ErrorID").get_to(p.ErrorID);
  auto &v57 = j.at("ErrorMsg").get_ref<const std::string &>();
  std::strncpy(p.ErrorMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v57.c_str()).c_str(), sizeof(p.ErrorMsg));
  j.at("IsSwapOrder").get_to(p.IsSwapOrder);
  auto &v59 = j.at("BranchID").get_ref<const std::string &>();
  std::strncpy(p.BranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v59.c_str()).c_str(), sizeof(p.BranchID));
  auto &v60 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v60.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v61 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v61.c_str()).c_str(), sizeof(p.AccountID));
  auto &v62 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v62.c_str()).c_str(), sizeof(p.CurrencyID));
  auto &v63 = j.at("reserve3").get_ref<const std::string &>();
  std::strncpy(p.reserve3, codec_convert("GBK//TRANSLIT", "UTF-8", v63.c_str()).c_str(), sizeof(p.reserve3));
  auto &v64 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v64.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v65 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v65.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v66 = j.at("ExchangeInstID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeInstID, codec_convert("GBK//TRANSLIT", "UTF-8", v66.c_str()).c_str(), sizeof(p.ExchangeInstID));
  auto &v67 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v67.c_str()).c_str(), sizeof(p.IPAddress));

}



void to_json(json& j, const CThostFtdcQryErrOrderActionField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
  };
}

void from_json(const json& j, CThostFtdcQryErrOrderActionField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));

}



void to_json(json& j, const CThostFtdcErrOrderActionField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"OrderActionRef", p.OrderActionRef},
           {"OrderRef", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderRef)},
           {"RequestID", p.RequestID},
           {"FrontID", p.FrontID},
           {"SessionID", p.SessionID},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"OrderSysID", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderSysID)},
           {"ActionFlag", std::string(1, p.ActionFlag)},
           {"LimitPrice", p.LimitPrice},
           {"VolumeChange", p.VolumeChange},
           {"ActionDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionDate)},
           {"ActionTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionTime)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"InstallID", p.InstallID},
           {"OrderLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderLocalID)},
           {"ActionLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionLocalID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"BusinessUnit", codec_convert("UTF-8//TRANSLIT", "GBK", p.BusinessUnit)},
           {"OrderActionStatus", std::string(1, p.OrderActionStatus)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"StatusMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.StatusMsg)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"BranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BranchID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"ErrorID", p.ErrorID},
           {"ErrorMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.ErrorMsg)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
           {"OrderMemo", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrderMemo)},
           {"SessionReqSeq", p.SessionReqSeq},
  };
}

void from_json(const json& j, CThostFtdcErrOrderActionField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  j.at("OrderActionRef").get_to(p.OrderActionRef);
  auto &v3 = j.at("OrderRef").get_ref<const std::string &>();
  std::strncpy(p.OrderRef, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.OrderRef));
  j.at("RequestID").get_to(p.RequestID);
  j.at("FrontID").get_to(p.FrontID);
  j.at("SessionID").get_to(p.SessionID);
  auto &v7 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v8 = j.at("OrderSysID").get_ref<const std::string &>();
  std::strncpy(p.OrderSysID, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.OrderSysID));
  auto &v9 = j.at("ActionFlag").get_ref<const std::string &>();
  p.ActionFlag = v9.at(0);
  j.at("LimitPrice").get_to(p.LimitPrice);
  j.at("VolumeChange").get_to(p.VolumeChange);
  auto &v12 = j.at("ActionDate").get_ref<const std::string &>();
  std::strncpy(p.ActionDate, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.ActionDate));
  auto &v13 = j.at("ActionTime").get_ref<const std::string &>();
  std::strncpy(p.ActionTime, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.ActionTime));
  auto &v14 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.TraderID));
  j.at("InstallID").get_to(p.InstallID);
  auto &v16 = j.at("OrderLocalID").get_ref<const std::string &>();
  std::strncpy(p.OrderLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.OrderLocalID));
  auto &v17 = j.at("ActionLocalID").get_ref<const std::string &>();
  std::strncpy(p.ActionLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.ActionLocalID));
  auto &v18 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v19 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.ClientID));
  auto &v20 = j.at("BusinessUnit").get_ref<const std::string &>();
  std::strncpy(p.BusinessUnit, codec_convert("GBK//TRANSLIT", "UTF-8", v20.c_str()).c_str(), sizeof(p.BusinessUnit));
  auto &v21 = j.at("OrderActionStatus").get_ref<const std::string &>();
  p.OrderActionStatus = v21.at(0);
  auto &v22 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.UserID));
  auto &v23 = j.at("StatusMsg").get_ref<const std::string &>();
  std::strncpy(p.StatusMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.StatusMsg));
  auto &v24 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v24.c_str()).c_str(), sizeof(p.reserve1));
  auto &v25 = j.at("BranchID").get_ref<const std::string &>();
  std::strncpy(p.BranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v25.c_str()).c_str(), sizeof(p.BranchID));
  auto &v26 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v26.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v27 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v27.c_str()).c_str(), sizeof(p.reserve2));
  auto &v28 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v28.c_str()).c_str(), sizeof(p.MacAddress));
  j.at("ErrorID").get_to(p.ErrorID);
  auto &v30 = j.at("ErrorMsg").get_ref<const std::string &>();
  std::strncpy(p.ErrorMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v30.c_str()).c_str(), sizeof(p.ErrorMsg));
  auto &v31 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v31.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v32 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v32.c_str()).c_str(), sizeof(p.IPAddress));
  auto &v33 = j.at("OrderMemo").get_ref<const std::string &>();
  std::strncpy(p.OrderMemo, codec_convert("GBK//TRANSLIT", "UTF-8", v33.c_str()).c_str(), sizeof(p.OrderMemo));
  j.at("SessionReqSeq").get_to(p.SessionReqSeq);

}



void to_json(json& j, const CThostFtdcQryExchangeSequenceField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
  };
}

void from_json(const json& j, CThostFtdcQryExchangeSequenceField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));

}



void to_json(json& j, const CThostFtdcExchangeSequenceField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"SequenceNo", p.SequenceNo},
           {"MarketStatus", std::string(1, p.MarketStatus)},
  };
}

void from_json(const json& j, CThostFtdcExchangeSequenceField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  j.at("SequenceNo").get_to(p.SequenceNo);
  auto &v2 = j.at("MarketStatus").get_ref<const std::string &>();
  p.MarketStatus = v2.at(0);

}



void to_json(json& j, const CThostFtdcQryMaxOrderVolumeWithPriceField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"Direction", std::string(1, p.Direction)},
           {"OffsetFlag", std::string(1, p.OffsetFlag)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"MaxVolume", p.MaxVolume},
           {"Price", p.Price},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQryMaxOrderVolumeWithPriceField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("Direction").get_ref<const std::string &>();
  p.Direction = v3.at(0);
  auto &v4 = j.at("OffsetFlag").get_ref<const std::string &>();
  p.OffsetFlag = v4.at(0);
  auto &v5 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v5.at(0);
  j.at("MaxVolume").get_to(p.MaxVolume);
  j.at("Price").get_to(p.Price);
  auto &v8 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v9 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v10 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcQryBrokerTradingParamsField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
  };
}

void from_json(const json& j, CThostFtdcQryBrokerTradingParamsField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.CurrencyID));
  auto &v3 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.AccountID));

}



void to_json(json& j, const CThostFtdcBrokerTradingParamsField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"MarginPriceType", std::string(1, p.MarginPriceType)},
           {"Algorithm", std::string(1, p.Algorithm)},
           {"AvailIncludeCloseProfit", std::string(1, p.AvailIncludeCloseProfit)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"OptionRoyaltyPriceType", std::string(1, p.OptionRoyaltyPriceType)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
  };
}

void from_json(const json& j, CThostFtdcBrokerTradingParamsField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("MarginPriceType").get_ref<const std::string &>();
  p.MarginPriceType = v2.at(0);
  auto &v3 = j.at("Algorithm").get_ref<const std::string &>();
  p.Algorithm = v3.at(0);
  auto &v4 = j.at("AvailIncludeCloseProfit").get_ref<const std::string &>();
  p.AvailIncludeCloseProfit = v4.at(0);
  auto &v5 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.CurrencyID));
  auto &v6 = j.at("OptionRoyaltyPriceType").get_ref<const std::string &>();
  p.OptionRoyaltyPriceType = v6.at(0);
  auto &v7 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.AccountID));

}



void to_json(json& j, const CThostFtdcQryBrokerTradingAlgosField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQryBrokerTradingAlgosField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcBrokerTradingAlgosField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"HandlePositionAlgoID", std::string(1, p.HandlePositionAlgoID)},
           {"FindMarginRateAlgoID", std::string(1, p.FindMarginRateAlgoID)},
           {"HandleTradingAccountAlgoID", std::string(1, p.HandleTradingAccountAlgoID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcBrokerTradingAlgosField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("HandlePositionAlgoID").get_ref<const std::string &>();
  p.HandlePositionAlgoID = v3.at(0);
  auto &v4 = j.at("FindMarginRateAlgoID").get_ref<const std::string &>();
  p.FindMarginRateAlgoID = v4.at(0);
  auto &v5 = j.at("HandleTradingAccountAlgoID").get_ref<const std::string &>();
  p.HandleTradingAccountAlgoID = v5.at(0);
  auto &v6 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcQueryBrokerDepositField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
  };
}

void from_json(const json& j, CThostFtdcQueryBrokerDepositField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));

}



void to_json(json& j, const CThostFtdcBrokerDepositField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"PreBalance", p.PreBalance},
           {"CurrMargin", p.CurrMargin},
           {"CloseProfit", p.CloseProfit},
           {"Balance", p.Balance},
           {"Deposit", p.Deposit},
           {"Withdraw", p.Withdraw},
           {"Available", p.Available},
           {"Reserve", p.Reserve},
           {"FrozenMargin", p.FrozenMargin},
  };
}

void from_json(const json& j, CThostFtdcBrokerDepositField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v3 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ExchangeID));
  j.at("PreBalance").get_to(p.PreBalance);
  j.at("CurrMargin").get_to(p.CurrMargin);
  j.at("CloseProfit").get_to(p.CloseProfit);
  j.at("Balance").get_to(p.Balance);
  j.at("Deposit").get_to(p.Deposit);
  j.at("Withdraw").get_to(p.Withdraw);
  j.at("Available").get_to(p.Available);
  j.at("Reserve").get_to(p.Reserve);
  j.at("FrozenMargin").get_to(p.FrozenMargin);

}



void to_json(json& j, const CThostFtdcQryCFMMCBrokerKeyField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
  };
}

void from_json(const json& j, CThostFtdcQryCFMMCBrokerKeyField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));

}



void to_json(json& j, const CThostFtdcCFMMCBrokerKeyField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"CreateDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.CreateDate)},
           {"CreateTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.CreateTime)},
           {"KeyID", p.KeyID},
           {"CurrentKey", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrentKey)},
           {"KeyKind", std::string(1, p.KeyKind)},
  };
}

void from_json(const json& j, CThostFtdcCFMMCBrokerKeyField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v2 = j.at("CreateDate").get_ref<const std::string &>();
  std::strncpy(p.CreateDate, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.CreateDate));
  auto &v3 = j.at("CreateTime").get_ref<const std::string &>();
  std::strncpy(p.CreateTime, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.CreateTime));
  j.at("KeyID").get_to(p.KeyID);
  auto &v5 = j.at("CurrentKey").get_ref<const std::string &>();
  std::strncpy(p.CurrentKey, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.CurrentKey));
  auto &v6 = j.at("KeyKind").get_ref<const std::string &>();
  p.KeyKind = v6.at(0);

}



void to_json(json& j, const CThostFtdcCFMMCTradingAccountKeyField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"KeyID", p.KeyID},
           {"CurrentKey", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrentKey)},
  };
}

void from_json(const json& j, CThostFtdcCFMMCTradingAccountKeyField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v2 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.AccountID));
  j.at("KeyID").get_to(p.KeyID);
  auto &v4 = j.at("CurrentKey").get_ref<const std::string &>();
  std::strncpy(p.CurrentKey, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.CurrentKey));

}



void to_json(json& j, const CThostFtdcQryCFMMCTradingAccountKeyField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
  };
}

void from_json(const json& j, CThostFtdcQryCFMMCTradingAccountKeyField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));

}



void to_json(json& j, const CThostFtdcBrokerUserOTPParamField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"OTPVendorsID", codec_convert("UTF-8//TRANSLIT", "GBK", p.OTPVendorsID)},
           {"SerialNumber", codec_convert("UTF-8//TRANSLIT", "GBK", p.SerialNumber)},
           {"AuthKey", codec_convert("UTF-8//TRANSLIT", "GBK", p.AuthKey)},
           {"LastDrift", p.LastDrift},
           {"LastSuccess", p.LastSuccess},
           {"OTPType", std::string(1, p.OTPType)},
  };
}

void from_json(const json& j, CThostFtdcBrokerUserOTPParamField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.UserID));
  auto &v2 = j.at("OTPVendorsID").get_ref<const std::string &>();
  std::strncpy(p.OTPVendorsID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.OTPVendorsID));
  auto &v3 = j.at("SerialNumber").get_ref<const std::string &>();
  std::strncpy(p.SerialNumber, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.SerialNumber));
  auto &v4 = j.at("AuthKey").get_ref<const std::string &>();
  std::strncpy(p.AuthKey, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.AuthKey));
  j.at("LastDrift").get_to(p.LastDrift);
  j.at("LastSuccess").get_to(p.LastSuccess);
  auto &v7 = j.at("OTPType").get_ref<const std::string &>();
  p.OTPType = v7.at(0);

}



void to_json(json& j, const CThostFtdcManualSyncBrokerUserOTPField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"OTPType", std::string(1, p.OTPType)},
           {"FirstOTP", codec_convert("UTF-8//TRANSLIT", "GBK", p.FirstOTP)},
           {"SecondOTP", codec_convert("UTF-8//TRANSLIT", "GBK", p.SecondOTP)},
  };
}

void from_json(const json& j, CThostFtdcManualSyncBrokerUserOTPField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.UserID));
  auto &v2 = j.at("OTPType").get_ref<const std::string &>();
  p.OTPType = v2.at(0);
  auto &v3 = j.at("FirstOTP").get_ref<const std::string &>();
  std::strncpy(p.FirstOTP, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.FirstOTP));
  auto &v4 = j.at("SecondOTP").get_ref<const std::string &>();
  std::strncpy(p.SecondOTP, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.SecondOTP));

}



void to_json(json& j, const CThostFtdcCommRateModelField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"CommModelID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CommModelID)},
           {"CommModelName", codec_convert("UTF-8//TRANSLIT", "GBK", p.CommModelName)},
  };
}

void from_json(const json& j, CThostFtdcCommRateModelField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("CommModelID").get_ref<const std::string &>();
  std::strncpy(p.CommModelID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.CommModelID));
  auto &v2 = j.at("CommModelName").get_ref<const std::string &>();
  std::strncpy(p.CommModelName, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.CommModelName));

}



void to_json(json& j, const CThostFtdcQryCommRateModelField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"CommModelID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CommModelID)},
  };
}

void from_json(const json& j, CThostFtdcQryCommRateModelField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("CommModelID").get_ref<const std::string &>();
  std::strncpy(p.CommModelID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.CommModelID));

}



void to_json(json& j, const CThostFtdcMarginModelField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"MarginModelID", codec_convert("UTF-8//TRANSLIT", "GBK", p.MarginModelID)},
           {"MarginModelName", codec_convert("UTF-8//TRANSLIT", "GBK", p.MarginModelName)},
  };
}

void from_json(const json& j, CThostFtdcMarginModelField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("MarginModelID").get_ref<const std::string &>();
  std::strncpy(p.MarginModelID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.MarginModelID));
  auto &v2 = j.at("MarginModelName").get_ref<const std::string &>();
  std::strncpy(p.MarginModelName, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.MarginModelName));

}



void to_json(json& j, const CThostFtdcQryMarginModelField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"MarginModelID", codec_convert("UTF-8//TRANSLIT", "GBK", p.MarginModelID)},
  };
}

void from_json(const json& j, CThostFtdcQryMarginModelField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("MarginModelID").get_ref<const std::string &>();
  std::strncpy(p.MarginModelID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.MarginModelID));

}



void to_json(json& j, const CThostFtdcEWarrantOffsetField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"Direction", std::string(1, p.Direction)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"Volume", p.Volume},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcEWarrantOffsetField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v3 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v4 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.reserve1));
  auto &v5 = j.at("Direction").get_ref<const std::string &>();
  p.Direction = v5.at(0);
  auto &v6 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v6.at(0);
  j.at("Volume").get_to(p.Volume);
  auto &v8 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v9 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcQryEWarrantOffsetField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQryEWarrantOffsetField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v3 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.reserve1));
  auto &v4 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v5 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcQryInvestorProductGroupMarginField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"ProductGroupID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductGroupID)},
  };
}

void from_json(const json& j, CThostFtdcQryInvestorProductGroupMarginField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v3.at(0);
  auto &v4 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v5 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v6 = j.at("ProductGroupID").get_ref<const std::string &>();
  std::strncpy(p.ProductGroupID, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.ProductGroupID));

}



void to_json(json& j, const CThostFtdcInvestorProductGroupMarginField& p) {
  j = json{
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"SettlementID", p.SettlementID},
           {"FrozenMargin", p.FrozenMargin},
           {"LongFrozenMargin", p.LongFrozenMargin},
           {"ShortFrozenMargin", p.ShortFrozenMargin},
           {"UseMargin", p.UseMargin},
           {"LongUseMargin", p.LongUseMargin},
           {"ShortUseMargin", p.ShortUseMargin},
           {"ExchMargin", p.ExchMargin},
           {"LongExchMargin", p.LongExchMargin},
           {"ShortExchMargin", p.ShortExchMargin},
           {"CloseProfit", p.CloseProfit},
           {"FrozenCommission", p.FrozenCommission},
           {"Commission", p.Commission},
           {"FrozenCash", p.FrozenCash},
           {"CashIn", p.CashIn},
           {"PositionProfit", p.PositionProfit},
           {"OffsetAmount", p.OffsetAmount},
           {"LongOffsetAmount", p.LongOffsetAmount},
           {"ShortOffsetAmount", p.ShortOffsetAmount},
           {"ExchOffsetAmount", p.ExchOffsetAmount},
           {"LongExchOffsetAmount", p.LongExchOffsetAmount},
           {"ShortExchOffsetAmount", p.ShortExchOffsetAmount},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"ProductGroupID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductGroupID)},
  };
}

void from_json(const json& j, CThostFtdcInvestorProductGroupMarginField& p) {
  auto &v0 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.reserve1));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v3 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("SettlementID").get_to(p.SettlementID);
  j.at("FrozenMargin").get_to(p.FrozenMargin);
  j.at("LongFrozenMargin").get_to(p.LongFrozenMargin);
  j.at("ShortFrozenMargin").get_to(p.ShortFrozenMargin);
  j.at("UseMargin").get_to(p.UseMargin);
  j.at("LongUseMargin").get_to(p.LongUseMargin);
  j.at("ShortUseMargin").get_to(p.ShortUseMargin);
  j.at("ExchMargin").get_to(p.ExchMargin);
  j.at("LongExchMargin").get_to(p.LongExchMargin);
  j.at("ShortExchMargin").get_to(p.ShortExchMargin);
  j.at("CloseProfit").get_to(p.CloseProfit);
  j.at("FrozenCommission").get_to(p.FrozenCommission);
  j.at("Commission").get_to(p.Commission);
  j.at("FrozenCash").get_to(p.FrozenCash);
  j.at("CashIn").get_to(p.CashIn);
  j.at("PositionProfit").get_to(p.PositionProfit);
  j.at("OffsetAmount").get_to(p.OffsetAmount);
  j.at("LongOffsetAmount").get_to(p.LongOffsetAmount);
  j.at("ShortOffsetAmount").get_to(p.ShortOffsetAmount);
  j.at("ExchOffsetAmount").get_to(p.ExchOffsetAmount);
  j.at("LongExchOffsetAmount").get_to(p.LongExchOffsetAmount);
  j.at("ShortExchOffsetAmount").get_to(p.ShortExchOffsetAmount);
  auto &v26 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v26.at(0);
  auto &v27 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v27.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v28 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v28.c_str()).c_str(), sizeof(p.InvestUnitID));
  auto &v29 = j.at("ProductGroupID").get_ref<const std::string &>();
  std::strncpy(p.ProductGroupID, codec_convert("GBK//TRANSLIT", "UTF-8", v29.c_str()).c_str(), sizeof(p.ProductGroupID));

}



void to_json(json& j, const CThostFtdcQueryCFMMCTradingAccountTokenField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
  };
}

void from_json(const json& j, CThostFtdcQueryCFMMCTradingAccountTokenField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestUnitID));

}



void to_json(json& j, const CThostFtdcCFMMCTradingAccountTokenField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"KeyID", p.KeyID},
           {"Token", codec_convert("UTF-8//TRANSLIT", "GBK", p.Token)},
  };
}

void from_json(const json& j, CThostFtdcCFMMCTradingAccountTokenField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v2 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.AccountID));
  j.at("KeyID").get_to(p.KeyID);
  auto &v4 = j.at("Token").get_ref<const std::string &>();
  std::strncpy(p.Token, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.Token));

}



void to_json(json& j, const CThostFtdcQryProductGroupField& p) {
  j = json{
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductID)},
  };
}

void from_json(const json& j, CThostFtdcQryProductGroupField& p) {
  auto &v0 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.reserve1));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v2 = j.at("ProductID").get_ref<const std::string &>();
  std::strncpy(p.ProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ProductID));

}



void to_json(json& j, const CThostFtdcProductGroupField& p) {
  j = json{
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"reserve2", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve2)},
           {"ProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductID)},
           {"ProductGroupID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductGroupID)},
  };
}

void from_json(const json& j, CThostFtdcProductGroupField& p) {
  auto &v0 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.reserve1));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v2 = j.at("reserve2").get_ref<const std::string &>();
  std::strncpy(p.reserve2, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve2));
  auto &v3 = j.at("ProductID").get_ref<const std::string &>();
  std::strncpy(p.ProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ProductID));
  auto &v4 = j.at("ProductGroupID").get_ref<const std::string &>();
  std::strncpy(p.ProductGroupID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.ProductGroupID));

}



void to_json(json& j, const CThostFtdcBulletinField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"BulletinID", p.BulletinID},
           {"SequenceNo", p.SequenceNo},
           {"NewsType", codec_convert("UTF-8//TRANSLIT", "GBK", p.NewsType)},
           {"NewsUrgency", std::string(1, p.NewsUrgency)},
           {"SendTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.SendTime)},
           {"Abstract", codec_convert("UTF-8//TRANSLIT", "GBK", p.Abstract)},
           {"ComeFrom", codec_convert("UTF-8//TRANSLIT", "GBK", p.ComeFrom)},
           {"Content", codec_convert("UTF-8//TRANSLIT", "GBK", p.Content)},
           {"URLLink", codec_convert("UTF-8//TRANSLIT", "GBK", p.URLLink)},
           {"MarketID", codec_convert("UTF-8//TRANSLIT", "GBK", p.MarketID)},
  };
}

void from_json(const json& j, CThostFtdcBulletinField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("BulletinID").get_to(p.BulletinID);
  j.at("SequenceNo").get_to(p.SequenceNo);
  auto &v4 = j.at("NewsType").get_ref<const std::string &>();
  std::strncpy(p.NewsType, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.NewsType));
  auto &v5 = j.at("NewsUrgency").get_ref<const std::string &>();
  p.NewsUrgency = v5.at(0);
  auto &v6 = j.at("SendTime").get_ref<const std::string &>();
  std::strncpy(p.SendTime, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.SendTime));
  auto &v7 = j.at("Abstract").get_ref<const std::string &>();
  std::strncpy(p.Abstract, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.Abstract));
  auto &v8 = j.at("ComeFrom").get_ref<const std::string &>();
  std::strncpy(p.ComeFrom, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.ComeFrom));
  auto &v9 = j.at("Content").get_ref<const std::string &>();
  std::strncpy(p.Content, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.Content));
  auto &v10 = j.at("URLLink").get_ref<const std::string &>();
  std::strncpy(p.URLLink, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.URLLink));
  auto &v11 = j.at("MarketID").get_ref<const std::string &>();
  std::strncpy(p.MarketID, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.MarketID));

}



void to_json(json& j, const CThostFtdcQryBulletinField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"BulletinID", p.BulletinID},
           {"SequenceNo", p.SequenceNo},
           {"NewsType", codec_convert("UTF-8//TRANSLIT", "GBK", p.NewsType)},
           {"NewsUrgency", std::string(1, p.NewsUrgency)},
  };
}

void from_json(const json& j, CThostFtdcQryBulletinField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  j.at("BulletinID").get_to(p.BulletinID);
  j.at("SequenceNo").get_to(p.SequenceNo);
  auto &v3 = j.at("NewsType").get_ref<const std::string &>();
  std::strncpy(p.NewsType, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.NewsType));
  auto &v4 = j.at("NewsUrgency").get_ref<const std::string &>();
  p.NewsUrgency = v4.at(0);

}



void to_json(json& j, const CThostFtdcMulticastInstrumentField& p) {
  j = json{
           {"TopicID", p.TopicID},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"InstrumentNo", p.InstrumentNo},
           {"CodePrice", p.CodePrice},
           {"VolumeMultiple", p.VolumeMultiple},
           {"PriceTick", p.PriceTick},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcMulticastInstrumentField& p) {
  j.at("TopicID").get_to(p.TopicID);
  auto &v1 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.reserve1));
  j.at("InstrumentNo").get_to(p.InstrumentNo);
  j.at("CodePrice").get_to(p.CodePrice);
  j.at("VolumeMultiple").get_to(p.VolumeMultiple);
  j.at("PriceTick").get_to(p.PriceTick);
  auto &v6 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcQryMulticastInstrumentField& p) {
  j = json{
           {"TopicID", p.TopicID},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQryMulticastInstrumentField& p) {
  j.at("TopicID").get_to(p.TopicID);
  auto &v1 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.reserve1));
  auto &v2 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcAppIDAuthAssignField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"AppID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AppID)},
           {"DRIdentityID", p.DRIdentityID},
  };
}

void from_json(const json& j, CThostFtdcAppIDAuthAssignField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("AppID").get_ref<const std::string &>();
  std::strncpy(p.AppID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.AppID));
  j.at("DRIdentityID").get_to(p.DRIdentityID);

}



void to_json(json& j, const CThostFtdcReqOpenAccountField& p) {
  j = json{
           {"TradeCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeCode)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBranchID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BrokerBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerBranchID)},
           {"TradeDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDate)},
           {"TradeTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTime)},
           {"BankSerial", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSerial)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"PlateSerial", p.PlateSerial},
           {"LastFragment", std::string(1, p.LastFragment)},
           {"SessionID", p.SessionID},
           {"CustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.CustomerName)},
           {"IdCardType", std::string(1, p.IdCardType)},
           {"IdentifiedCardNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.IdentifiedCardNo)},
           {"Gender", std::string(1, p.Gender)},
           {"CountryCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.CountryCode)},
           {"CustType", std::string(1, p.CustType)},
           {"Address", codec_convert("UTF-8//TRANSLIT", "GBK", p.Address)},
           {"ZipCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.ZipCode)},
           {"Telephone", codec_convert("UTF-8//TRANSLIT", "GBK", p.Telephone)},
           {"MobilePhone", codec_convert("UTF-8//TRANSLIT", "GBK", p.MobilePhone)},
           {"Fax", codec_convert("UTF-8//TRANSLIT", "GBK", p.Fax)},
           {"EMail", codec_convert("UTF-8//TRANSLIT", "GBK", p.EMail)},
           {"MoneyAccountStatus", std::string(1, p.MoneyAccountStatus)},
           {"BankAccount", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankAccount)},
           {"BankPassWord", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankPassWord)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"Password", codec_convert("UTF-8//TRANSLIT", "GBK", p.Password)},
           {"InstallID", p.InstallID},
           {"VerifyCertNoFlag", std::string(1, p.VerifyCertNoFlag)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"CashExchangeCode", std::string(1, p.CashExchangeCode)},
           {"Digest", codec_convert("UTF-8//TRANSLIT", "GBK", p.Digest)},
           {"BankAccType", std::string(1, p.BankAccType)},
           {"DeviceID", codec_convert("UTF-8//TRANSLIT", "GBK", p.DeviceID)},
           {"BankSecuAccType", std::string(1, p.BankSecuAccType)},
           {"BrokerIDByBank", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerIDByBank)},
           {"BankSecuAcc", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSecuAcc)},
           {"BankPwdFlag", std::string(1, p.BankPwdFlag)},
           {"SecuPwdFlag", std::string(1, p.SecuPwdFlag)},
           {"OperNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.OperNo)},
           {"TID", p.TID},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"LongCustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.LongCustomerName)},
  };
}

void from_json(const json& j, CThostFtdcReqOpenAccountField& p) {
  auto &v0 = j.at("TradeCode").get_ref<const std::string &>();
  std::strncpy(p.TradeCode, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradeCode));
  auto &v1 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BankID));
  auto &v2 = j.at("BankBranchID").get_ref<const std::string &>();
  std::strncpy(p.BankBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BankBranchID));
  auto &v3 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v4 = j.at("BrokerBranchID").get_ref<const std::string &>();
  std::strncpy(p.BrokerBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.BrokerBranchID));
  auto &v5 = j.at("TradeDate").get_ref<const std::string &>();
  std::strncpy(p.TradeDate, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.TradeDate));
  auto &v6 = j.at("TradeTime").get_ref<const std::string &>();
  std::strncpy(p.TradeTime, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.TradeTime));
  auto &v7 = j.at("BankSerial").get_ref<const std::string &>();
  std::strncpy(p.BankSerial, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BankSerial));
  auto &v8 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("PlateSerial").get_to(p.PlateSerial);
  auto &v10 = j.at("LastFragment").get_ref<const std::string &>();
  p.LastFragment = v10.at(0);
  j.at("SessionID").get_to(p.SessionID);
  auto &v12 = j.at("CustomerName").get_ref<const std::string &>();
  std::strncpy(p.CustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.CustomerName));
  auto &v13 = j.at("IdCardType").get_ref<const std::string &>();
  p.IdCardType = v13.at(0);
  auto &v14 = j.at("IdentifiedCardNo").get_ref<const std::string &>();
  std::strncpy(p.IdentifiedCardNo, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.IdentifiedCardNo));
  auto &v15 = j.at("Gender").get_ref<const std::string &>();
  p.Gender = v15.at(0);
  auto &v16 = j.at("CountryCode").get_ref<const std::string &>();
  std::strncpy(p.CountryCode, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.CountryCode));
  auto &v17 = j.at("CustType").get_ref<const std::string &>();
  p.CustType = v17.at(0);
  auto &v18 = j.at("Address").get_ref<const std::string &>();
  std::strncpy(p.Address, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.Address));
  auto &v19 = j.at("ZipCode").get_ref<const std::string &>();
  std::strncpy(p.ZipCode, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.ZipCode));
  auto &v20 = j.at("Telephone").get_ref<const std::string &>();
  std::strncpy(p.Telephone, codec_convert("GBK//TRANSLIT", "UTF-8", v20.c_str()).c_str(), sizeof(p.Telephone));
  auto &v21 = j.at("MobilePhone").get_ref<const std::string &>();
  std::strncpy(p.MobilePhone, codec_convert("GBK//TRANSLIT", "UTF-8", v21.c_str()).c_str(), sizeof(p.MobilePhone));
  auto &v22 = j.at("Fax").get_ref<const std::string &>();
  std::strncpy(p.Fax, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.Fax));
  auto &v23 = j.at("EMail").get_ref<const std::string &>();
  std::strncpy(p.EMail, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.EMail));
  auto &v24 = j.at("MoneyAccountStatus").get_ref<const std::string &>();
  p.MoneyAccountStatus = v24.at(0);
  auto &v25 = j.at("BankAccount").get_ref<const std::string &>();
  std::strncpy(p.BankAccount, codec_convert("GBK//TRANSLIT", "UTF-8", v25.c_str()).c_str(), sizeof(p.BankAccount));
  auto &v26 = j.at("BankPassWord").get_ref<const std::string &>();
  std::strncpy(p.BankPassWord, codec_convert("GBK//TRANSLIT", "UTF-8", v26.c_str()).c_str(), sizeof(p.BankPassWord));
  auto &v27 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v27.c_str()).c_str(), sizeof(p.AccountID));
  auto &v28 = j.at("Password").get_ref<const std::string &>();
  std::strncpy(p.Password, codec_convert("GBK//TRANSLIT", "UTF-8", v28.c_str()).c_str(), sizeof(p.Password));
  j.at("InstallID").get_to(p.InstallID);
  auto &v30 = j.at("VerifyCertNoFlag").get_ref<const std::string &>();
  p.VerifyCertNoFlag = v30.at(0);
  auto &v31 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v31.c_str()).c_str(), sizeof(p.CurrencyID));
  auto &v32 = j.at("CashExchangeCode").get_ref<const std::string &>();
  p.CashExchangeCode = v32.at(0);
  auto &v33 = j.at("Digest").get_ref<const std::string &>();
  std::strncpy(p.Digest, codec_convert("GBK//TRANSLIT", "UTF-8", v33.c_str()).c_str(), sizeof(p.Digest));
  auto &v34 = j.at("BankAccType").get_ref<const std::string &>();
  p.BankAccType = v34.at(0);
  auto &v35 = j.at("DeviceID").get_ref<const std::string &>();
  std::strncpy(p.DeviceID, codec_convert("GBK//TRANSLIT", "UTF-8", v35.c_str()).c_str(), sizeof(p.DeviceID));
  auto &v36 = j.at("BankSecuAccType").get_ref<const std::string &>();
  p.BankSecuAccType = v36.at(0);
  auto &v37 = j.at("BrokerIDByBank").get_ref<const std::string &>();
  std::strncpy(p.BrokerIDByBank, codec_convert("GBK//TRANSLIT", "UTF-8", v37.c_str()).c_str(), sizeof(p.BrokerIDByBank));
  auto &v38 = j.at("BankSecuAcc").get_ref<const std::string &>();
  std::strncpy(p.BankSecuAcc, codec_convert("GBK//TRANSLIT", "UTF-8", v38.c_str()).c_str(), sizeof(p.BankSecuAcc));
  auto &v39 = j.at("BankPwdFlag").get_ref<const std::string &>();
  p.BankPwdFlag = v39.at(0);
  auto &v40 = j.at("SecuPwdFlag").get_ref<const std::string &>();
  p.SecuPwdFlag = v40.at(0);
  auto &v41 = j.at("OperNo").get_ref<const std::string &>();
  std::strncpy(p.OperNo, codec_convert("GBK//TRANSLIT", "UTF-8", v41.c_str()).c_str(), sizeof(p.OperNo));
  j.at("TID").get_to(p.TID);
  auto &v43 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v43.c_str()).c_str(), sizeof(p.UserID));
  auto &v44 = j.at("LongCustomerName").get_ref<const std::string &>();
  std::strncpy(p.LongCustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v44.c_str()).c_str(), sizeof(p.LongCustomerName));

}



void to_json(json& j, const CThostFtdcReqCancelAccountField& p) {
  j = json{
           {"TradeCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeCode)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBranchID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BrokerBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerBranchID)},
           {"TradeDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDate)},
           {"TradeTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTime)},
           {"BankSerial", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSerial)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"PlateSerial", p.PlateSerial},
           {"LastFragment", std::string(1, p.LastFragment)},
           {"SessionID", p.SessionID},
           {"CustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.CustomerName)},
           {"IdCardType", std::string(1, p.IdCardType)},
           {"IdentifiedCardNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.IdentifiedCardNo)},
           {"Gender", std::string(1, p.Gender)},
           {"CountryCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.CountryCode)},
           {"CustType", std::string(1, p.CustType)},
           {"Address", codec_convert("UTF-8//TRANSLIT", "GBK", p.Address)},
           {"ZipCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.ZipCode)},
           {"Telephone", codec_convert("UTF-8//TRANSLIT", "GBK", p.Telephone)},
           {"MobilePhone", codec_convert("UTF-8//TRANSLIT", "GBK", p.MobilePhone)},
           {"Fax", codec_convert("UTF-8//TRANSLIT", "GBK", p.Fax)},
           {"EMail", codec_convert("UTF-8//TRANSLIT", "GBK", p.EMail)},
           {"MoneyAccountStatus", std::string(1, p.MoneyAccountStatus)},
           {"BankAccount", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankAccount)},
           {"BankPassWord", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankPassWord)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"Password", codec_convert("UTF-8//TRANSLIT", "GBK", p.Password)},
           {"InstallID", p.InstallID},
           {"VerifyCertNoFlag", std::string(1, p.VerifyCertNoFlag)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"CashExchangeCode", std::string(1, p.CashExchangeCode)},
           {"Digest", codec_convert("UTF-8//TRANSLIT", "GBK", p.Digest)},
           {"BankAccType", std::string(1, p.BankAccType)},
           {"DeviceID", codec_convert("UTF-8//TRANSLIT", "GBK", p.DeviceID)},
           {"BankSecuAccType", std::string(1, p.BankSecuAccType)},
           {"BrokerIDByBank", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerIDByBank)},
           {"BankSecuAcc", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSecuAcc)},
           {"BankPwdFlag", std::string(1, p.BankPwdFlag)},
           {"SecuPwdFlag", std::string(1, p.SecuPwdFlag)},
           {"OperNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.OperNo)},
           {"TID", p.TID},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"LongCustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.LongCustomerName)},
  };
}

void from_json(const json& j, CThostFtdcReqCancelAccountField& p) {
  auto &v0 = j.at("TradeCode").get_ref<const std::string &>();
  std::strncpy(p.TradeCode, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradeCode));
  auto &v1 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BankID));
  auto &v2 = j.at("BankBranchID").get_ref<const std::string &>();
  std::strncpy(p.BankBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BankBranchID));
  auto &v3 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v4 = j.at("BrokerBranchID").get_ref<const std::string &>();
  std::strncpy(p.BrokerBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.BrokerBranchID));
  auto &v5 = j.at("TradeDate").get_ref<const std::string &>();
  std::strncpy(p.TradeDate, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.TradeDate));
  auto &v6 = j.at("TradeTime").get_ref<const std::string &>();
  std::strncpy(p.TradeTime, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.TradeTime));
  auto &v7 = j.at("BankSerial").get_ref<const std::string &>();
  std::strncpy(p.BankSerial, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BankSerial));
  auto &v8 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("PlateSerial").get_to(p.PlateSerial);
  auto &v10 = j.at("LastFragment").get_ref<const std::string &>();
  p.LastFragment = v10.at(0);
  j.at("SessionID").get_to(p.SessionID);
  auto &v12 = j.at("CustomerName").get_ref<const std::string &>();
  std::strncpy(p.CustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.CustomerName));
  auto &v13 = j.at("IdCardType").get_ref<const std::string &>();
  p.IdCardType = v13.at(0);
  auto &v14 = j.at("IdentifiedCardNo").get_ref<const std::string &>();
  std::strncpy(p.IdentifiedCardNo, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.IdentifiedCardNo));
  auto &v15 = j.at("Gender").get_ref<const std::string &>();
  p.Gender = v15.at(0);
  auto &v16 = j.at("CountryCode").get_ref<const std::string &>();
  std::strncpy(p.CountryCode, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.CountryCode));
  auto &v17 = j.at("CustType").get_ref<const std::string &>();
  p.CustType = v17.at(0);
  auto &v18 = j.at("Address").get_ref<const std::string &>();
  std::strncpy(p.Address, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.Address));
  auto &v19 = j.at("ZipCode").get_ref<const std::string &>();
  std::strncpy(p.ZipCode, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.ZipCode));
  auto &v20 = j.at("Telephone").get_ref<const std::string &>();
  std::strncpy(p.Telephone, codec_convert("GBK//TRANSLIT", "UTF-8", v20.c_str()).c_str(), sizeof(p.Telephone));
  auto &v21 = j.at("MobilePhone").get_ref<const std::string &>();
  std::strncpy(p.MobilePhone, codec_convert("GBK//TRANSLIT", "UTF-8", v21.c_str()).c_str(), sizeof(p.MobilePhone));
  auto &v22 = j.at("Fax").get_ref<const std::string &>();
  std::strncpy(p.Fax, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.Fax));
  auto &v23 = j.at("EMail").get_ref<const std::string &>();
  std::strncpy(p.EMail, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.EMail));
  auto &v24 = j.at("MoneyAccountStatus").get_ref<const std::string &>();
  p.MoneyAccountStatus = v24.at(0);
  auto &v25 = j.at("BankAccount").get_ref<const std::string &>();
  std::strncpy(p.BankAccount, codec_convert("GBK//TRANSLIT", "UTF-8", v25.c_str()).c_str(), sizeof(p.BankAccount));
  auto &v26 = j.at("BankPassWord").get_ref<const std::string &>();
  std::strncpy(p.BankPassWord, codec_convert("GBK//TRANSLIT", "UTF-8", v26.c_str()).c_str(), sizeof(p.BankPassWord));
  auto &v27 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v27.c_str()).c_str(), sizeof(p.AccountID));
  auto &v28 = j.at("Password").get_ref<const std::string &>();
  std::strncpy(p.Password, codec_convert("GBK//TRANSLIT", "UTF-8", v28.c_str()).c_str(), sizeof(p.Password));
  j.at("InstallID").get_to(p.InstallID);
  auto &v30 = j.at("VerifyCertNoFlag").get_ref<const std::string &>();
  p.VerifyCertNoFlag = v30.at(0);
  auto &v31 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v31.c_str()).c_str(), sizeof(p.CurrencyID));
  auto &v32 = j.at("CashExchangeCode").get_ref<const std::string &>();
  p.CashExchangeCode = v32.at(0);
  auto &v33 = j.at("Digest").get_ref<const std::string &>();
  std::strncpy(p.Digest, codec_convert("GBK//TRANSLIT", "UTF-8", v33.c_str()).c_str(), sizeof(p.Digest));
  auto &v34 = j.at("BankAccType").get_ref<const std::string &>();
  p.BankAccType = v34.at(0);
  auto &v35 = j.at("DeviceID").get_ref<const std::string &>();
  std::strncpy(p.DeviceID, codec_convert("GBK//TRANSLIT", "UTF-8", v35.c_str()).c_str(), sizeof(p.DeviceID));
  auto &v36 = j.at("BankSecuAccType").get_ref<const std::string &>();
  p.BankSecuAccType = v36.at(0);
  auto &v37 = j.at("BrokerIDByBank").get_ref<const std::string &>();
  std::strncpy(p.BrokerIDByBank, codec_convert("GBK//TRANSLIT", "UTF-8", v37.c_str()).c_str(), sizeof(p.BrokerIDByBank));
  auto &v38 = j.at("BankSecuAcc").get_ref<const std::string &>();
  std::strncpy(p.BankSecuAcc, codec_convert("GBK//TRANSLIT", "UTF-8", v38.c_str()).c_str(), sizeof(p.BankSecuAcc));
  auto &v39 = j.at("BankPwdFlag").get_ref<const std::string &>();
  p.BankPwdFlag = v39.at(0);
  auto &v40 = j.at("SecuPwdFlag").get_ref<const std::string &>();
  p.SecuPwdFlag = v40.at(0);
  auto &v41 = j.at("OperNo").get_ref<const std::string &>();
  std::strncpy(p.OperNo, codec_convert("GBK//TRANSLIT", "UTF-8", v41.c_str()).c_str(), sizeof(p.OperNo));
  j.at("TID").get_to(p.TID);
  auto &v43 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v43.c_str()).c_str(), sizeof(p.UserID));
  auto &v44 = j.at("LongCustomerName").get_ref<const std::string &>();
  std::strncpy(p.LongCustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v44.c_str()).c_str(), sizeof(p.LongCustomerName));

}



void to_json(json& j, const CThostFtdcReqChangeAccountField& p) {
  j = json{
           {"TradeCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeCode)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBranchID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BrokerBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerBranchID)},
           {"TradeDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDate)},
           {"TradeTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTime)},
           {"BankSerial", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSerial)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"PlateSerial", p.PlateSerial},
           {"LastFragment", std::string(1, p.LastFragment)},
           {"SessionID", p.SessionID},
           {"CustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.CustomerName)},
           {"IdCardType", std::string(1, p.IdCardType)},
           {"IdentifiedCardNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.IdentifiedCardNo)},
           {"Gender", std::string(1, p.Gender)},
           {"CountryCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.CountryCode)},
           {"CustType", std::string(1, p.CustType)},
           {"Address", codec_convert("UTF-8//TRANSLIT", "GBK", p.Address)},
           {"ZipCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.ZipCode)},
           {"Telephone", codec_convert("UTF-8//TRANSLIT", "GBK", p.Telephone)},
           {"MobilePhone", codec_convert("UTF-8//TRANSLIT", "GBK", p.MobilePhone)},
           {"Fax", codec_convert("UTF-8//TRANSLIT", "GBK", p.Fax)},
           {"EMail", codec_convert("UTF-8//TRANSLIT", "GBK", p.EMail)},
           {"MoneyAccountStatus", std::string(1, p.MoneyAccountStatus)},
           {"BankAccount", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankAccount)},
           {"BankPassWord", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankPassWord)},
           {"NewBankAccount", codec_convert("UTF-8//TRANSLIT", "GBK", p.NewBankAccount)},
           {"NewBankPassWord", codec_convert("UTF-8//TRANSLIT", "GBK", p.NewBankPassWord)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"Password", codec_convert("UTF-8//TRANSLIT", "GBK", p.Password)},
           {"BankAccType", std::string(1, p.BankAccType)},
           {"InstallID", p.InstallID},
           {"VerifyCertNoFlag", std::string(1, p.VerifyCertNoFlag)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"BrokerIDByBank", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerIDByBank)},
           {"BankPwdFlag", std::string(1, p.BankPwdFlag)},
           {"SecuPwdFlag", std::string(1, p.SecuPwdFlag)},
           {"TID", p.TID},
           {"Digest", codec_convert("UTF-8//TRANSLIT", "GBK", p.Digest)},
           {"LongCustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.LongCustomerName)},
  };
}

void from_json(const json& j, CThostFtdcReqChangeAccountField& p) {
  auto &v0 = j.at("TradeCode").get_ref<const std::string &>();
  std::strncpy(p.TradeCode, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradeCode));
  auto &v1 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BankID));
  auto &v2 = j.at("BankBranchID").get_ref<const std::string &>();
  std::strncpy(p.BankBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BankBranchID));
  auto &v3 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v4 = j.at("BrokerBranchID").get_ref<const std::string &>();
  std::strncpy(p.BrokerBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.BrokerBranchID));
  auto &v5 = j.at("TradeDate").get_ref<const std::string &>();
  std::strncpy(p.TradeDate, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.TradeDate));
  auto &v6 = j.at("TradeTime").get_ref<const std::string &>();
  std::strncpy(p.TradeTime, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.TradeTime));
  auto &v7 = j.at("BankSerial").get_ref<const std::string &>();
  std::strncpy(p.BankSerial, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BankSerial));
  auto &v8 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("PlateSerial").get_to(p.PlateSerial);
  auto &v10 = j.at("LastFragment").get_ref<const std::string &>();
  p.LastFragment = v10.at(0);
  j.at("SessionID").get_to(p.SessionID);
  auto &v12 = j.at("CustomerName").get_ref<const std::string &>();
  std::strncpy(p.CustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.CustomerName));
  auto &v13 = j.at("IdCardType").get_ref<const std::string &>();
  p.IdCardType = v13.at(0);
  auto &v14 = j.at("IdentifiedCardNo").get_ref<const std::string &>();
  std::strncpy(p.IdentifiedCardNo, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.IdentifiedCardNo));
  auto &v15 = j.at("Gender").get_ref<const std::string &>();
  p.Gender = v15.at(0);
  auto &v16 = j.at("CountryCode").get_ref<const std::string &>();
  std::strncpy(p.CountryCode, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.CountryCode));
  auto &v17 = j.at("CustType").get_ref<const std::string &>();
  p.CustType = v17.at(0);
  auto &v18 = j.at("Address").get_ref<const std::string &>();
  std::strncpy(p.Address, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.Address));
  auto &v19 = j.at("ZipCode").get_ref<const std::string &>();
  std::strncpy(p.ZipCode, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.ZipCode));
  auto &v20 = j.at("Telephone").get_ref<const std::string &>();
  std::strncpy(p.Telephone, codec_convert("GBK//TRANSLIT", "UTF-8", v20.c_str()).c_str(), sizeof(p.Telephone));
  auto &v21 = j.at("MobilePhone").get_ref<const std::string &>();
  std::strncpy(p.MobilePhone, codec_convert("GBK//TRANSLIT", "UTF-8", v21.c_str()).c_str(), sizeof(p.MobilePhone));
  auto &v22 = j.at("Fax").get_ref<const std::string &>();
  std::strncpy(p.Fax, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.Fax));
  auto &v23 = j.at("EMail").get_ref<const std::string &>();
  std::strncpy(p.EMail, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.EMail));
  auto &v24 = j.at("MoneyAccountStatus").get_ref<const std::string &>();
  p.MoneyAccountStatus = v24.at(0);
  auto &v25 = j.at("BankAccount").get_ref<const std::string &>();
  std::strncpy(p.BankAccount, codec_convert("GBK//TRANSLIT", "UTF-8", v25.c_str()).c_str(), sizeof(p.BankAccount));
  auto &v26 = j.at("BankPassWord").get_ref<const std::string &>();
  std::strncpy(p.BankPassWord, codec_convert("GBK//TRANSLIT", "UTF-8", v26.c_str()).c_str(), sizeof(p.BankPassWord));
  auto &v27 = j.at("NewBankAccount").get_ref<const std::string &>();
  std::strncpy(p.NewBankAccount, codec_convert("GBK//TRANSLIT", "UTF-8", v27.c_str()).c_str(), sizeof(p.NewBankAccount));
  auto &v28 = j.at("NewBankPassWord").get_ref<const std::string &>();
  std::strncpy(p.NewBankPassWord, codec_convert("GBK//TRANSLIT", "UTF-8", v28.c_str()).c_str(), sizeof(p.NewBankPassWord));
  auto &v29 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v29.c_str()).c_str(), sizeof(p.AccountID));
  auto &v30 = j.at("Password").get_ref<const std::string &>();
  std::strncpy(p.Password, codec_convert("GBK//TRANSLIT", "UTF-8", v30.c_str()).c_str(), sizeof(p.Password));
  auto &v31 = j.at("BankAccType").get_ref<const std::string &>();
  p.BankAccType = v31.at(0);
  j.at("InstallID").get_to(p.InstallID);
  auto &v33 = j.at("VerifyCertNoFlag").get_ref<const std::string &>();
  p.VerifyCertNoFlag = v33.at(0);
  auto &v34 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v34.c_str()).c_str(), sizeof(p.CurrencyID));
  auto &v35 = j.at("BrokerIDByBank").get_ref<const std::string &>();
  std::strncpy(p.BrokerIDByBank, codec_convert("GBK//TRANSLIT", "UTF-8", v35.c_str()).c_str(), sizeof(p.BrokerIDByBank));
  auto &v36 = j.at("BankPwdFlag").get_ref<const std::string &>();
  p.BankPwdFlag = v36.at(0);
  auto &v37 = j.at("SecuPwdFlag").get_ref<const std::string &>();
  p.SecuPwdFlag = v37.at(0);
  j.at("TID").get_to(p.TID);
  auto &v39 = j.at("Digest").get_ref<const std::string &>();
  std::strncpy(p.Digest, codec_convert("GBK//TRANSLIT", "UTF-8", v39.c_str()).c_str(), sizeof(p.Digest));
  auto &v40 = j.at("LongCustomerName").get_ref<const std::string &>();
  std::strncpy(p.LongCustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v40.c_str()).c_str(), sizeof(p.LongCustomerName));

}



void to_json(json& j, const CThostFtdcReqTransferField& p) {
  j = json{
           {"TradeCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeCode)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBranchID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BrokerBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerBranchID)},
           {"TradeDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDate)},
           {"TradeTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTime)},
           {"BankSerial", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSerial)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"PlateSerial", p.PlateSerial},
           {"LastFragment", std::string(1, p.LastFragment)},
           {"SessionID", p.SessionID},
           {"CustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.CustomerName)},
           {"IdCardType", std::string(1, p.IdCardType)},
           {"IdentifiedCardNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.IdentifiedCardNo)},
           {"CustType", std::string(1, p.CustType)},
           {"BankAccount", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankAccount)},
           {"BankPassWord", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankPassWord)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"Password", codec_convert("UTF-8//TRANSLIT", "GBK", p.Password)},
           {"InstallID", p.InstallID},
           {"FutureSerial", p.FutureSerial},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"VerifyCertNoFlag", std::string(1, p.VerifyCertNoFlag)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"TradeAmount", p.TradeAmount},
           {"FutureFetchAmount", p.FutureFetchAmount},
           {"FeePayFlag", std::string(1, p.FeePayFlag)},
           {"CustFee", p.CustFee},
           {"BrokerFee", p.BrokerFee},
           {"Message", codec_convert("UTF-8//TRANSLIT", "GBK", p.Message)},
           {"Digest", codec_convert("UTF-8//TRANSLIT", "GBK", p.Digest)},
           {"BankAccType", std::string(1, p.BankAccType)},
           {"DeviceID", codec_convert("UTF-8//TRANSLIT", "GBK", p.DeviceID)},
           {"BankSecuAccType", std::string(1, p.BankSecuAccType)},
           {"BrokerIDByBank", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerIDByBank)},
           {"BankSecuAcc", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSecuAcc)},
           {"BankPwdFlag", std::string(1, p.BankPwdFlag)},
           {"SecuPwdFlag", std::string(1, p.SecuPwdFlag)},
           {"OperNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.OperNo)},
           {"RequestID", p.RequestID},
           {"TID", p.TID},
           {"TransferStatus", std::string(1, p.TransferStatus)},
           {"LongCustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.LongCustomerName)},
  };
}

void from_json(const json& j, CThostFtdcReqTransferField& p) {
  auto &v0 = j.at("TradeCode").get_ref<const std::string &>();
  std::strncpy(p.TradeCode, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradeCode));
  auto &v1 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BankID));
  auto &v2 = j.at("BankBranchID").get_ref<const std::string &>();
  std::strncpy(p.BankBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BankBranchID));
  auto &v3 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v4 = j.at("BrokerBranchID").get_ref<const std::string &>();
  std::strncpy(p.BrokerBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.BrokerBranchID));
  auto &v5 = j.at("TradeDate").get_ref<const std::string &>();
  std::strncpy(p.TradeDate, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.TradeDate));
  auto &v6 = j.at("TradeTime").get_ref<const std::string &>();
  std::strncpy(p.TradeTime, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.TradeTime));
  auto &v7 = j.at("BankSerial").get_ref<const std::string &>();
  std::strncpy(p.BankSerial, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BankSerial));
  auto &v8 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("PlateSerial").get_to(p.PlateSerial);
  auto &v10 = j.at("LastFragment").get_ref<const std::string &>();
  p.LastFragment = v10.at(0);
  j.at("SessionID").get_to(p.SessionID);
  auto &v12 = j.at("CustomerName").get_ref<const std::string &>();
  std::strncpy(p.CustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.CustomerName));
  auto &v13 = j.at("IdCardType").get_ref<const std::string &>();
  p.IdCardType = v13.at(0);
  auto &v14 = j.at("IdentifiedCardNo").get_ref<const std::string &>();
  std::strncpy(p.IdentifiedCardNo, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.IdentifiedCardNo));
  auto &v15 = j.at("CustType").get_ref<const std::string &>();
  p.CustType = v15.at(0);
  auto &v16 = j.at("BankAccount").get_ref<const std::string &>();
  std::strncpy(p.BankAccount, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.BankAccount));
  auto &v17 = j.at("BankPassWord").get_ref<const std::string &>();
  std::strncpy(p.BankPassWord, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.BankPassWord));
  auto &v18 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.AccountID));
  auto &v19 = j.at("Password").get_ref<const std::string &>();
  std::strncpy(p.Password, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.Password));
  j.at("InstallID").get_to(p.InstallID);
  j.at("FutureSerial").get_to(p.FutureSerial);
  auto &v22 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.UserID));
  auto &v23 = j.at("VerifyCertNoFlag").get_ref<const std::string &>();
  p.VerifyCertNoFlag = v23.at(0);
  auto &v24 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v24.c_str()).c_str(), sizeof(p.CurrencyID));
  j.at("TradeAmount").get_to(p.TradeAmount);
  j.at("FutureFetchAmount").get_to(p.FutureFetchAmount);
  auto &v27 = j.at("FeePayFlag").get_ref<const std::string &>();
  p.FeePayFlag = v27.at(0);
  j.at("CustFee").get_to(p.CustFee);
  j.at("BrokerFee").get_to(p.BrokerFee);
  auto &v30 = j.at("Message").get_ref<const std::string &>();
  std::strncpy(p.Message, codec_convert("GBK//TRANSLIT", "UTF-8", v30.c_str()).c_str(), sizeof(p.Message));
  auto &v31 = j.at("Digest").get_ref<const std::string &>();
  std::strncpy(p.Digest, codec_convert("GBK//TRANSLIT", "UTF-8", v31.c_str()).c_str(), sizeof(p.Digest));
  auto &v32 = j.at("BankAccType").get_ref<const std::string &>();
  p.BankAccType = v32.at(0);
  auto &v33 = j.at("DeviceID").get_ref<const std::string &>();
  std::strncpy(p.DeviceID, codec_convert("GBK//TRANSLIT", "UTF-8", v33.c_str()).c_str(), sizeof(p.DeviceID));
  auto &v34 = j.at("BankSecuAccType").get_ref<const std::string &>();
  p.BankSecuAccType = v34.at(0);
  auto &v35 = j.at("BrokerIDByBank").get_ref<const std::string &>();
  std::strncpy(p.BrokerIDByBank, codec_convert("GBK//TRANSLIT", "UTF-8", v35.c_str()).c_str(), sizeof(p.BrokerIDByBank));
  auto &v36 = j.at("BankSecuAcc").get_ref<const std::string &>();
  std::strncpy(p.BankSecuAcc, codec_convert("GBK//TRANSLIT", "UTF-8", v36.c_str()).c_str(), sizeof(p.BankSecuAcc));
  auto &v37 = j.at("BankPwdFlag").get_ref<const std::string &>();
  p.BankPwdFlag = v37.at(0);
  auto &v38 = j.at("SecuPwdFlag").get_ref<const std::string &>();
  p.SecuPwdFlag = v38.at(0);
  auto &v39 = j.at("OperNo").get_ref<const std::string &>();
  std::strncpy(p.OperNo, codec_convert("GBK//TRANSLIT", "UTF-8", v39.c_str()).c_str(), sizeof(p.OperNo));
  j.at("RequestID").get_to(p.RequestID);
  j.at("TID").get_to(p.TID);
  auto &v42 = j.at("TransferStatus").get_ref<const std::string &>();
  p.TransferStatus = v42.at(0);
  auto &v43 = j.at("LongCustomerName").get_ref<const std::string &>();
  std::strncpy(p.LongCustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v43.c_str()).c_str(), sizeof(p.LongCustomerName));

}



void to_json(json& j, const CThostFtdcRspTransferField& p) {
  j = json{
           {"TradeCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeCode)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBranchID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BrokerBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerBranchID)},
           {"TradeDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDate)},
           {"TradeTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTime)},
           {"BankSerial", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSerial)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"PlateSerial", p.PlateSerial},
           {"LastFragment", std::string(1, p.LastFragment)},
           {"SessionID", p.SessionID},
           {"CustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.CustomerName)},
           {"IdCardType", std::string(1, p.IdCardType)},
           {"IdentifiedCardNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.IdentifiedCardNo)},
           {"CustType", std::string(1, p.CustType)},
           {"BankAccount", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankAccount)},
           {"BankPassWord", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankPassWord)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"Password", codec_convert("UTF-8//TRANSLIT", "GBK", p.Password)},
           {"InstallID", p.InstallID},
           {"FutureSerial", p.FutureSerial},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"VerifyCertNoFlag", std::string(1, p.VerifyCertNoFlag)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"TradeAmount", p.TradeAmount},
           {"FutureFetchAmount", p.FutureFetchAmount},
           {"FeePayFlag", std::string(1, p.FeePayFlag)},
           {"CustFee", p.CustFee},
           {"BrokerFee", p.BrokerFee},
           {"Message", codec_convert("UTF-8//TRANSLIT", "GBK", p.Message)},
           {"Digest", codec_convert("UTF-8//TRANSLIT", "GBK", p.Digest)},
           {"BankAccType", std::string(1, p.BankAccType)},
           {"DeviceID", codec_convert("UTF-8//TRANSLIT", "GBK", p.DeviceID)},
           {"BankSecuAccType", std::string(1, p.BankSecuAccType)},
           {"BrokerIDByBank", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerIDByBank)},
           {"BankSecuAcc", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSecuAcc)},
           {"BankPwdFlag", std::string(1, p.BankPwdFlag)},
           {"SecuPwdFlag", std::string(1, p.SecuPwdFlag)},
           {"OperNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.OperNo)},
           {"RequestID", p.RequestID},
           {"TID", p.TID},
           {"TransferStatus", std::string(1, p.TransferStatus)},
           {"ErrorID", p.ErrorID},
           {"ErrorMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.ErrorMsg)},
           {"LongCustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.LongCustomerName)},
  };
}

void from_json(const json& j, CThostFtdcRspTransferField& p) {
  auto &v0 = j.at("TradeCode").get_ref<const std::string &>();
  std::strncpy(p.TradeCode, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradeCode));
  auto &v1 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BankID));
  auto &v2 = j.at("BankBranchID").get_ref<const std::string &>();
  std::strncpy(p.BankBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BankBranchID));
  auto &v3 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v4 = j.at("BrokerBranchID").get_ref<const std::string &>();
  std::strncpy(p.BrokerBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.BrokerBranchID));
  auto &v5 = j.at("TradeDate").get_ref<const std::string &>();
  std::strncpy(p.TradeDate, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.TradeDate));
  auto &v6 = j.at("TradeTime").get_ref<const std::string &>();
  std::strncpy(p.TradeTime, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.TradeTime));
  auto &v7 = j.at("BankSerial").get_ref<const std::string &>();
  std::strncpy(p.BankSerial, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BankSerial));
  auto &v8 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("PlateSerial").get_to(p.PlateSerial);
  auto &v10 = j.at("LastFragment").get_ref<const std::string &>();
  p.LastFragment = v10.at(0);
  j.at("SessionID").get_to(p.SessionID);
  auto &v12 = j.at("CustomerName").get_ref<const std::string &>();
  std::strncpy(p.CustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.CustomerName));
  auto &v13 = j.at("IdCardType").get_ref<const std::string &>();
  p.IdCardType = v13.at(0);
  auto &v14 = j.at("IdentifiedCardNo").get_ref<const std::string &>();
  std::strncpy(p.IdentifiedCardNo, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.IdentifiedCardNo));
  auto &v15 = j.at("CustType").get_ref<const std::string &>();
  p.CustType = v15.at(0);
  auto &v16 = j.at("BankAccount").get_ref<const std::string &>();
  std::strncpy(p.BankAccount, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.BankAccount));
  auto &v17 = j.at("BankPassWord").get_ref<const std::string &>();
  std::strncpy(p.BankPassWord, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.BankPassWord));
  auto &v18 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.AccountID));
  auto &v19 = j.at("Password").get_ref<const std::string &>();
  std::strncpy(p.Password, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.Password));
  j.at("InstallID").get_to(p.InstallID);
  j.at("FutureSerial").get_to(p.FutureSerial);
  auto &v22 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.UserID));
  auto &v23 = j.at("VerifyCertNoFlag").get_ref<const std::string &>();
  p.VerifyCertNoFlag = v23.at(0);
  auto &v24 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v24.c_str()).c_str(), sizeof(p.CurrencyID));
  j.at("TradeAmount").get_to(p.TradeAmount);
  j.at("FutureFetchAmount").get_to(p.FutureFetchAmount);
  auto &v27 = j.at("FeePayFlag").get_ref<const std::string &>();
  p.FeePayFlag = v27.at(0);
  j.at("CustFee").get_to(p.CustFee);
  j.at("BrokerFee").get_to(p.BrokerFee);
  auto &v30 = j.at("Message").get_ref<const std::string &>();
  std::strncpy(p.Message, codec_convert("GBK//TRANSLIT", "UTF-8", v30.c_str()).c_str(), sizeof(p.Message));
  auto &v31 = j.at("Digest").get_ref<const std::string &>();
  std::strncpy(p.Digest, codec_convert("GBK//TRANSLIT", "UTF-8", v31.c_str()).c_str(), sizeof(p.Digest));
  auto &v32 = j.at("BankAccType").get_ref<const std::string &>();
  p.BankAccType = v32.at(0);
  auto &v33 = j.at("DeviceID").get_ref<const std::string &>();
  std::strncpy(p.DeviceID, codec_convert("GBK//TRANSLIT", "UTF-8", v33.c_str()).c_str(), sizeof(p.DeviceID));
  auto &v34 = j.at("BankSecuAccType").get_ref<const std::string &>();
  p.BankSecuAccType = v34.at(0);
  auto &v35 = j.at("BrokerIDByBank").get_ref<const std::string &>();
  std::strncpy(p.BrokerIDByBank, codec_convert("GBK//TRANSLIT", "UTF-8", v35.c_str()).c_str(), sizeof(p.BrokerIDByBank));
  auto &v36 = j.at("BankSecuAcc").get_ref<const std::string &>();
  std::strncpy(p.BankSecuAcc, codec_convert("GBK//TRANSLIT", "UTF-8", v36.c_str()).c_str(), sizeof(p.BankSecuAcc));
  auto &v37 = j.at("BankPwdFlag").get_ref<const std::string &>();
  p.BankPwdFlag = v37.at(0);
  auto &v38 = j.at("SecuPwdFlag").get_ref<const std::string &>();
  p.SecuPwdFlag = v38.at(0);
  auto &v39 = j.at("OperNo").get_ref<const std::string &>();
  std::strncpy(p.OperNo, codec_convert("GBK//TRANSLIT", "UTF-8", v39.c_str()).c_str(), sizeof(p.OperNo));
  j.at("RequestID").get_to(p.RequestID);
  j.at("TID").get_to(p.TID);
  auto &v42 = j.at("TransferStatus").get_ref<const std::string &>();
  p.TransferStatus = v42.at(0);
  j.at("ErrorID").get_to(p.ErrorID);
  auto &v44 = j.at("ErrorMsg").get_ref<const std::string &>();
  std::strncpy(p.ErrorMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v44.c_str()).c_str(), sizeof(p.ErrorMsg));
  auto &v45 = j.at("LongCustomerName").get_ref<const std::string &>();
  std::strncpy(p.LongCustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v45.c_str()).c_str(), sizeof(p.LongCustomerName));

}



void to_json(json& j, const CThostFtdcReqRepealField& p) {
  j = json{
           {"RepealTimeInterval", p.RepealTimeInterval},
           {"RepealedTimes", p.RepealedTimes},
           {"BankRepealFlag", std::string(1, p.BankRepealFlag)},
           {"BrokerRepealFlag", std::string(1, p.BrokerRepealFlag)},
           {"PlateRepealSerial", p.PlateRepealSerial},
           {"BankRepealSerial", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankRepealSerial)},
           {"FutureRepealSerial", p.FutureRepealSerial},
           {"TradeCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeCode)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBranchID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BrokerBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerBranchID)},
           {"TradeDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDate)},
           {"TradeTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTime)},
           {"BankSerial", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSerial)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"PlateSerial", p.PlateSerial},
           {"LastFragment", std::string(1, p.LastFragment)},
           {"SessionID", p.SessionID},
           {"CustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.CustomerName)},
           {"IdCardType", std::string(1, p.IdCardType)},
           {"IdentifiedCardNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.IdentifiedCardNo)},
           {"CustType", std::string(1, p.CustType)},
           {"BankAccount", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankAccount)},
           {"BankPassWord", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankPassWord)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"Password", codec_convert("UTF-8//TRANSLIT", "GBK", p.Password)},
           {"InstallID", p.InstallID},
           {"FutureSerial", p.FutureSerial},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"VerifyCertNoFlag", std::string(1, p.VerifyCertNoFlag)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"TradeAmount", p.TradeAmount},
           {"FutureFetchAmount", p.FutureFetchAmount},
           {"FeePayFlag", std::string(1, p.FeePayFlag)},
           {"CustFee", p.CustFee},
           {"BrokerFee", p.BrokerFee},
           {"Message", codec_convert("UTF-8//TRANSLIT", "GBK", p.Message)},
           {"Digest", codec_convert("UTF-8//TRANSLIT", "GBK", p.Digest)},
           {"BankAccType", std::string(1, p.BankAccType)},
           {"DeviceID", codec_convert("UTF-8//TRANSLIT", "GBK", p.DeviceID)},
           {"BankSecuAccType", std::string(1, p.BankSecuAccType)},
           {"BrokerIDByBank", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerIDByBank)},
           {"BankSecuAcc", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSecuAcc)},
           {"BankPwdFlag", std::string(1, p.BankPwdFlag)},
           {"SecuPwdFlag", std::string(1, p.SecuPwdFlag)},
           {"OperNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.OperNo)},
           {"RequestID", p.RequestID},
           {"TID", p.TID},
           {"TransferStatus", std::string(1, p.TransferStatus)},
           {"LongCustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.LongCustomerName)},
  };
}

void from_json(const json& j, CThostFtdcReqRepealField& p) {
  j.at("RepealTimeInterval").get_to(p.RepealTimeInterval);
  j.at("RepealedTimes").get_to(p.RepealedTimes);
  auto &v2 = j.at("BankRepealFlag").get_ref<const std::string &>();
  p.BankRepealFlag = v2.at(0);
  auto &v3 = j.at("BrokerRepealFlag").get_ref<const std::string &>();
  p.BrokerRepealFlag = v3.at(0);
  j.at("PlateRepealSerial").get_to(p.PlateRepealSerial);
  auto &v5 = j.at("BankRepealSerial").get_ref<const std::string &>();
  std::strncpy(p.BankRepealSerial, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.BankRepealSerial));
  j.at("FutureRepealSerial").get_to(p.FutureRepealSerial);
  auto &v7 = j.at("TradeCode").get_ref<const std::string &>();
  std::strncpy(p.TradeCode, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.TradeCode));
  auto &v8 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.BankID));
  auto &v9 = j.at("BankBranchID").get_ref<const std::string &>();
  std::strncpy(p.BankBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.BankBranchID));
  auto &v10 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v11 = j.at("BrokerBranchID").get_ref<const std::string &>();
  std::strncpy(p.BrokerBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.BrokerBranchID));
  auto &v12 = j.at("TradeDate").get_ref<const std::string &>();
  std::strncpy(p.TradeDate, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.TradeDate));
  auto &v13 = j.at("TradeTime").get_ref<const std::string &>();
  std::strncpy(p.TradeTime, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.TradeTime));
  auto &v14 = j.at("BankSerial").get_ref<const std::string &>();
  std::strncpy(p.BankSerial, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.BankSerial));
  auto &v15 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("PlateSerial").get_to(p.PlateSerial);
  auto &v17 = j.at("LastFragment").get_ref<const std::string &>();
  p.LastFragment = v17.at(0);
  j.at("SessionID").get_to(p.SessionID);
  auto &v19 = j.at("CustomerName").get_ref<const std::string &>();
  std::strncpy(p.CustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.CustomerName));
  auto &v20 = j.at("IdCardType").get_ref<const std::string &>();
  p.IdCardType = v20.at(0);
  auto &v21 = j.at("IdentifiedCardNo").get_ref<const std::string &>();
  std::strncpy(p.IdentifiedCardNo, codec_convert("GBK//TRANSLIT", "UTF-8", v21.c_str()).c_str(), sizeof(p.IdentifiedCardNo));
  auto &v22 = j.at("CustType").get_ref<const std::string &>();
  p.CustType = v22.at(0);
  auto &v23 = j.at("BankAccount").get_ref<const std::string &>();
  std::strncpy(p.BankAccount, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.BankAccount));
  auto &v24 = j.at("BankPassWord").get_ref<const std::string &>();
  std::strncpy(p.BankPassWord, codec_convert("GBK//TRANSLIT", "UTF-8", v24.c_str()).c_str(), sizeof(p.BankPassWord));
  auto &v25 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v25.c_str()).c_str(), sizeof(p.AccountID));
  auto &v26 = j.at("Password").get_ref<const std::string &>();
  std::strncpy(p.Password, codec_convert("GBK//TRANSLIT", "UTF-8", v26.c_str()).c_str(), sizeof(p.Password));
  j.at("InstallID").get_to(p.InstallID);
  j.at("FutureSerial").get_to(p.FutureSerial);
  auto &v29 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v29.c_str()).c_str(), sizeof(p.UserID));
  auto &v30 = j.at("VerifyCertNoFlag").get_ref<const std::string &>();
  p.VerifyCertNoFlag = v30.at(0);
  auto &v31 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v31.c_str()).c_str(), sizeof(p.CurrencyID));
  j.at("TradeAmount").get_to(p.TradeAmount);
  j.at("FutureFetchAmount").get_to(p.FutureFetchAmount);
  auto &v34 = j.at("FeePayFlag").get_ref<const std::string &>();
  p.FeePayFlag = v34.at(0);
  j.at("CustFee").get_to(p.CustFee);
  j.at("BrokerFee").get_to(p.BrokerFee);
  auto &v37 = j.at("Message").get_ref<const std::string &>();
  std::strncpy(p.Message, codec_convert("GBK//TRANSLIT", "UTF-8", v37.c_str()).c_str(), sizeof(p.Message));
  auto &v38 = j.at("Digest").get_ref<const std::string &>();
  std::strncpy(p.Digest, codec_convert("GBK//TRANSLIT", "UTF-8", v38.c_str()).c_str(), sizeof(p.Digest));
  auto &v39 = j.at("BankAccType").get_ref<const std::string &>();
  p.BankAccType = v39.at(0);
  auto &v40 = j.at("DeviceID").get_ref<const std::string &>();
  std::strncpy(p.DeviceID, codec_convert("GBK//TRANSLIT", "UTF-8", v40.c_str()).c_str(), sizeof(p.DeviceID));
  auto &v41 = j.at("BankSecuAccType").get_ref<const std::string &>();
  p.BankSecuAccType = v41.at(0);
  auto &v42 = j.at("BrokerIDByBank").get_ref<const std::string &>();
  std::strncpy(p.BrokerIDByBank, codec_convert("GBK//TRANSLIT", "UTF-8", v42.c_str()).c_str(), sizeof(p.BrokerIDByBank));
  auto &v43 = j.at("BankSecuAcc").get_ref<const std::string &>();
  std::strncpy(p.BankSecuAcc, codec_convert("GBK//TRANSLIT", "UTF-8", v43.c_str()).c_str(), sizeof(p.BankSecuAcc));
  auto &v44 = j.at("BankPwdFlag").get_ref<const std::string &>();
  p.BankPwdFlag = v44.at(0);
  auto &v45 = j.at("SecuPwdFlag").get_ref<const std::string &>();
  p.SecuPwdFlag = v45.at(0);
  auto &v46 = j.at("OperNo").get_ref<const std::string &>();
  std::strncpy(p.OperNo, codec_convert("GBK//TRANSLIT", "UTF-8", v46.c_str()).c_str(), sizeof(p.OperNo));
  j.at("RequestID").get_to(p.RequestID);
  j.at("TID").get_to(p.TID);
  auto &v49 = j.at("TransferStatus").get_ref<const std::string &>();
  p.TransferStatus = v49.at(0);
  auto &v50 = j.at("LongCustomerName").get_ref<const std::string &>();
  std::strncpy(p.LongCustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v50.c_str()).c_str(), sizeof(p.LongCustomerName));

}



void to_json(json& j, const CThostFtdcRspRepealField& p) {
  j = json{
           {"RepealTimeInterval", p.RepealTimeInterval},
           {"RepealedTimes", p.RepealedTimes},
           {"BankRepealFlag", std::string(1, p.BankRepealFlag)},
           {"BrokerRepealFlag", std::string(1, p.BrokerRepealFlag)},
           {"PlateRepealSerial", p.PlateRepealSerial},
           {"BankRepealSerial", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankRepealSerial)},
           {"FutureRepealSerial", p.FutureRepealSerial},
           {"TradeCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeCode)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBranchID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BrokerBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerBranchID)},
           {"TradeDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDate)},
           {"TradeTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTime)},
           {"BankSerial", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSerial)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"PlateSerial", p.PlateSerial},
           {"LastFragment", std::string(1, p.LastFragment)},
           {"SessionID", p.SessionID},
           {"CustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.CustomerName)},
           {"IdCardType", std::string(1, p.IdCardType)},
           {"IdentifiedCardNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.IdentifiedCardNo)},
           {"CustType", std::string(1, p.CustType)},
           {"BankAccount", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankAccount)},
           {"BankPassWord", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankPassWord)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"Password", codec_convert("UTF-8//TRANSLIT", "GBK", p.Password)},
           {"InstallID", p.InstallID},
           {"FutureSerial", p.FutureSerial},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"VerifyCertNoFlag", std::string(1, p.VerifyCertNoFlag)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"TradeAmount", p.TradeAmount},
           {"FutureFetchAmount", p.FutureFetchAmount},
           {"FeePayFlag", std::string(1, p.FeePayFlag)},
           {"CustFee", p.CustFee},
           {"BrokerFee", p.BrokerFee},
           {"Message", codec_convert("UTF-8//TRANSLIT", "GBK", p.Message)},
           {"Digest", codec_convert("UTF-8//TRANSLIT", "GBK", p.Digest)},
           {"BankAccType", std::string(1, p.BankAccType)},
           {"DeviceID", codec_convert("UTF-8//TRANSLIT", "GBK", p.DeviceID)},
           {"BankSecuAccType", std::string(1, p.BankSecuAccType)},
           {"BrokerIDByBank", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerIDByBank)},
           {"BankSecuAcc", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSecuAcc)},
           {"BankPwdFlag", std::string(1, p.BankPwdFlag)},
           {"SecuPwdFlag", std::string(1, p.SecuPwdFlag)},
           {"OperNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.OperNo)},
           {"RequestID", p.RequestID},
           {"TID", p.TID},
           {"TransferStatus", std::string(1, p.TransferStatus)},
           {"ErrorID", p.ErrorID},
           {"ErrorMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.ErrorMsg)},
           {"LongCustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.LongCustomerName)},
  };
}

void from_json(const json& j, CThostFtdcRspRepealField& p) {
  j.at("RepealTimeInterval").get_to(p.RepealTimeInterval);
  j.at("RepealedTimes").get_to(p.RepealedTimes);
  auto &v2 = j.at("BankRepealFlag").get_ref<const std::string &>();
  p.BankRepealFlag = v2.at(0);
  auto &v3 = j.at("BrokerRepealFlag").get_ref<const std::string &>();
  p.BrokerRepealFlag = v3.at(0);
  j.at("PlateRepealSerial").get_to(p.PlateRepealSerial);
  auto &v5 = j.at("BankRepealSerial").get_ref<const std::string &>();
  std::strncpy(p.BankRepealSerial, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.BankRepealSerial));
  j.at("FutureRepealSerial").get_to(p.FutureRepealSerial);
  auto &v7 = j.at("TradeCode").get_ref<const std::string &>();
  std::strncpy(p.TradeCode, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.TradeCode));
  auto &v8 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.BankID));
  auto &v9 = j.at("BankBranchID").get_ref<const std::string &>();
  std::strncpy(p.BankBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.BankBranchID));
  auto &v10 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v11 = j.at("BrokerBranchID").get_ref<const std::string &>();
  std::strncpy(p.BrokerBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.BrokerBranchID));
  auto &v12 = j.at("TradeDate").get_ref<const std::string &>();
  std::strncpy(p.TradeDate, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.TradeDate));
  auto &v13 = j.at("TradeTime").get_ref<const std::string &>();
  std::strncpy(p.TradeTime, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.TradeTime));
  auto &v14 = j.at("BankSerial").get_ref<const std::string &>();
  std::strncpy(p.BankSerial, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.BankSerial));
  auto &v15 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("PlateSerial").get_to(p.PlateSerial);
  auto &v17 = j.at("LastFragment").get_ref<const std::string &>();
  p.LastFragment = v17.at(0);
  j.at("SessionID").get_to(p.SessionID);
  auto &v19 = j.at("CustomerName").get_ref<const std::string &>();
  std::strncpy(p.CustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.CustomerName));
  auto &v20 = j.at("IdCardType").get_ref<const std::string &>();
  p.IdCardType = v20.at(0);
  auto &v21 = j.at("IdentifiedCardNo").get_ref<const std::string &>();
  std::strncpy(p.IdentifiedCardNo, codec_convert("GBK//TRANSLIT", "UTF-8", v21.c_str()).c_str(), sizeof(p.IdentifiedCardNo));
  auto &v22 = j.at("CustType").get_ref<const std::string &>();
  p.CustType = v22.at(0);
  auto &v23 = j.at("BankAccount").get_ref<const std::string &>();
  std::strncpy(p.BankAccount, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.BankAccount));
  auto &v24 = j.at("BankPassWord").get_ref<const std::string &>();
  std::strncpy(p.BankPassWord, codec_convert("GBK//TRANSLIT", "UTF-8", v24.c_str()).c_str(), sizeof(p.BankPassWord));
  auto &v25 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v25.c_str()).c_str(), sizeof(p.AccountID));
  auto &v26 = j.at("Password").get_ref<const std::string &>();
  std::strncpy(p.Password, codec_convert("GBK//TRANSLIT", "UTF-8", v26.c_str()).c_str(), sizeof(p.Password));
  j.at("InstallID").get_to(p.InstallID);
  j.at("FutureSerial").get_to(p.FutureSerial);
  auto &v29 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v29.c_str()).c_str(), sizeof(p.UserID));
  auto &v30 = j.at("VerifyCertNoFlag").get_ref<const std::string &>();
  p.VerifyCertNoFlag = v30.at(0);
  auto &v31 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v31.c_str()).c_str(), sizeof(p.CurrencyID));
  j.at("TradeAmount").get_to(p.TradeAmount);
  j.at("FutureFetchAmount").get_to(p.FutureFetchAmount);
  auto &v34 = j.at("FeePayFlag").get_ref<const std::string &>();
  p.FeePayFlag = v34.at(0);
  j.at("CustFee").get_to(p.CustFee);
  j.at("BrokerFee").get_to(p.BrokerFee);
  auto &v37 = j.at("Message").get_ref<const std::string &>();
  std::strncpy(p.Message, codec_convert("GBK//TRANSLIT", "UTF-8", v37.c_str()).c_str(), sizeof(p.Message));
  auto &v38 = j.at("Digest").get_ref<const std::string &>();
  std::strncpy(p.Digest, codec_convert("GBK//TRANSLIT", "UTF-8", v38.c_str()).c_str(), sizeof(p.Digest));
  auto &v39 = j.at("BankAccType").get_ref<const std::string &>();
  p.BankAccType = v39.at(0);
  auto &v40 = j.at("DeviceID").get_ref<const std::string &>();
  std::strncpy(p.DeviceID, codec_convert("GBK//TRANSLIT", "UTF-8", v40.c_str()).c_str(), sizeof(p.DeviceID));
  auto &v41 = j.at("BankSecuAccType").get_ref<const std::string &>();
  p.BankSecuAccType = v41.at(0);
  auto &v42 = j.at("BrokerIDByBank").get_ref<const std::string &>();
  std::strncpy(p.BrokerIDByBank, codec_convert("GBK//TRANSLIT", "UTF-8", v42.c_str()).c_str(), sizeof(p.BrokerIDByBank));
  auto &v43 = j.at("BankSecuAcc").get_ref<const std::string &>();
  std::strncpy(p.BankSecuAcc, codec_convert("GBK//TRANSLIT", "UTF-8", v43.c_str()).c_str(), sizeof(p.BankSecuAcc));
  auto &v44 = j.at("BankPwdFlag").get_ref<const std::string &>();
  p.BankPwdFlag = v44.at(0);
  auto &v45 = j.at("SecuPwdFlag").get_ref<const std::string &>();
  p.SecuPwdFlag = v45.at(0);
  auto &v46 = j.at("OperNo").get_ref<const std::string &>();
  std::strncpy(p.OperNo, codec_convert("GBK//TRANSLIT", "UTF-8", v46.c_str()).c_str(), sizeof(p.OperNo));
  j.at("RequestID").get_to(p.RequestID);
  j.at("TID").get_to(p.TID);
  auto &v49 = j.at("TransferStatus").get_ref<const std::string &>();
  p.TransferStatus = v49.at(0);
  j.at("ErrorID").get_to(p.ErrorID);
  auto &v51 = j.at("ErrorMsg").get_ref<const std::string &>();
  std::strncpy(p.ErrorMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v51.c_str()).c_str(), sizeof(p.ErrorMsg));
  auto &v52 = j.at("LongCustomerName").get_ref<const std::string &>();
  std::strncpy(p.LongCustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v52.c_str()).c_str(), sizeof(p.LongCustomerName));

}



void to_json(json& j, const CThostFtdcReqQueryAccountField& p) {
  j = json{
           {"TradeCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeCode)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBranchID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BrokerBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerBranchID)},
           {"TradeDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDate)},
           {"TradeTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTime)},
           {"BankSerial", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSerial)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"PlateSerial", p.PlateSerial},
           {"LastFragment", std::string(1, p.LastFragment)},
           {"SessionID", p.SessionID},
           {"CustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.CustomerName)},
           {"IdCardType", std::string(1, p.IdCardType)},
           {"IdentifiedCardNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.IdentifiedCardNo)},
           {"CustType", std::string(1, p.CustType)},
           {"BankAccount", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankAccount)},
           {"BankPassWord", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankPassWord)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"Password", codec_convert("UTF-8//TRANSLIT", "GBK", p.Password)},
           {"FutureSerial", p.FutureSerial},
           {"InstallID", p.InstallID},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"VerifyCertNoFlag", std::string(1, p.VerifyCertNoFlag)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"Digest", codec_convert("UTF-8//TRANSLIT", "GBK", p.Digest)},
           {"BankAccType", std::string(1, p.BankAccType)},
           {"DeviceID", codec_convert("UTF-8//TRANSLIT", "GBK", p.DeviceID)},
           {"BankSecuAccType", std::string(1, p.BankSecuAccType)},
           {"BrokerIDByBank", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerIDByBank)},
           {"BankSecuAcc", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSecuAcc)},
           {"BankPwdFlag", std::string(1, p.BankPwdFlag)},
           {"SecuPwdFlag", std::string(1, p.SecuPwdFlag)},
           {"OperNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.OperNo)},
           {"RequestID", p.RequestID},
           {"TID", p.TID},
           {"LongCustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.LongCustomerName)},
  };
}

void from_json(const json& j, CThostFtdcReqQueryAccountField& p) {
  auto &v0 = j.at("TradeCode").get_ref<const std::string &>();
  std::strncpy(p.TradeCode, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradeCode));
  auto &v1 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BankID));
  auto &v2 = j.at("BankBranchID").get_ref<const std::string &>();
  std::strncpy(p.BankBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BankBranchID));
  auto &v3 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v4 = j.at("BrokerBranchID").get_ref<const std::string &>();
  std::strncpy(p.BrokerBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.BrokerBranchID));
  auto &v5 = j.at("TradeDate").get_ref<const std::string &>();
  std::strncpy(p.TradeDate, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.TradeDate));
  auto &v6 = j.at("TradeTime").get_ref<const std::string &>();
  std::strncpy(p.TradeTime, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.TradeTime));
  auto &v7 = j.at("BankSerial").get_ref<const std::string &>();
  std::strncpy(p.BankSerial, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BankSerial));
  auto &v8 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("PlateSerial").get_to(p.PlateSerial);
  auto &v10 = j.at("LastFragment").get_ref<const std::string &>();
  p.LastFragment = v10.at(0);
  j.at("SessionID").get_to(p.SessionID);
  auto &v12 = j.at("CustomerName").get_ref<const std::string &>();
  std::strncpy(p.CustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.CustomerName));
  auto &v13 = j.at("IdCardType").get_ref<const std::string &>();
  p.IdCardType = v13.at(0);
  auto &v14 = j.at("IdentifiedCardNo").get_ref<const std::string &>();
  std::strncpy(p.IdentifiedCardNo, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.IdentifiedCardNo));
  auto &v15 = j.at("CustType").get_ref<const std::string &>();
  p.CustType = v15.at(0);
  auto &v16 = j.at("BankAccount").get_ref<const std::string &>();
  std::strncpy(p.BankAccount, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.BankAccount));
  auto &v17 = j.at("BankPassWord").get_ref<const std::string &>();
  std::strncpy(p.BankPassWord, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.BankPassWord));
  auto &v18 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.AccountID));
  auto &v19 = j.at("Password").get_ref<const std::string &>();
  std::strncpy(p.Password, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.Password));
  j.at("FutureSerial").get_to(p.FutureSerial);
  j.at("InstallID").get_to(p.InstallID);
  auto &v22 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.UserID));
  auto &v23 = j.at("VerifyCertNoFlag").get_ref<const std::string &>();
  p.VerifyCertNoFlag = v23.at(0);
  auto &v24 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v24.c_str()).c_str(), sizeof(p.CurrencyID));
  auto &v25 = j.at("Digest").get_ref<const std::string &>();
  std::strncpy(p.Digest, codec_convert("GBK//TRANSLIT", "UTF-8", v25.c_str()).c_str(), sizeof(p.Digest));
  auto &v26 = j.at("BankAccType").get_ref<const std::string &>();
  p.BankAccType = v26.at(0);
  auto &v27 = j.at("DeviceID").get_ref<const std::string &>();
  std::strncpy(p.DeviceID, codec_convert("GBK//TRANSLIT", "UTF-8", v27.c_str()).c_str(), sizeof(p.DeviceID));
  auto &v28 = j.at("BankSecuAccType").get_ref<const std::string &>();
  p.BankSecuAccType = v28.at(0);
  auto &v29 = j.at("BrokerIDByBank").get_ref<const std::string &>();
  std::strncpy(p.BrokerIDByBank, codec_convert("GBK//TRANSLIT", "UTF-8", v29.c_str()).c_str(), sizeof(p.BrokerIDByBank));
  auto &v30 = j.at("BankSecuAcc").get_ref<const std::string &>();
  std::strncpy(p.BankSecuAcc, codec_convert("GBK//TRANSLIT", "UTF-8", v30.c_str()).c_str(), sizeof(p.BankSecuAcc));
  auto &v31 = j.at("BankPwdFlag").get_ref<const std::string &>();
  p.BankPwdFlag = v31.at(0);
  auto &v32 = j.at("SecuPwdFlag").get_ref<const std::string &>();
  p.SecuPwdFlag = v32.at(0);
  auto &v33 = j.at("OperNo").get_ref<const std::string &>();
  std::strncpy(p.OperNo, codec_convert("GBK//TRANSLIT", "UTF-8", v33.c_str()).c_str(), sizeof(p.OperNo));
  j.at("RequestID").get_to(p.RequestID);
  j.at("TID").get_to(p.TID);
  auto &v36 = j.at("LongCustomerName").get_ref<const std::string &>();
  std::strncpy(p.LongCustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v36.c_str()).c_str(), sizeof(p.LongCustomerName));

}



void to_json(json& j, const CThostFtdcRspQueryAccountField& p) {
  j = json{
           {"TradeCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeCode)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBranchID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BrokerBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerBranchID)},
           {"TradeDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDate)},
           {"TradeTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTime)},
           {"BankSerial", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSerial)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"PlateSerial", p.PlateSerial},
           {"LastFragment", std::string(1, p.LastFragment)},
           {"SessionID", p.SessionID},
           {"CustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.CustomerName)},
           {"IdCardType", std::string(1, p.IdCardType)},
           {"IdentifiedCardNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.IdentifiedCardNo)},
           {"CustType", std::string(1, p.CustType)},
           {"BankAccount", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankAccount)},
           {"BankPassWord", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankPassWord)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"Password", codec_convert("UTF-8//TRANSLIT", "GBK", p.Password)},
           {"FutureSerial", p.FutureSerial},
           {"InstallID", p.InstallID},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"VerifyCertNoFlag", std::string(1, p.VerifyCertNoFlag)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"Digest", codec_convert("UTF-8//TRANSLIT", "GBK", p.Digest)},
           {"BankAccType", std::string(1, p.BankAccType)},
           {"DeviceID", codec_convert("UTF-8//TRANSLIT", "GBK", p.DeviceID)},
           {"BankSecuAccType", std::string(1, p.BankSecuAccType)},
           {"BrokerIDByBank", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerIDByBank)},
           {"BankSecuAcc", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSecuAcc)},
           {"BankPwdFlag", std::string(1, p.BankPwdFlag)},
           {"SecuPwdFlag", std::string(1, p.SecuPwdFlag)},
           {"OperNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.OperNo)},
           {"RequestID", p.RequestID},
           {"TID", p.TID},
           {"BankUseAmount", p.BankUseAmount},
           {"BankFetchAmount", p.BankFetchAmount},
           {"LongCustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.LongCustomerName)},
  };
}

void from_json(const json& j, CThostFtdcRspQueryAccountField& p) {
  auto &v0 = j.at("TradeCode").get_ref<const std::string &>();
  std::strncpy(p.TradeCode, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradeCode));
  auto &v1 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BankID));
  auto &v2 = j.at("BankBranchID").get_ref<const std::string &>();
  std::strncpy(p.BankBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BankBranchID));
  auto &v3 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v4 = j.at("BrokerBranchID").get_ref<const std::string &>();
  std::strncpy(p.BrokerBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.BrokerBranchID));
  auto &v5 = j.at("TradeDate").get_ref<const std::string &>();
  std::strncpy(p.TradeDate, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.TradeDate));
  auto &v6 = j.at("TradeTime").get_ref<const std::string &>();
  std::strncpy(p.TradeTime, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.TradeTime));
  auto &v7 = j.at("BankSerial").get_ref<const std::string &>();
  std::strncpy(p.BankSerial, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BankSerial));
  auto &v8 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("PlateSerial").get_to(p.PlateSerial);
  auto &v10 = j.at("LastFragment").get_ref<const std::string &>();
  p.LastFragment = v10.at(0);
  j.at("SessionID").get_to(p.SessionID);
  auto &v12 = j.at("CustomerName").get_ref<const std::string &>();
  std::strncpy(p.CustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.CustomerName));
  auto &v13 = j.at("IdCardType").get_ref<const std::string &>();
  p.IdCardType = v13.at(0);
  auto &v14 = j.at("IdentifiedCardNo").get_ref<const std::string &>();
  std::strncpy(p.IdentifiedCardNo, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.IdentifiedCardNo));
  auto &v15 = j.at("CustType").get_ref<const std::string &>();
  p.CustType = v15.at(0);
  auto &v16 = j.at("BankAccount").get_ref<const std::string &>();
  std::strncpy(p.BankAccount, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.BankAccount));
  auto &v17 = j.at("BankPassWord").get_ref<const std::string &>();
  std::strncpy(p.BankPassWord, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.BankPassWord));
  auto &v18 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.AccountID));
  auto &v19 = j.at("Password").get_ref<const std::string &>();
  std::strncpy(p.Password, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.Password));
  j.at("FutureSerial").get_to(p.FutureSerial);
  j.at("InstallID").get_to(p.InstallID);
  auto &v22 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.UserID));
  auto &v23 = j.at("VerifyCertNoFlag").get_ref<const std::string &>();
  p.VerifyCertNoFlag = v23.at(0);
  auto &v24 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v24.c_str()).c_str(), sizeof(p.CurrencyID));
  auto &v25 = j.at("Digest").get_ref<const std::string &>();
  std::strncpy(p.Digest, codec_convert("GBK//TRANSLIT", "UTF-8", v25.c_str()).c_str(), sizeof(p.Digest));
  auto &v26 = j.at("BankAccType").get_ref<const std::string &>();
  p.BankAccType = v26.at(0);
  auto &v27 = j.at("DeviceID").get_ref<const std::string &>();
  std::strncpy(p.DeviceID, codec_convert("GBK//TRANSLIT", "UTF-8", v27.c_str()).c_str(), sizeof(p.DeviceID));
  auto &v28 = j.at("BankSecuAccType").get_ref<const std::string &>();
  p.BankSecuAccType = v28.at(0);
  auto &v29 = j.at("BrokerIDByBank").get_ref<const std::string &>();
  std::strncpy(p.BrokerIDByBank, codec_convert("GBK//TRANSLIT", "UTF-8", v29.c_str()).c_str(), sizeof(p.BrokerIDByBank));
  auto &v30 = j.at("BankSecuAcc").get_ref<const std::string &>();
  std::strncpy(p.BankSecuAcc, codec_convert("GBK//TRANSLIT", "UTF-8", v30.c_str()).c_str(), sizeof(p.BankSecuAcc));
  auto &v31 = j.at("BankPwdFlag").get_ref<const std::string &>();
  p.BankPwdFlag = v31.at(0);
  auto &v32 = j.at("SecuPwdFlag").get_ref<const std::string &>();
  p.SecuPwdFlag = v32.at(0);
  auto &v33 = j.at("OperNo").get_ref<const std::string &>();
  std::strncpy(p.OperNo, codec_convert("GBK//TRANSLIT", "UTF-8", v33.c_str()).c_str(), sizeof(p.OperNo));
  j.at("RequestID").get_to(p.RequestID);
  j.at("TID").get_to(p.TID);
  j.at("BankUseAmount").get_to(p.BankUseAmount);
  j.at("BankFetchAmount").get_to(p.BankFetchAmount);
  auto &v38 = j.at("LongCustomerName").get_ref<const std::string &>();
  std::strncpy(p.LongCustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v38.c_str()).c_str(), sizeof(p.LongCustomerName));

}



void to_json(json& j, const CThostFtdcFutureSignIOField& p) {
  j = json{
           {"TradeCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeCode)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBranchID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BrokerBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerBranchID)},
           {"TradeDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDate)},
           {"TradeTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTime)},
           {"BankSerial", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSerial)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"PlateSerial", p.PlateSerial},
           {"LastFragment", std::string(1, p.LastFragment)},
           {"SessionID", p.SessionID},
           {"InstallID", p.InstallID},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"Digest", codec_convert("UTF-8//TRANSLIT", "GBK", p.Digest)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"DeviceID", codec_convert("UTF-8//TRANSLIT", "GBK", p.DeviceID)},
           {"BrokerIDByBank", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerIDByBank)},
           {"OperNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.OperNo)},
           {"RequestID", p.RequestID},
           {"TID", p.TID},
  };
}

void from_json(const json& j, CThostFtdcFutureSignIOField& p) {
  auto &v0 = j.at("TradeCode").get_ref<const std::string &>();
  std::strncpy(p.TradeCode, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradeCode));
  auto &v1 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BankID));
  auto &v2 = j.at("BankBranchID").get_ref<const std::string &>();
  std::strncpy(p.BankBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BankBranchID));
  auto &v3 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v4 = j.at("BrokerBranchID").get_ref<const std::string &>();
  std::strncpy(p.BrokerBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.BrokerBranchID));
  auto &v5 = j.at("TradeDate").get_ref<const std::string &>();
  std::strncpy(p.TradeDate, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.TradeDate));
  auto &v6 = j.at("TradeTime").get_ref<const std::string &>();
  std::strncpy(p.TradeTime, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.TradeTime));
  auto &v7 = j.at("BankSerial").get_ref<const std::string &>();
  std::strncpy(p.BankSerial, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BankSerial));
  auto &v8 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("PlateSerial").get_to(p.PlateSerial);
  auto &v10 = j.at("LastFragment").get_ref<const std::string &>();
  p.LastFragment = v10.at(0);
  j.at("SessionID").get_to(p.SessionID);
  j.at("InstallID").get_to(p.InstallID);
  auto &v13 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.UserID));
  auto &v14 = j.at("Digest").get_ref<const std::string &>();
  std::strncpy(p.Digest, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.Digest));
  auto &v15 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.CurrencyID));
  auto &v16 = j.at("DeviceID").get_ref<const std::string &>();
  std::strncpy(p.DeviceID, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.DeviceID));
  auto &v17 = j.at("BrokerIDByBank").get_ref<const std::string &>();
  std::strncpy(p.BrokerIDByBank, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.BrokerIDByBank));
  auto &v18 = j.at("OperNo").get_ref<const std::string &>();
  std::strncpy(p.OperNo, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.OperNo));
  j.at("RequestID").get_to(p.RequestID);
  j.at("TID").get_to(p.TID);

}



void to_json(json& j, const CThostFtdcRspFutureSignInField& p) {
  j = json{
           {"TradeCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeCode)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBranchID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BrokerBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerBranchID)},
           {"TradeDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDate)},
           {"TradeTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTime)},
           {"BankSerial", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSerial)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"PlateSerial", p.PlateSerial},
           {"LastFragment", std::string(1, p.LastFragment)},
           {"SessionID", p.SessionID},
           {"InstallID", p.InstallID},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"Digest", codec_convert("UTF-8//TRANSLIT", "GBK", p.Digest)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"DeviceID", codec_convert("UTF-8//TRANSLIT", "GBK", p.DeviceID)},
           {"BrokerIDByBank", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerIDByBank)},
           {"OperNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.OperNo)},
           {"RequestID", p.RequestID},
           {"TID", p.TID},
           {"ErrorID", p.ErrorID},
           {"ErrorMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.ErrorMsg)},
           {"PinKey", codec_convert("UTF-8//TRANSLIT", "GBK", p.PinKey)},
           {"MacKey", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacKey)},
  };
}

void from_json(const json& j, CThostFtdcRspFutureSignInField& p) {
  auto &v0 = j.at("TradeCode").get_ref<const std::string &>();
  std::strncpy(p.TradeCode, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradeCode));
  auto &v1 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BankID));
  auto &v2 = j.at("BankBranchID").get_ref<const std::string &>();
  std::strncpy(p.BankBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BankBranchID));
  auto &v3 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v4 = j.at("BrokerBranchID").get_ref<const std::string &>();
  std::strncpy(p.BrokerBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.BrokerBranchID));
  auto &v5 = j.at("TradeDate").get_ref<const std::string &>();
  std::strncpy(p.TradeDate, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.TradeDate));
  auto &v6 = j.at("TradeTime").get_ref<const std::string &>();
  std::strncpy(p.TradeTime, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.TradeTime));
  auto &v7 = j.at("BankSerial").get_ref<const std::string &>();
  std::strncpy(p.BankSerial, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BankSerial));
  auto &v8 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("PlateSerial").get_to(p.PlateSerial);
  auto &v10 = j.at("LastFragment").get_ref<const std::string &>();
  p.LastFragment = v10.at(0);
  j.at("SessionID").get_to(p.SessionID);
  j.at("InstallID").get_to(p.InstallID);
  auto &v13 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.UserID));
  auto &v14 = j.at("Digest").get_ref<const std::string &>();
  std::strncpy(p.Digest, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.Digest));
  auto &v15 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.CurrencyID));
  auto &v16 = j.at("DeviceID").get_ref<const std::string &>();
  std::strncpy(p.DeviceID, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.DeviceID));
  auto &v17 = j.at("BrokerIDByBank").get_ref<const std::string &>();
  std::strncpy(p.BrokerIDByBank, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.BrokerIDByBank));
  auto &v18 = j.at("OperNo").get_ref<const std::string &>();
  std::strncpy(p.OperNo, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.OperNo));
  j.at("RequestID").get_to(p.RequestID);
  j.at("TID").get_to(p.TID);
  j.at("ErrorID").get_to(p.ErrorID);
  auto &v22 = j.at("ErrorMsg").get_ref<const std::string &>();
  std::strncpy(p.ErrorMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.ErrorMsg));
  auto &v23 = j.at("PinKey").get_ref<const std::string &>();
  std::strncpy(p.PinKey, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.PinKey));
  auto &v24 = j.at("MacKey").get_ref<const std::string &>();
  std::strncpy(p.MacKey, codec_convert("GBK//TRANSLIT", "UTF-8", v24.c_str()).c_str(), sizeof(p.MacKey));

}



void to_json(json& j, const CThostFtdcReqFutureSignOutField& p) {
  j = json{
           {"TradeCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeCode)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBranchID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BrokerBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerBranchID)},
           {"TradeDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDate)},
           {"TradeTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTime)},
           {"BankSerial", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSerial)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"PlateSerial", p.PlateSerial},
           {"LastFragment", std::string(1, p.LastFragment)},
           {"SessionID", p.SessionID},
           {"InstallID", p.InstallID},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"Digest", codec_convert("UTF-8//TRANSLIT", "GBK", p.Digest)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"DeviceID", codec_convert("UTF-8//TRANSLIT", "GBK", p.DeviceID)},
           {"BrokerIDByBank", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerIDByBank)},
           {"OperNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.OperNo)},
           {"RequestID", p.RequestID},
           {"TID", p.TID},
  };
}

void from_json(const json& j, CThostFtdcReqFutureSignOutField& p) {
  auto &v0 = j.at("TradeCode").get_ref<const std::string &>();
  std::strncpy(p.TradeCode, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradeCode));
  auto &v1 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BankID));
  auto &v2 = j.at("BankBranchID").get_ref<const std::string &>();
  std::strncpy(p.BankBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BankBranchID));
  auto &v3 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v4 = j.at("BrokerBranchID").get_ref<const std::string &>();
  std::strncpy(p.BrokerBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.BrokerBranchID));
  auto &v5 = j.at("TradeDate").get_ref<const std::string &>();
  std::strncpy(p.TradeDate, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.TradeDate));
  auto &v6 = j.at("TradeTime").get_ref<const std::string &>();
  std::strncpy(p.TradeTime, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.TradeTime));
  auto &v7 = j.at("BankSerial").get_ref<const std::string &>();
  std::strncpy(p.BankSerial, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BankSerial));
  auto &v8 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("PlateSerial").get_to(p.PlateSerial);
  auto &v10 = j.at("LastFragment").get_ref<const std::string &>();
  p.LastFragment = v10.at(0);
  j.at("SessionID").get_to(p.SessionID);
  j.at("InstallID").get_to(p.InstallID);
  auto &v13 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.UserID));
  auto &v14 = j.at("Digest").get_ref<const std::string &>();
  std::strncpy(p.Digest, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.Digest));
  auto &v15 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.CurrencyID));
  auto &v16 = j.at("DeviceID").get_ref<const std::string &>();
  std::strncpy(p.DeviceID, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.DeviceID));
  auto &v17 = j.at("BrokerIDByBank").get_ref<const std::string &>();
  std::strncpy(p.BrokerIDByBank, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.BrokerIDByBank));
  auto &v18 = j.at("OperNo").get_ref<const std::string &>();
  std::strncpy(p.OperNo, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.OperNo));
  j.at("RequestID").get_to(p.RequestID);
  j.at("TID").get_to(p.TID);

}



void to_json(json& j, const CThostFtdcRspFutureSignOutField& p) {
  j = json{
           {"TradeCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeCode)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBranchID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BrokerBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerBranchID)},
           {"TradeDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDate)},
           {"TradeTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTime)},
           {"BankSerial", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSerial)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"PlateSerial", p.PlateSerial},
           {"LastFragment", std::string(1, p.LastFragment)},
           {"SessionID", p.SessionID},
           {"InstallID", p.InstallID},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"Digest", codec_convert("UTF-8//TRANSLIT", "GBK", p.Digest)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"DeviceID", codec_convert("UTF-8//TRANSLIT", "GBK", p.DeviceID)},
           {"BrokerIDByBank", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerIDByBank)},
           {"OperNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.OperNo)},
           {"RequestID", p.RequestID},
           {"TID", p.TID},
           {"ErrorID", p.ErrorID},
           {"ErrorMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.ErrorMsg)},
  };
}

void from_json(const json& j, CThostFtdcRspFutureSignOutField& p) {
  auto &v0 = j.at("TradeCode").get_ref<const std::string &>();
  std::strncpy(p.TradeCode, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradeCode));
  auto &v1 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BankID));
  auto &v2 = j.at("BankBranchID").get_ref<const std::string &>();
  std::strncpy(p.BankBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BankBranchID));
  auto &v3 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v4 = j.at("BrokerBranchID").get_ref<const std::string &>();
  std::strncpy(p.BrokerBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.BrokerBranchID));
  auto &v5 = j.at("TradeDate").get_ref<const std::string &>();
  std::strncpy(p.TradeDate, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.TradeDate));
  auto &v6 = j.at("TradeTime").get_ref<const std::string &>();
  std::strncpy(p.TradeTime, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.TradeTime));
  auto &v7 = j.at("BankSerial").get_ref<const std::string &>();
  std::strncpy(p.BankSerial, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BankSerial));
  auto &v8 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("PlateSerial").get_to(p.PlateSerial);
  auto &v10 = j.at("LastFragment").get_ref<const std::string &>();
  p.LastFragment = v10.at(0);
  j.at("SessionID").get_to(p.SessionID);
  j.at("InstallID").get_to(p.InstallID);
  auto &v13 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.UserID));
  auto &v14 = j.at("Digest").get_ref<const std::string &>();
  std::strncpy(p.Digest, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.Digest));
  auto &v15 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.CurrencyID));
  auto &v16 = j.at("DeviceID").get_ref<const std::string &>();
  std::strncpy(p.DeviceID, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.DeviceID));
  auto &v17 = j.at("BrokerIDByBank").get_ref<const std::string &>();
  std::strncpy(p.BrokerIDByBank, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.BrokerIDByBank));
  auto &v18 = j.at("OperNo").get_ref<const std::string &>();
  std::strncpy(p.OperNo, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.OperNo));
  j.at("RequestID").get_to(p.RequestID);
  j.at("TID").get_to(p.TID);
  j.at("ErrorID").get_to(p.ErrorID);
  auto &v22 = j.at("ErrorMsg").get_ref<const std::string &>();
  std::strncpy(p.ErrorMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.ErrorMsg));

}



void to_json(json& j, const CThostFtdcReqQueryTradeResultBySerialField& p) {
  j = json{
           {"TradeCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeCode)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBranchID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BrokerBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerBranchID)},
           {"TradeDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDate)},
           {"TradeTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTime)},
           {"BankSerial", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSerial)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"PlateSerial", p.PlateSerial},
           {"LastFragment", std::string(1, p.LastFragment)},
           {"SessionID", p.SessionID},
           {"Reference", p.Reference},
           {"RefrenceIssureType", std::string(1, p.RefrenceIssureType)},
           {"RefrenceIssure", codec_convert("UTF-8//TRANSLIT", "GBK", p.RefrenceIssure)},
           {"CustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.CustomerName)},
           {"IdCardType", std::string(1, p.IdCardType)},
           {"IdentifiedCardNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.IdentifiedCardNo)},
           {"CustType", std::string(1, p.CustType)},
           {"BankAccount", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankAccount)},
           {"BankPassWord", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankPassWord)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"Password", codec_convert("UTF-8//TRANSLIT", "GBK", p.Password)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"TradeAmount", p.TradeAmount},
           {"Digest", codec_convert("UTF-8//TRANSLIT", "GBK", p.Digest)},
           {"LongCustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.LongCustomerName)},
  };
}

void from_json(const json& j, CThostFtdcReqQueryTradeResultBySerialField& p) {
  auto &v0 = j.at("TradeCode").get_ref<const std::string &>();
  std::strncpy(p.TradeCode, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradeCode));
  auto &v1 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BankID));
  auto &v2 = j.at("BankBranchID").get_ref<const std::string &>();
  std::strncpy(p.BankBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BankBranchID));
  auto &v3 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v4 = j.at("BrokerBranchID").get_ref<const std::string &>();
  std::strncpy(p.BrokerBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.BrokerBranchID));
  auto &v5 = j.at("TradeDate").get_ref<const std::string &>();
  std::strncpy(p.TradeDate, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.TradeDate));
  auto &v6 = j.at("TradeTime").get_ref<const std::string &>();
  std::strncpy(p.TradeTime, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.TradeTime));
  auto &v7 = j.at("BankSerial").get_ref<const std::string &>();
  std::strncpy(p.BankSerial, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BankSerial));
  auto &v8 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("PlateSerial").get_to(p.PlateSerial);
  auto &v10 = j.at("LastFragment").get_ref<const std::string &>();
  p.LastFragment = v10.at(0);
  j.at("SessionID").get_to(p.SessionID);
  j.at("Reference").get_to(p.Reference);
  auto &v13 = j.at("RefrenceIssureType").get_ref<const std::string &>();
  p.RefrenceIssureType = v13.at(0);
  auto &v14 = j.at("RefrenceIssure").get_ref<const std::string &>();
  std::strncpy(p.RefrenceIssure, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.RefrenceIssure));
  auto &v15 = j.at("CustomerName").get_ref<const std::string &>();
  std::strncpy(p.CustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.CustomerName));
  auto &v16 = j.at("IdCardType").get_ref<const std::string &>();
  p.IdCardType = v16.at(0);
  auto &v17 = j.at("IdentifiedCardNo").get_ref<const std::string &>();
  std::strncpy(p.IdentifiedCardNo, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.IdentifiedCardNo));
  auto &v18 = j.at("CustType").get_ref<const std::string &>();
  p.CustType = v18.at(0);
  auto &v19 = j.at("BankAccount").get_ref<const std::string &>();
  std::strncpy(p.BankAccount, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.BankAccount));
  auto &v20 = j.at("BankPassWord").get_ref<const std::string &>();
  std::strncpy(p.BankPassWord, codec_convert("GBK//TRANSLIT", "UTF-8", v20.c_str()).c_str(), sizeof(p.BankPassWord));
  auto &v21 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v21.c_str()).c_str(), sizeof(p.AccountID));
  auto &v22 = j.at("Password").get_ref<const std::string &>();
  std::strncpy(p.Password, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.Password));
  auto &v23 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.CurrencyID));
  j.at("TradeAmount").get_to(p.TradeAmount);
  auto &v25 = j.at("Digest").get_ref<const std::string &>();
  std::strncpy(p.Digest, codec_convert("GBK//TRANSLIT", "UTF-8", v25.c_str()).c_str(), sizeof(p.Digest));
  auto &v26 = j.at("LongCustomerName").get_ref<const std::string &>();
  std::strncpy(p.LongCustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v26.c_str()).c_str(), sizeof(p.LongCustomerName));

}



void to_json(json& j, const CThostFtdcRspQueryTradeResultBySerialField& p) {
  j = json{
           {"TradeCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeCode)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBranchID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BrokerBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerBranchID)},
           {"TradeDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDate)},
           {"TradeTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTime)},
           {"BankSerial", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSerial)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"PlateSerial", p.PlateSerial},
           {"LastFragment", std::string(1, p.LastFragment)},
           {"SessionID", p.SessionID},
           {"ErrorID", p.ErrorID},
           {"ErrorMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.ErrorMsg)},
           {"Reference", p.Reference},
           {"RefrenceIssureType", std::string(1, p.RefrenceIssureType)},
           {"RefrenceIssure", codec_convert("UTF-8//TRANSLIT", "GBK", p.RefrenceIssure)},
           {"OriginReturnCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.OriginReturnCode)},
           {"OriginDescrInfoForReturnCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.OriginDescrInfoForReturnCode)},
           {"BankAccount", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankAccount)},
           {"BankPassWord", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankPassWord)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"Password", codec_convert("UTF-8//TRANSLIT", "GBK", p.Password)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"TradeAmount", p.TradeAmount},
           {"Digest", codec_convert("UTF-8//TRANSLIT", "GBK", p.Digest)},
  };
}

void from_json(const json& j, CThostFtdcRspQueryTradeResultBySerialField& p) {
  auto &v0 = j.at("TradeCode").get_ref<const std::string &>();
  std::strncpy(p.TradeCode, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradeCode));
  auto &v1 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BankID));
  auto &v2 = j.at("BankBranchID").get_ref<const std::string &>();
  std::strncpy(p.BankBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BankBranchID));
  auto &v3 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v4 = j.at("BrokerBranchID").get_ref<const std::string &>();
  std::strncpy(p.BrokerBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.BrokerBranchID));
  auto &v5 = j.at("TradeDate").get_ref<const std::string &>();
  std::strncpy(p.TradeDate, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.TradeDate));
  auto &v6 = j.at("TradeTime").get_ref<const std::string &>();
  std::strncpy(p.TradeTime, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.TradeTime));
  auto &v7 = j.at("BankSerial").get_ref<const std::string &>();
  std::strncpy(p.BankSerial, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BankSerial));
  auto &v8 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("PlateSerial").get_to(p.PlateSerial);
  auto &v10 = j.at("LastFragment").get_ref<const std::string &>();
  p.LastFragment = v10.at(0);
  j.at("SessionID").get_to(p.SessionID);
  j.at("ErrorID").get_to(p.ErrorID);
  auto &v13 = j.at("ErrorMsg").get_ref<const std::string &>();
  std::strncpy(p.ErrorMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.ErrorMsg));
  j.at("Reference").get_to(p.Reference);
  auto &v15 = j.at("RefrenceIssureType").get_ref<const std::string &>();
  p.RefrenceIssureType = v15.at(0);
  auto &v16 = j.at("RefrenceIssure").get_ref<const std::string &>();
  std::strncpy(p.RefrenceIssure, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.RefrenceIssure));
  auto &v17 = j.at("OriginReturnCode").get_ref<const std::string &>();
  std::strncpy(p.OriginReturnCode, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.OriginReturnCode));
  auto &v18 = j.at("OriginDescrInfoForReturnCode").get_ref<const std::string &>();
  std::strncpy(p.OriginDescrInfoForReturnCode, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.OriginDescrInfoForReturnCode));
  auto &v19 = j.at("BankAccount").get_ref<const std::string &>();
  std::strncpy(p.BankAccount, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.BankAccount));
  auto &v20 = j.at("BankPassWord").get_ref<const std::string &>();
  std::strncpy(p.BankPassWord, codec_convert("GBK//TRANSLIT", "UTF-8", v20.c_str()).c_str(), sizeof(p.BankPassWord));
  auto &v21 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v21.c_str()).c_str(), sizeof(p.AccountID));
  auto &v22 = j.at("Password").get_ref<const std::string &>();
  std::strncpy(p.Password, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.Password));
  auto &v23 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.CurrencyID));
  j.at("TradeAmount").get_to(p.TradeAmount);
  auto &v25 = j.at("Digest").get_ref<const std::string &>();
  std::strncpy(p.Digest, codec_convert("GBK//TRANSLIT", "UTF-8", v25.c_str()).c_str(), sizeof(p.Digest));

}



void to_json(json& j, const CThostFtdcReqDayEndFileReadyField& p) {
  j = json{
           {"TradeCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeCode)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBranchID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BrokerBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerBranchID)},
           {"TradeDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDate)},
           {"TradeTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTime)},
           {"BankSerial", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSerial)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"PlateSerial", p.PlateSerial},
           {"LastFragment", std::string(1, p.LastFragment)},
           {"SessionID", p.SessionID},
           {"FileBusinessCode", std::string(1, p.FileBusinessCode)},
           {"Digest", codec_convert("UTF-8//TRANSLIT", "GBK", p.Digest)},
  };
}

void from_json(const json& j, CThostFtdcReqDayEndFileReadyField& p) {
  auto &v0 = j.at("TradeCode").get_ref<const std::string &>();
  std::strncpy(p.TradeCode, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradeCode));
  auto &v1 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BankID));
  auto &v2 = j.at("BankBranchID").get_ref<const std::string &>();
  std::strncpy(p.BankBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BankBranchID));
  auto &v3 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v4 = j.at("BrokerBranchID").get_ref<const std::string &>();
  std::strncpy(p.BrokerBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.BrokerBranchID));
  auto &v5 = j.at("TradeDate").get_ref<const std::string &>();
  std::strncpy(p.TradeDate, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.TradeDate));
  auto &v6 = j.at("TradeTime").get_ref<const std::string &>();
  std::strncpy(p.TradeTime, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.TradeTime));
  auto &v7 = j.at("BankSerial").get_ref<const std::string &>();
  std::strncpy(p.BankSerial, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BankSerial));
  auto &v8 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("PlateSerial").get_to(p.PlateSerial);
  auto &v10 = j.at("LastFragment").get_ref<const std::string &>();
  p.LastFragment = v10.at(0);
  j.at("SessionID").get_to(p.SessionID);
  auto &v12 = j.at("FileBusinessCode").get_ref<const std::string &>();
  p.FileBusinessCode = v12.at(0);
  auto &v13 = j.at("Digest").get_ref<const std::string &>();
  std::strncpy(p.Digest, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.Digest));

}



void to_json(json& j, const CThostFtdcReturnResultField& p) {
  j = json{
           {"ReturnCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.ReturnCode)},
           {"DescrInfoForReturnCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.DescrInfoForReturnCode)},
  };
}

void from_json(const json& j, CThostFtdcReturnResultField& p) {
  auto &v0 = j.at("ReturnCode").get_ref<const std::string &>();
  std::strncpy(p.ReturnCode, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ReturnCode));
  auto &v1 = j.at("DescrInfoForReturnCode").get_ref<const std::string &>();
  std::strncpy(p.DescrInfoForReturnCode, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.DescrInfoForReturnCode));

}



void to_json(json& j, const CThostFtdcVerifyFuturePasswordField& p) {
  j = json{
           {"TradeCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeCode)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBranchID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BrokerBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerBranchID)},
           {"TradeDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDate)},
           {"TradeTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTime)},
           {"BankSerial", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSerial)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"PlateSerial", p.PlateSerial},
           {"LastFragment", std::string(1, p.LastFragment)},
           {"SessionID", p.SessionID},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"Password", codec_convert("UTF-8//TRANSLIT", "GBK", p.Password)},
           {"BankAccount", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankAccount)},
           {"BankPassWord", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankPassWord)},
           {"InstallID", p.InstallID},
           {"TID", p.TID},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
  };
}

void from_json(const json& j, CThostFtdcVerifyFuturePasswordField& p) {
  auto &v0 = j.at("TradeCode").get_ref<const std::string &>();
  std::strncpy(p.TradeCode, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradeCode));
  auto &v1 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BankID));
  auto &v2 = j.at("BankBranchID").get_ref<const std::string &>();
  std::strncpy(p.BankBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BankBranchID));
  auto &v3 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v4 = j.at("BrokerBranchID").get_ref<const std::string &>();
  std::strncpy(p.BrokerBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.BrokerBranchID));
  auto &v5 = j.at("TradeDate").get_ref<const std::string &>();
  std::strncpy(p.TradeDate, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.TradeDate));
  auto &v6 = j.at("TradeTime").get_ref<const std::string &>();
  std::strncpy(p.TradeTime, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.TradeTime));
  auto &v7 = j.at("BankSerial").get_ref<const std::string &>();
  std::strncpy(p.BankSerial, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BankSerial));
  auto &v8 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("PlateSerial").get_to(p.PlateSerial);
  auto &v10 = j.at("LastFragment").get_ref<const std::string &>();
  p.LastFragment = v10.at(0);
  j.at("SessionID").get_to(p.SessionID);
  auto &v12 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.AccountID));
  auto &v13 = j.at("Password").get_ref<const std::string &>();
  std::strncpy(p.Password, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.Password));
  auto &v14 = j.at("BankAccount").get_ref<const std::string &>();
  std::strncpy(p.BankAccount, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.BankAccount));
  auto &v15 = j.at("BankPassWord").get_ref<const std::string &>();
  std::strncpy(p.BankPassWord, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.BankPassWord));
  j.at("InstallID").get_to(p.InstallID);
  j.at("TID").get_to(p.TID);
  auto &v18 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.CurrencyID));

}



void to_json(json& j, const CThostFtdcVerifyCustInfoField& p) {
  j = json{
           {"CustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.CustomerName)},
           {"IdCardType", std::string(1, p.IdCardType)},
           {"IdentifiedCardNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.IdentifiedCardNo)},
           {"CustType", std::string(1, p.CustType)},
           {"LongCustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.LongCustomerName)},
  };
}

void from_json(const json& j, CThostFtdcVerifyCustInfoField& p) {
  auto &v0 = j.at("CustomerName").get_ref<const std::string &>();
  std::strncpy(p.CustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.CustomerName));
  auto &v1 = j.at("IdCardType").get_ref<const std::string &>();
  p.IdCardType = v1.at(0);
  auto &v2 = j.at("IdentifiedCardNo").get_ref<const std::string &>();
  std::strncpy(p.IdentifiedCardNo, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.IdentifiedCardNo));
  auto &v3 = j.at("CustType").get_ref<const std::string &>();
  p.CustType = v3.at(0);
  auto &v4 = j.at("LongCustomerName").get_ref<const std::string &>();
  std::strncpy(p.LongCustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.LongCustomerName));

}



void to_json(json& j, const CThostFtdcVerifyFuturePasswordAndCustInfoField& p) {
  j = json{
           {"CustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.CustomerName)},
           {"IdCardType", std::string(1, p.IdCardType)},
           {"IdentifiedCardNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.IdentifiedCardNo)},
           {"CustType", std::string(1, p.CustType)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"Password", codec_convert("UTF-8//TRANSLIT", "GBK", p.Password)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"LongCustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.LongCustomerName)},
  };
}

void from_json(const json& j, CThostFtdcVerifyFuturePasswordAndCustInfoField& p) {
  auto &v0 = j.at("CustomerName").get_ref<const std::string &>();
  std::strncpy(p.CustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.CustomerName));
  auto &v1 = j.at("IdCardType").get_ref<const std::string &>();
  p.IdCardType = v1.at(0);
  auto &v2 = j.at("IdentifiedCardNo").get_ref<const std::string &>();
  std::strncpy(p.IdentifiedCardNo, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.IdentifiedCardNo));
  auto &v3 = j.at("CustType").get_ref<const std::string &>();
  p.CustType = v3.at(0);
  auto &v4 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.AccountID));
  auto &v5 = j.at("Password").get_ref<const std::string &>();
  std::strncpy(p.Password, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.Password));
  auto &v6 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.CurrencyID));
  auto &v7 = j.at("LongCustomerName").get_ref<const std::string &>();
  std::strncpy(p.LongCustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.LongCustomerName));

}



void to_json(json& j, const CThostFtdcDepositResultInformField& p) {
  j = json{
           {"DepositSeqNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.DepositSeqNo)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"Deposit", p.Deposit},
           {"RequestID", p.RequestID},
           {"ReturnCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.ReturnCode)},
           {"DescrInfoForReturnCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.DescrInfoForReturnCode)},
  };
}

void from_json(const json& j, CThostFtdcDepositResultInformField& p) {
  auto &v0 = j.at("DepositSeqNo").get_ref<const std::string &>();
  std::strncpy(p.DepositSeqNo, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.DepositSeqNo));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorID));
  j.at("Deposit").get_to(p.Deposit);
  j.at("RequestID").get_to(p.RequestID);
  auto &v5 = j.at("ReturnCode").get_ref<const std::string &>();
  std::strncpy(p.ReturnCode, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.ReturnCode));
  auto &v6 = j.at("DescrInfoForReturnCode").get_ref<const std::string &>();
  std::strncpy(p.DescrInfoForReturnCode, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.DescrInfoForReturnCode));

}



void to_json(json& j, const CThostFtdcReqSyncKeyField& p) {
  j = json{
           {"TradeCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeCode)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBranchID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BrokerBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerBranchID)},
           {"TradeDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDate)},
           {"TradeTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTime)},
           {"BankSerial", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSerial)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"PlateSerial", p.PlateSerial},
           {"LastFragment", std::string(1, p.LastFragment)},
           {"SessionID", p.SessionID},
           {"InstallID", p.InstallID},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"Message", codec_convert("UTF-8//TRANSLIT", "GBK", p.Message)},
           {"DeviceID", codec_convert("UTF-8//TRANSLIT", "GBK", p.DeviceID)},
           {"BrokerIDByBank", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerIDByBank)},
           {"OperNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.OperNo)},
           {"RequestID", p.RequestID},
           {"TID", p.TID},
  };
}

void from_json(const json& j, CThostFtdcReqSyncKeyField& p) {
  auto &v0 = j.at("TradeCode").get_ref<const std::string &>();
  std::strncpy(p.TradeCode, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradeCode));
  auto &v1 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BankID));
  auto &v2 = j.at("BankBranchID").get_ref<const std::string &>();
  std::strncpy(p.BankBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BankBranchID));
  auto &v3 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v4 = j.at("BrokerBranchID").get_ref<const std::string &>();
  std::strncpy(p.BrokerBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.BrokerBranchID));
  auto &v5 = j.at("TradeDate").get_ref<const std::string &>();
  std::strncpy(p.TradeDate, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.TradeDate));
  auto &v6 = j.at("TradeTime").get_ref<const std::string &>();
  std::strncpy(p.TradeTime, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.TradeTime));
  auto &v7 = j.at("BankSerial").get_ref<const std::string &>();
  std::strncpy(p.BankSerial, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BankSerial));
  auto &v8 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("PlateSerial").get_to(p.PlateSerial);
  auto &v10 = j.at("LastFragment").get_ref<const std::string &>();
  p.LastFragment = v10.at(0);
  j.at("SessionID").get_to(p.SessionID);
  j.at("InstallID").get_to(p.InstallID);
  auto &v13 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.UserID));
  auto &v14 = j.at("Message").get_ref<const std::string &>();
  std::strncpy(p.Message, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.Message));
  auto &v15 = j.at("DeviceID").get_ref<const std::string &>();
  std::strncpy(p.DeviceID, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.DeviceID));
  auto &v16 = j.at("BrokerIDByBank").get_ref<const std::string &>();
  std::strncpy(p.BrokerIDByBank, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.BrokerIDByBank));
  auto &v17 = j.at("OperNo").get_ref<const std::string &>();
  std::strncpy(p.OperNo, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.OperNo));
  j.at("RequestID").get_to(p.RequestID);
  j.at("TID").get_to(p.TID);

}



void to_json(json& j, const CThostFtdcRspSyncKeyField& p) {
  j = json{
           {"TradeCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeCode)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBranchID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BrokerBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerBranchID)},
           {"TradeDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDate)},
           {"TradeTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTime)},
           {"BankSerial", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSerial)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"PlateSerial", p.PlateSerial},
           {"LastFragment", std::string(1, p.LastFragment)},
           {"SessionID", p.SessionID},
           {"InstallID", p.InstallID},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"Message", codec_convert("UTF-8//TRANSLIT", "GBK", p.Message)},
           {"DeviceID", codec_convert("UTF-8//TRANSLIT", "GBK", p.DeviceID)},
           {"BrokerIDByBank", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerIDByBank)},
           {"OperNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.OperNo)},
           {"RequestID", p.RequestID},
           {"TID", p.TID},
           {"ErrorID", p.ErrorID},
           {"ErrorMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.ErrorMsg)},
  };
}

void from_json(const json& j, CThostFtdcRspSyncKeyField& p) {
  auto &v0 = j.at("TradeCode").get_ref<const std::string &>();
  std::strncpy(p.TradeCode, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradeCode));
  auto &v1 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BankID));
  auto &v2 = j.at("BankBranchID").get_ref<const std::string &>();
  std::strncpy(p.BankBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BankBranchID));
  auto &v3 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v4 = j.at("BrokerBranchID").get_ref<const std::string &>();
  std::strncpy(p.BrokerBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.BrokerBranchID));
  auto &v5 = j.at("TradeDate").get_ref<const std::string &>();
  std::strncpy(p.TradeDate, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.TradeDate));
  auto &v6 = j.at("TradeTime").get_ref<const std::string &>();
  std::strncpy(p.TradeTime, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.TradeTime));
  auto &v7 = j.at("BankSerial").get_ref<const std::string &>();
  std::strncpy(p.BankSerial, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BankSerial));
  auto &v8 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("PlateSerial").get_to(p.PlateSerial);
  auto &v10 = j.at("LastFragment").get_ref<const std::string &>();
  p.LastFragment = v10.at(0);
  j.at("SessionID").get_to(p.SessionID);
  j.at("InstallID").get_to(p.InstallID);
  auto &v13 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.UserID));
  auto &v14 = j.at("Message").get_ref<const std::string &>();
  std::strncpy(p.Message, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.Message));
  auto &v15 = j.at("DeviceID").get_ref<const std::string &>();
  std::strncpy(p.DeviceID, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.DeviceID));
  auto &v16 = j.at("BrokerIDByBank").get_ref<const std::string &>();
  std::strncpy(p.BrokerIDByBank, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.BrokerIDByBank));
  auto &v17 = j.at("OperNo").get_ref<const std::string &>();
  std::strncpy(p.OperNo, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.OperNo));
  j.at("RequestID").get_to(p.RequestID);
  j.at("TID").get_to(p.TID);
  j.at("ErrorID").get_to(p.ErrorID);
  auto &v21 = j.at("ErrorMsg").get_ref<const std::string &>();
  std::strncpy(p.ErrorMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v21.c_str()).c_str(), sizeof(p.ErrorMsg));

}



void to_json(json& j, const CThostFtdcNotifyQueryAccountField& p) {
  j = json{
           {"TradeCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeCode)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBranchID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BrokerBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerBranchID)},
           {"TradeDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDate)},
           {"TradeTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTime)},
           {"BankSerial", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSerial)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"PlateSerial", p.PlateSerial},
           {"LastFragment", std::string(1, p.LastFragment)},
           {"SessionID", p.SessionID},
           {"CustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.CustomerName)},
           {"IdCardType", std::string(1, p.IdCardType)},
           {"IdentifiedCardNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.IdentifiedCardNo)},
           {"CustType", std::string(1, p.CustType)},
           {"BankAccount", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankAccount)},
           {"BankPassWord", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankPassWord)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"Password", codec_convert("UTF-8//TRANSLIT", "GBK", p.Password)},
           {"FutureSerial", p.FutureSerial},
           {"InstallID", p.InstallID},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"VerifyCertNoFlag", std::string(1, p.VerifyCertNoFlag)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"Digest", codec_convert("UTF-8//TRANSLIT", "GBK", p.Digest)},
           {"BankAccType", std::string(1, p.BankAccType)},
           {"DeviceID", codec_convert("UTF-8//TRANSLIT", "GBK", p.DeviceID)},
           {"BankSecuAccType", std::string(1, p.BankSecuAccType)},
           {"BrokerIDByBank", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerIDByBank)},
           {"BankSecuAcc", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSecuAcc)},
           {"BankPwdFlag", std::string(1, p.BankPwdFlag)},
           {"SecuPwdFlag", std::string(1, p.SecuPwdFlag)},
           {"OperNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.OperNo)},
           {"RequestID", p.RequestID},
           {"TID", p.TID},
           {"BankUseAmount", p.BankUseAmount},
           {"BankFetchAmount", p.BankFetchAmount},
           {"ErrorID", p.ErrorID},
           {"ErrorMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.ErrorMsg)},
           {"LongCustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.LongCustomerName)},
  };
}

void from_json(const json& j, CThostFtdcNotifyQueryAccountField& p) {
  auto &v0 = j.at("TradeCode").get_ref<const std::string &>();
  std::strncpy(p.TradeCode, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradeCode));
  auto &v1 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BankID));
  auto &v2 = j.at("BankBranchID").get_ref<const std::string &>();
  std::strncpy(p.BankBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BankBranchID));
  auto &v3 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v4 = j.at("BrokerBranchID").get_ref<const std::string &>();
  std::strncpy(p.BrokerBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.BrokerBranchID));
  auto &v5 = j.at("TradeDate").get_ref<const std::string &>();
  std::strncpy(p.TradeDate, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.TradeDate));
  auto &v6 = j.at("TradeTime").get_ref<const std::string &>();
  std::strncpy(p.TradeTime, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.TradeTime));
  auto &v7 = j.at("BankSerial").get_ref<const std::string &>();
  std::strncpy(p.BankSerial, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BankSerial));
  auto &v8 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("PlateSerial").get_to(p.PlateSerial);
  auto &v10 = j.at("LastFragment").get_ref<const std::string &>();
  p.LastFragment = v10.at(0);
  j.at("SessionID").get_to(p.SessionID);
  auto &v12 = j.at("CustomerName").get_ref<const std::string &>();
  std::strncpy(p.CustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.CustomerName));
  auto &v13 = j.at("IdCardType").get_ref<const std::string &>();
  p.IdCardType = v13.at(0);
  auto &v14 = j.at("IdentifiedCardNo").get_ref<const std::string &>();
  std::strncpy(p.IdentifiedCardNo, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.IdentifiedCardNo));
  auto &v15 = j.at("CustType").get_ref<const std::string &>();
  p.CustType = v15.at(0);
  auto &v16 = j.at("BankAccount").get_ref<const std::string &>();
  std::strncpy(p.BankAccount, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.BankAccount));
  auto &v17 = j.at("BankPassWord").get_ref<const std::string &>();
  std::strncpy(p.BankPassWord, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.BankPassWord));
  auto &v18 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.AccountID));
  auto &v19 = j.at("Password").get_ref<const std::string &>();
  std::strncpy(p.Password, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.Password));
  j.at("FutureSerial").get_to(p.FutureSerial);
  j.at("InstallID").get_to(p.InstallID);
  auto &v22 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.UserID));
  auto &v23 = j.at("VerifyCertNoFlag").get_ref<const std::string &>();
  p.VerifyCertNoFlag = v23.at(0);
  auto &v24 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v24.c_str()).c_str(), sizeof(p.CurrencyID));
  auto &v25 = j.at("Digest").get_ref<const std::string &>();
  std::strncpy(p.Digest, codec_convert("GBK//TRANSLIT", "UTF-8", v25.c_str()).c_str(), sizeof(p.Digest));
  auto &v26 = j.at("BankAccType").get_ref<const std::string &>();
  p.BankAccType = v26.at(0);
  auto &v27 = j.at("DeviceID").get_ref<const std::string &>();
  std::strncpy(p.DeviceID, codec_convert("GBK//TRANSLIT", "UTF-8", v27.c_str()).c_str(), sizeof(p.DeviceID));
  auto &v28 = j.at("BankSecuAccType").get_ref<const std::string &>();
  p.BankSecuAccType = v28.at(0);
  auto &v29 = j.at("BrokerIDByBank").get_ref<const std::string &>();
  std::strncpy(p.BrokerIDByBank, codec_convert("GBK//TRANSLIT", "UTF-8", v29.c_str()).c_str(), sizeof(p.BrokerIDByBank));
  auto &v30 = j.at("BankSecuAcc").get_ref<const std::string &>();
  std::strncpy(p.BankSecuAcc, codec_convert("GBK//TRANSLIT", "UTF-8", v30.c_str()).c_str(), sizeof(p.BankSecuAcc));
  auto &v31 = j.at("BankPwdFlag").get_ref<const std::string &>();
  p.BankPwdFlag = v31.at(0);
  auto &v32 = j.at("SecuPwdFlag").get_ref<const std::string &>();
  p.SecuPwdFlag = v32.at(0);
  auto &v33 = j.at("OperNo").get_ref<const std::string &>();
  std::strncpy(p.OperNo, codec_convert("GBK//TRANSLIT", "UTF-8", v33.c_str()).c_str(), sizeof(p.OperNo));
  j.at("RequestID").get_to(p.RequestID);
  j.at("TID").get_to(p.TID);
  j.at("BankUseAmount").get_to(p.BankUseAmount);
  j.at("BankFetchAmount").get_to(p.BankFetchAmount);
  j.at("ErrorID").get_to(p.ErrorID);
  auto &v39 = j.at("ErrorMsg").get_ref<const std::string &>();
  std::strncpy(p.ErrorMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v39.c_str()).c_str(), sizeof(p.ErrorMsg));
  auto &v40 = j.at("LongCustomerName").get_ref<const std::string &>();
  std::strncpy(p.LongCustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v40.c_str()).c_str(), sizeof(p.LongCustomerName));

}



void to_json(json& j, const CThostFtdcTransferSerialField& p) {
  j = json{
           {"PlateSerial", p.PlateSerial},
           {"TradeDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDate)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"TradeTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTime)},
           {"TradeCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeCode)},
           {"SessionID", p.SessionID},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBranchID)},
           {"BankAccType", std::string(1, p.BankAccType)},
           {"BankAccount", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankAccount)},
           {"BankSerial", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSerial)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BrokerBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerBranchID)},
           {"FutureAccType", std::string(1, p.FutureAccType)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"FutureSerial", p.FutureSerial},
           {"IdCardType", std::string(1, p.IdCardType)},
           {"IdentifiedCardNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.IdentifiedCardNo)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"TradeAmount", p.TradeAmount},
           {"CustFee", p.CustFee},
           {"BrokerFee", p.BrokerFee},
           {"AvailabilityFlag", std::string(1, p.AvailabilityFlag)},
           {"OperatorCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.OperatorCode)},
           {"BankNewAccount", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankNewAccount)},
           {"ErrorID", p.ErrorID},
           {"ErrorMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.ErrorMsg)},
  };
}

void from_json(const json& j, CThostFtdcTransferSerialField& p) {
  j.at("PlateSerial").get_to(p.PlateSerial);
  auto &v1 = j.at("TradeDate").get_ref<const std::string &>();
  std::strncpy(p.TradeDate, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.TradeDate));
  auto &v2 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v3 = j.at("TradeTime").get_ref<const std::string &>();
  std::strncpy(p.TradeTime, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.TradeTime));
  auto &v4 = j.at("TradeCode").get_ref<const std::string &>();
  std::strncpy(p.TradeCode, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.TradeCode));
  j.at("SessionID").get_to(p.SessionID);
  auto &v6 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.BankID));
  auto &v7 = j.at("BankBranchID").get_ref<const std::string &>();
  std::strncpy(p.BankBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BankBranchID));
  auto &v8 = j.at("BankAccType").get_ref<const std::string &>();
  p.BankAccType = v8.at(0);
  auto &v9 = j.at("BankAccount").get_ref<const std::string &>();
  std::strncpy(p.BankAccount, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.BankAccount));
  auto &v10 = j.at("BankSerial").get_ref<const std::string &>();
  std::strncpy(p.BankSerial, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.BankSerial));
  auto &v11 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v12 = j.at("BrokerBranchID").get_ref<const std::string &>();
  std::strncpy(p.BrokerBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.BrokerBranchID));
  auto &v13 = j.at("FutureAccType").get_ref<const std::string &>();
  p.FutureAccType = v13.at(0);
  auto &v14 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.AccountID));
  auto &v15 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.InvestorID));
  j.at("FutureSerial").get_to(p.FutureSerial);
  auto &v17 = j.at("IdCardType").get_ref<const std::string &>();
  p.IdCardType = v17.at(0);
  auto &v18 = j.at("IdentifiedCardNo").get_ref<const std::string &>();
  std::strncpy(p.IdentifiedCardNo, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.IdentifiedCardNo));
  auto &v19 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.CurrencyID));
  j.at("TradeAmount").get_to(p.TradeAmount);
  j.at("CustFee").get_to(p.CustFee);
  j.at("BrokerFee").get_to(p.BrokerFee);
  auto &v23 = j.at("AvailabilityFlag").get_ref<const std::string &>();
  p.AvailabilityFlag = v23.at(0);
  auto &v24 = j.at("OperatorCode").get_ref<const std::string &>();
  std::strncpy(p.OperatorCode, codec_convert("GBK//TRANSLIT", "UTF-8", v24.c_str()).c_str(), sizeof(p.OperatorCode));
  auto &v25 = j.at("BankNewAccount").get_ref<const std::string &>();
  std::strncpy(p.BankNewAccount, codec_convert("GBK//TRANSLIT", "UTF-8", v25.c_str()).c_str(), sizeof(p.BankNewAccount));
  j.at("ErrorID").get_to(p.ErrorID);
  auto &v27 = j.at("ErrorMsg").get_ref<const std::string &>();
  std::strncpy(p.ErrorMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v27.c_str()).c_str(), sizeof(p.ErrorMsg));

}



void to_json(json& j, const CThostFtdcQryTransferSerialField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
  };
}

void from_json(const json& j, CThostFtdcQryTransferSerialField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.AccountID));
  auto &v2 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BankID));
  auto &v3 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.CurrencyID));

}



void to_json(json& j, const CThostFtdcNotifyFutureSignInField& p) {
  j = json{
           {"TradeCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeCode)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBranchID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BrokerBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerBranchID)},
           {"TradeDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDate)},
           {"TradeTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTime)},
           {"BankSerial", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSerial)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"PlateSerial", p.PlateSerial},
           {"LastFragment", std::string(1, p.LastFragment)},
           {"SessionID", p.SessionID},
           {"InstallID", p.InstallID},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"Digest", codec_convert("UTF-8//TRANSLIT", "GBK", p.Digest)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"DeviceID", codec_convert("UTF-8//TRANSLIT", "GBK", p.DeviceID)},
           {"BrokerIDByBank", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerIDByBank)},
           {"OperNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.OperNo)},
           {"RequestID", p.RequestID},
           {"TID", p.TID},
           {"ErrorID", p.ErrorID},
           {"ErrorMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.ErrorMsg)},
           {"PinKey", codec_convert("UTF-8//TRANSLIT", "GBK", p.PinKey)},
           {"MacKey", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacKey)},
  };
}

void from_json(const json& j, CThostFtdcNotifyFutureSignInField& p) {
  auto &v0 = j.at("TradeCode").get_ref<const std::string &>();
  std::strncpy(p.TradeCode, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradeCode));
  auto &v1 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BankID));
  auto &v2 = j.at("BankBranchID").get_ref<const std::string &>();
  std::strncpy(p.BankBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BankBranchID));
  auto &v3 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v4 = j.at("BrokerBranchID").get_ref<const std::string &>();
  std::strncpy(p.BrokerBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.BrokerBranchID));
  auto &v5 = j.at("TradeDate").get_ref<const std::string &>();
  std::strncpy(p.TradeDate, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.TradeDate));
  auto &v6 = j.at("TradeTime").get_ref<const std::string &>();
  std::strncpy(p.TradeTime, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.TradeTime));
  auto &v7 = j.at("BankSerial").get_ref<const std::string &>();
  std::strncpy(p.BankSerial, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BankSerial));
  auto &v8 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("PlateSerial").get_to(p.PlateSerial);
  auto &v10 = j.at("LastFragment").get_ref<const std::string &>();
  p.LastFragment = v10.at(0);
  j.at("SessionID").get_to(p.SessionID);
  j.at("InstallID").get_to(p.InstallID);
  auto &v13 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.UserID));
  auto &v14 = j.at("Digest").get_ref<const std::string &>();
  std::strncpy(p.Digest, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.Digest));
  auto &v15 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.CurrencyID));
  auto &v16 = j.at("DeviceID").get_ref<const std::string &>();
  std::strncpy(p.DeviceID, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.DeviceID));
  auto &v17 = j.at("BrokerIDByBank").get_ref<const std::string &>();
  std::strncpy(p.BrokerIDByBank, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.BrokerIDByBank));
  auto &v18 = j.at("OperNo").get_ref<const std::string &>();
  std::strncpy(p.OperNo, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.OperNo));
  j.at("RequestID").get_to(p.RequestID);
  j.at("TID").get_to(p.TID);
  j.at("ErrorID").get_to(p.ErrorID);
  auto &v22 = j.at("ErrorMsg").get_ref<const std::string &>();
  std::strncpy(p.ErrorMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.ErrorMsg));
  auto &v23 = j.at("PinKey").get_ref<const std::string &>();
  std::strncpy(p.PinKey, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.PinKey));
  auto &v24 = j.at("MacKey").get_ref<const std::string &>();
  std::strncpy(p.MacKey, codec_convert("GBK//TRANSLIT", "UTF-8", v24.c_str()).c_str(), sizeof(p.MacKey));

}



void to_json(json& j, const CThostFtdcNotifyFutureSignOutField& p) {
  j = json{
           {"TradeCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeCode)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBranchID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BrokerBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerBranchID)},
           {"TradeDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDate)},
           {"TradeTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTime)},
           {"BankSerial", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSerial)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"PlateSerial", p.PlateSerial},
           {"LastFragment", std::string(1, p.LastFragment)},
           {"SessionID", p.SessionID},
           {"InstallID", p.InstallID},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"Digest", codec_convert("UTF-8//TRANSLIT", "GBK", p.Digest)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"DeviceID", codec_convert("UTF-8//TRANSLIT", "GBK", p.DeviceID)},
           {"BrokerIDByBank", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerIDByBank)},
           {"OperNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.OperNo)},
           {"RequestID", p.RequestID},
           {"TID", p.TID},
           {"ErrorID", p.ErrorID},
           {"ErrorMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.ErrorMsg)},
  };
}

void from_json(const json& j, CThostFtdcNotifyFutureSignOutField& p) {
  auto &v0 = j.at("TradeCode").get_ref<const std::string &>();
  std::strncpy(p.TradeCode, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradeCode));
  auto &v1 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BankID));
  auto &v2 = j.at("BankBranchID").get_ref<const std::string &>();
  std::strncpy(p.BankBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BankBranchID));
  auto &v3 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v4 = j.at("BrokerBranchID").get_ref<const std::string &>();
  std::strncpy(p.BrokerBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.BrokerBranchID));
  auto &v5 = j.at("TradeDate").get_ref<const std::string &>();
  std::strncpy(p.TradeDate, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.TradeDate));
  auto &v6 = j.at("TradeTime").get_ref<const std::string &>();
  std::strncpy(p.TradeTime, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.TradeTime));
  auto &v7 = j.at("BankSerial").get_ref<const std::string &>();
  std::strncpy(p.BankSerial, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BankSerial));
  auto &v8 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("PlateSerial").get_to(p.PlateSerial);
  auto &v10 = j.at("LastFragment").get_ref<const std::string &>();
  p.LastFragment = v10.at(0);
  j.at("SessionID").get_to(p.SessionID);
  j.at("InstallID").get_to(p.InstallID);
  auto &v13 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.UserID));
  auto &v14 = j.at("Digest").get_ref<const std::string &>();
  std::strncpy(p.Digest, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.Digest));
  auto &v15 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.CurrencyID));
  auto &v16 = j.at("DeviceID").get_ref<const std::string &>();
  std::strncpy(p.DeviceID, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.DeviceID));
  auto &v17 = j.at("BrokerIDByBank").get_ref<const std::string &>();
  std::strncpy(p.BrokerIDByBank, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.BrokerIDByBank));
  auto &v18 = j.at("OperNo").get_ref<const std::string &>();
  std::strncpy(p.OperNo, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.OperNo));
  j.at("RequestID").get_to(p.RequestID);
  j.at("TID").get_to(p.TID);
  j.at("ErrorID").get_to(p.ErrorID);
  auto &v22 = j.at("ErrorMsg").get_ref<const std::string &>();
  std::strncpy(p.ErrorMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.ErrorMsg));

}



void to_json(json& j, const CThostFtdcNotifySyncKeyField& p) {
  j = json{
           {"TradeCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeCode)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBranchID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BrokerBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerBranchID)},
           {"TradeDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDate)},
           {"TradeTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTime)},
           {"BankSerial", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSerial)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"PlateSerial", p.PlateSerial},
           {"LastFragment", std::string(1, p.LastFragment)},
           {"SessionID", p.SessionID},
           {"InstallID", p.InstallID},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"Message", codec_convert("UTF-8//TRANSLIT", "GBK", p.Message)},
           {"DeviceID", codec_convert("UTF-8//TRANSLIT", "GBK", p.DeviceID)},
           {"BrokerIDByBank", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerIDByBank)},
           {"OperNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.OperNo)},
           {"RequestID", p.RequestID},
           {"TID", p.TID},
           {"ErrorID", p.ErrorID},
           {"ErrorMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.ErrorMsg)},
  };
}

void from_json(const json& j, CThostFtdcNotifySyncKeyField& p) {
  auto &v0 = j.at("TradeCode").get_ref<const std::string &>();
  std::strncpy(p.TradeCode, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradeCode));
  auto &v1 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BankID));
  auto &v2 = j.at("BankBranchID").get_ref<const std::string &>();
  std::strncpy(p.BankBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BankBranchID));
  auto &v3 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v4 = j.at("BrokerBranchID").get_ref<const std::string &>();
  std::strncpy(p.BrokerBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.BrokerBranchID));
  auto &v5 = j.at("TradeDate").get_ref<const std::string &>();
  std::strncpy(p.TradeDate, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.TradeDate));
  auto &v6 = j.at("TradeTime").get_ref<const std::string &>();
  std::strncpy(p.TradeTime, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.TradeTime));
  auto &v7 = j.at("BankSerial").get_ref<const std::string &>();
  std::strncpy(p.BankSerial, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BankSerial));
  auto &v8 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("PlateSerial").get_to(p.PlateSerial);
  auto &v10 = j.at("LastFragment").get_ref<const std::string &>();
  p.LastFragment = v10.at(0);
  j.at("SessionID").get_to(p.SessionID);
  j.at("InstallID").get_to(p.InstallID);
  auto &v13 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.UserID));
  auto &v14 = j.at("Message").get_ref<const std::string &>();
  std::strncpy(p.Message, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.Message));
  auto &v15 = j.at("DeviceID").get_ref<const std::string &>();
  std::strncpy(p.DeviceID, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.DeviceID));
  auto &v16 = j.at("BrokerIDByBank").get_ref<const std::string &>();
  std::strncpy(p.BrokerIDByBank, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.BrokerIDByBank));
  auto &v17 = j.at("OperNo").get_ref<const std::string &>();
  std::strncpy(p.OperNo, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.OperNo));
  j.at("RequestID").get_to(p.RequestID);
  j.at("TID").get_to(p.TID);
  j.at("ErrorID").get_to(p.ErrorID);
  auto &v21 = j.at("ErrorMsg").get_ref<const std::string &>();
  std::strncpy(p.ErrorMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v21.c_str()).c_str(), sizeof(p.ErrorMsg));

}



void to_json(json& j, const CThostFtdcQryAccountregisterField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBranchID)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
  };
}

void from_json(const json& j, CThostFtdcQryAccountregisterField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.AccountID));
  auto &v2 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BankID));
  auto &v3 = j.at("BankBranchID").get_ref<const std::string &>();
  std::strncpy(p.BankBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.BankBranchID));
  auto &v4 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.CurrencyID));

}



void to_json(json& j, const CThostFtdcAccountregisterField& p) {
  j = json{
           {"TradeDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDay)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBranchID)},
           {"BankAccount", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankAccount)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BrokerBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerBranchID)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"IdCardType", std::string(1, p.IdCardType)},
           {"IdentifiedCardNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.IdentifiedCardNo)},
           {"CustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.CustomerName)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"OpenOrDestroy", std::string(1, p.OpenOrDestroy)},
           {"RegDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.RegDate)},
           {"OutDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.OutDate)},
           {"TID", p.TID},
           {"CustType", std::string(1, p.CustType)},
           {"BankAccType", std::string(1, p.BankAccType)},
           {"LongCustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.LongCustomerName)},
  };
}

void from_json(const json& j, CThostFtdcAccountregisterField& p) {
  auto &v0 = j.at("TradeDay").get_ref<const std::string &>();
  std::strncpy(p.TradeDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradeDay));
  auto &v1 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BankID));
  auto &v2 = j.at("BankBranchID").get_ref<const std::string &>();
  std::strncpy(p.BankBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BankBranchID));
  auto &v3 = j.at("BankAccount").get_ref<const std::string &>();
  std::strncpy(p.BankAccount, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.BankAccount));
  auto &v4 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v5 = j.at("BrokerBranchID").get_ref<const std::string &>();
  std::strncpy(p.BrokerBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.BrokerBranchID));
  auto &v6 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.AccountID));
  auto &v7 = j.at("IdCardType").get_ref<const std::string &>();
  p.IdCardType = v7.at(0);
  auto &v8 = j.at("IdentifiedCardNo").get_ref<const std::string &>();
  std::strncpy(p.IdentifiedCardNo, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.IdentifiedCardNo));
  auto &v9 = j.at("CustomerName").get_ref<const std::string &>();
  std::strncpy(p.CustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.CustomerName));
  auto &v10 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.CurrencyID));
  auto &v11 = j.at("OpenOrDestroy").get_ref<const std::string &>();
  p.OpenOrDestroy = v11.at(0);
  auto &v12 = j.at("RegDate").get_ref<const std::string &>();
  std::strncpy(p.RegDate, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.RegDate));
  auto &v13 = j.at("OutDate").get_ref<const std::string &>();
  std::strncpy(p.OutDate, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.OutDate));
  j.at("TID").get_to(p.TID);
  auto &v15 = j.at("CustType").get_ref<const std::string &>();
  p.CustType = v15.at(0);
  auto &v16 = j.at("BankAccType").get_ref<const std::string &>();
  p.BankAccType = v16.at(0);
  auto &v17 = j.at("LongCustomerName").get_ref<const std::string &>();
  std::strncpy(p.LongCustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.LongCustomerName));

}



void to_json(json& j, const CThostFtdcOpenAccountField& p) {
  j = json{
           {"TradeCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeCode)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBranchID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BrokerBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerBranchID)},
           {"TradeDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDate)},
           {"TradeTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTime)},
           {"BankSerial", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSerial)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"PlateSerial", p.PlateSerial},
           {"LastFragment", std::string(1, p.LastFragment)},
           {"SessionID", p.SessionID},
           {"CustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.CustomerName)},
           {"IdCardType", std::string(1, p.IdCardType)},
           {"IdentifiedCardNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.IdentifiedCardNo)},
           {"Gender", std::string(1, p.Gender)},
           {"CountryCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.CountryCode)},
           {"CustType", std::string(1, p.CustType)},
           {"Address", codec_convert("UTF-8//TRANSLIT", "GBK", p.Address)},
           {"ZipCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.ZipCode)},
           {"Telephone", codec_convert("UTF-8//TRANSLIT", "GBK", p.Telephone)},
           {"MobilePhone", codec_convert("UTF-8//TRANSLIT", "GBK", p.MobilePhone)},
           {"Fax", codec_convert("UTF-8//TRANSLIT", "GBK", p.Fax)},
           {"EMail", codec_convert("UTF-8//TRANSLIT", "GBK", p.EMail)},
           {"MoneyAccountStatus", std::string(1, p.MoneyAccountStatus)},
           {"BankAccount", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankAccount)},
           {"BankPassWord", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankPassWord)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"Password", codec_convert("UTF-8//TRANSLIT", "GBK", p.Password)},
           {"InstallID", p.InstallID},
           {"VerifyCertNoFlag", std::string(1, p.VerifyCertNoFlag)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"CashExchangeCode", std::string(1, p.CashExchangeCode)},
           {"Digest", codec_convert("UTF-8//TRANSLIT", "GBK", p.Digest)},
           {"BankAccType", std::string(1, p.BankAccType)},
           {"DeviceID", codec_convert("UTF-8//TRANSLIT", "GBK", p.DeviceID)},
           {"BankSecuAccType", std::string(1, p.BankSecuAccType)},
           {"BrokerIDByBank", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerIDByBank)},
           {"BankSecuAcc", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSecuAcc)},
           {"BankPwdFlag", std::string(1, p.BankPwdFlag)},
           {"SecuPwdFlag", std::string(1, p.SecuPwdFlag)},
           {"OperNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.OperNo)},
           {"TID", p.TID},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"ErrorID", p.ErrorID},
           {"ErrorMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.ErrorMsg)},
           {"LongCustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.LongCustomerName)},
  };
}

void from_json(const json& j, CThostFtdcOpenAccountField& p) {
  auto &v0 = j.at("TradeCode").get_ref<const std::string &>();
  std::strncpy(p.TradeCode, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradeCode));
  auto &v1 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BankID));
  auto &v2 = j.at("BankBranchID").get_ref<const std::string &>();
  std::strncpy(p.BankBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BankBranchID));
  auto &v3 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v4 = j.at("BrokerBranchID").get_ref<const std::string &>();
  std::strncpy(p.BrokerBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.BrokerBranchID));
  auto &v5 = j.at("TradeDate").get_ref<const std::string &>();
  std::strncpy(p.TradeDate, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.TradeDate));
  auto &v6 = j.at("TradeTime").get_ref<const std::string &>();
  std::strncpy(p.TradeTime, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.TradeTime));
  auto &v7 = j.at("BankSerial").get_ref<const std::string &>();
  std::strncpy(p.BankSerial, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BankSerial));
  auto &v8 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("PlateSerial").get_to(p.PlateSerial);
  auto &v10 = j.at("LastFragment").get_ref<const std::string &>();
  p.LastFragment = v10.at(0);
  j.at("SessionID").get_to(p.SessionID);
  auto &v12 = j.at("CustomerName").get_ref<const std::string &>();
  std::strncpy(p.CustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.CustomerName));
  auto &v13 = j.at("IdCardType").get_ref<const std::string &>();
  p.IdCardType = v13.at(0);
  auto &v14 = j.at("IdentifiedCardNo").get_ref<const std::string &>();
  std::strncpy(p.IdentifiedCardNo, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.IdentifiedCardNo));
  auto &v15 = j.at("Gender").get_ref<const std::string &>();
  p.Gender = v15.at(0);
  auto &v16 = j.at("CountryCode").get_ref<const std::string &>();
  std::strncpy(p.CountryCode, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.CountryCode));
  auto &v17 = j.at("CustType").get_ref<const std::string &>();
  p.CustType = v17.at(0);
  auto &v18 = j.at("Address").get_ref<const std::string &>();
  std::strncpy(p.Address, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.Address));
  auto &v19 = j.at("ZipCode").get_ref<const std::string &>();
  std::strncpy(p.ZipCode, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.ZipCode));
  auto &v20 = j.at("Telephone").get_ref<const std::string &>();
  std::strncpy(p.Telephone, codec_convert("GBK//TRANSLIT", "UTF-8", v20.c_str()).c_str(), sizeof(p.Telephone));
  auto &v21 = j.at("MobilePhone").get_ref<const std::string &>();
  std::strncpy(p.MobilePhone, codec_convert("GBK//TRANSLIT", "UTF-8", v21.c_str()).c_str(), sizeof(p.MobilePhone));
  auto &v22 = j.at("Fax").get_ref<const std::string &>();
  std::strncpy(p.Fax, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.Fax));
  auto &v23 = j.at("EMail").get_ref<const std::string &>();
  std::strncpy(p.EMail, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.EMail));
  auto &v24 = j.at("MoneyAccountStatus").get_ref<const std::string &>();
  p.MoneyAccountStatus = v24.at(0);
  auto &v25 = j.at("BankAccount").get_ref<const std::string &>();
  std::strncpy(p.BankAccount, codec_convert("GBK//TRANSLIT", "UTF-8", v25.c_str()).c_str(), sizeof(p.BankAccount));
  auto &v26 = j.at("BankPassWord").get_ref<const std::string &>();
  std::strncpy(p.BankPassWord, codec_convert("GBK//TRANSLIT", "UTF-8", v26.c_str()).c_str(), sizeof(p.BankPassWord));
  auto &v27 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v27.c_str()).c_str(), sizeof(p.AccountID));
  auto &v28 = j.at("Password").get_ref<const std::string &>();
  std::strncpy(p.Password, codec_convert("GBK//TRANSLIT", "UTF-8", v28.c_str()).c_str(), sizeof(p.Password));
  j.at("InstallID").get_to(p.InstallID);
  auto &v30 = j.at("VerifyCertNoFlag").get_ref<const std::string &>();
  p.VerifyCertNoFlag = v30.at(0);
  auto &v31 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v31.c_str()).c_str(), sizeof(p.CurrencyID));
  auto &v32 = j.at("CashExchangeCode").get_ref<const std::string &>();
  p.CashExchangeCode = v32.at(0);
  auto &v33 = j.at("Digest").get_ref<const std::string &>();
  std::strncpy(p.Digest, codec_convert("GBK//TRANSLIT", "UTF-8", v33.c_str()).c_str(), sizeof(p.Digest));
  auto &v34 = j.at("BankAccType").get_ref<const std::string &>();
  p.BankAccType = v34.at(0);
  auto &v35 = j.at("DeviceID").get_ref<const std::string &>();
  std::strncpy(p.DeviceID, codec_convert("GBK//TRANSLIT", "UTF-8", v35.c_str()).c_str(), sizeof(p.DeviceID));
  auto &v36 = j.at("BankSecuAccType").get_ref<const std::string &>();
  p.BankSecuAccType = v36.at(0);
  auto &v37 = j.at("BrokerIDByBank").get_ref<const std::string &>();
  std::strncpy(p.BrokerIDByBank, codec_convert("GBK//TRANSLIT", "UTF-8", v37.c_str()).c_str(), sizeof(p.BrokerIDByBank));
  auto &v38 = j.at("BankSecuAcc").get_ref<const std::string &>();
  std::strncpy(p.BankSecuAcc, codec_convert("GBK//TRANSLIT", "UTF-8", v38.c_str()).c_str(), sizeof(p.BankSecuAcc));
  auto &v39 = j.at("BankPwdFlag").get_ref<const std::string &>();
  p.BankPwdFlag = v39.at(0);
  auto &v40 = j.at("SecuPwdFlag").get_ref<const std::string &>();
  p.SecuPwdFlag = v40.at(0);
  auto &v41 = j.at("OperNo").get_ref<const std::string &>();
  std::strncpy(p.OperNo, codec_convert("GBK//TRANSLIT", "UTF-8", v41.c_str()).c_str(), sizeof(p.OperNo));
  j.at("TID").get_to(p.TID);
  auto &v43 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v43.c_str()).c_str(), sizeof(p.UserID));
  j.at("ErrorID").get_to(p.ErrorID);
  auto &v45 = j.at("ErrorMsg").get_ref<const std::string &>();
  std::strncpy(p.ErrorMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v45.c_str()).c_str(), sizeof(p.ErrorMsg));
  auto &v46 = j.at("LongCustomerName").get_ref<const std::string &>();
  std::strncpy(p.LongCustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v46.c_str()).c_str(), sizeof(p.LongCustomerName));

}



void to_json(json& j, const CThostFtdcCancelAccountField& p) {
  j = json{
           {"TradeCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeCode)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBranchID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BrokerBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerBranchID)},
           {"TradeDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDate)},
           {"TradeTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTime)},
           {"BankSerial", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSerial)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"PlateSerial", p.PlateSerial},
           {"LastFragment", std::string(1, p.LastFragment)},
           {"SessionID", p.SessionID},
           {"CustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.CustomerName)},
           {"IdCardType", std::string(1, p.IdCardType)},
           {"IdentifiedCardNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.IdentifiedCardNo)},
           {"Gender", std::string(1, p.Gender)},
           {"CountryCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.CountryCode)},
           {"CustType", std::string(1, p.CustType)},
           {"Address", codec_convert("UTF-8//TRANSLIT", "GBK", p.Address)},
           {"ZipCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.ZipCode)},
           {"Telephone", codec_convert("UTF-8//TRANSLIT", "GBK", p.Telephone)},
           {"MobilePhone", codec_convert("UTF-8//TRANSLIT", "GBK", p.MobilePhone)},
           {"Fax", codec_convert("UTF-8//TRANSLIT", "GBK", p.Fax)},
           {"EMail", codec_convert("UTF-8//TRANSLIT", "GBK", p.EMail)},
           {"MoneyAccountStatus", std::string(1, p.MoneyAccountStatus)},
           {"BankAccount", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankAccount)},
           {"BankPassWord", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankPassWord)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"Password", codec_convert("UTF-8//TRANSLIT", "GBK", p.Password)},
           {"InstallID", p.InstallID},
           {"VerifyCertNoFlag", std::string(1, p.VerifyCertNoFlag)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"CashExchangeCode", std::string(1, p.CashExchangeCode)},
           {"Digest", codec_convert("UTF-8//TRANSLIT", "GBK", p.Digest)},
           {"BankAccType", std::string(1, p.BankAccType)},
           {"DeviceID", codec_convert("UTF-8//TRANSLIT", "GBK", p.DeviceID)},
           {"BankSecuAccType", std::string(1, p.BankSecuAccType)},
           {"BrokerIDByBank", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerIDByBank)},
           {"BankSecuAcc", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSecuAcc)},
           {"BankPwdFlag", std::string(1, p.BankPwdFlag)},
           {"SecuPwdFlag", std::string(1, p.SecuPwdFlag)},
           {"OperNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.OperNo)},
           {"TID", p.TID},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"ErrorID", p.ErrorID},
           {"ErrorMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.ErrorMsg)},
           {"LongCustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.LongCustomerName)},
  };
}

void from_json(const json& j, CThostFtdcCancelAccountField& p) {
  auto &v0 = j.at("TradeCode").get_ref<const std::string &>();
  std::strncpy(p.TradeCode, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradeCode));
  auto &v1 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BankID));
  auto &v2 = j.at("BankBranchID").get_ref<const std::string &>();
  std::strncpy(p.BankBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BankBranchID));
  auto &v3 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v4 = j.at("BrokerBranchID").get_ref<const std::string &>();
  std::strncpy(p.BrokerBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.BrokerBranchID));
  auto &v5 = j.at("TradeDate").get_ref<const std::string &>();
  std::strncpy(p.TradeDate, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.TradeDate));
  auto &v6 = j.at("TradeTime").get_ref<const std::string &>();
  std::strncpy(p.TradeTime, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.TradeTime));
  auto &v7 = j.at("BankSerial").get_ref<const std::string &>();
  std::strncpy(p.BankSerial, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BankSerial));
  auto &v8 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("PlateSerial").get_to(p.PlateSerial);
  auto &v10 = j.at("LastFragment").get_ref<const std::string &>();
  p.LastFragment = v10.at(0);
  j.at("SessionID").get_to(p.SessionID);
  auto &v12 = j.at("CustomerName").get_ref<const std::string &>();
  std::strncpy(p.CustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.CustomerName));
  auto &v13 = j.at("IdCardType").get_ref<const std::string &>();
  p.IdCardType = v13.at(0);
  auto &v14 = j.at("IdentifiedCardNo").get_ref<const std::string &>();
  std::strncpy(p.IdentifiedCardNo, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.IdentifiedCardNo));
  auto &v15 = j.at("Gender").get_ref<const std::string &>();
  p.Gender = v15.at(0);
  auto &v16 = j.at("CountryCode").get_ref<const std::string &>();
  std::strncpy(p.CountryCode, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.CountryCode));
  auto &v17 = j.at("CustType").get_ref<const std::string &>();
  p.CustType = v17.at(0);
  auto &v18 = j.at("Address").get_ref<const std::string &>();
  std::strncpy(p.Address, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.Address));
  auto &v19 = j.at("ZipCode").get_ref<const std::string &>();
  std::strncpy(p.ZipCode, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.ZipCode));
  auto &v20 = j.at("Telephone").get_ref<const std::string &>();
  std::strncpy(p.Telephone, codec_convert("GBK//TRANSLIT", "UTF-8", v20.c_str()).c_str(), sizeof(p.Telephone));
  auto &v21 = j.at("MobilePhone").get_ref<const std::string &>();
  std::strncpy(p.MobilePhone, codec_convert("GBK//TRANSLIT", "UTF-8", v21.c_str()).c_str(), sizeof(p.MobilePhone));
  auto &v22 = j.at("Fax").get_ref<const std::string &>();
  std::strncpy(p.Fax, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.Fax));
  auto &v23 = j.at("EMail").get_ref<const std::string &>();
  std::strncpy(p.EMail, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.EMail));
  auto &v24 = j.at("MoneyAccountStatus").get_ref<const std::string &>();
  p.MoneyAccountStatus = v24.at(0);
  auto &v25 = j.at("BankAccount").get_ref<const std::string &>();
  std::strncpy(p.BankAccount, codec_convert("GBK//TRANSLIT", "UTF-8", v25.c_str()).c_str(), sizeof(p.BankAccount));
  auto &v26 = j.at("BankPassWord").get_ref<const std::string &>();
  std::strncpy(p.BankPassWord, codec_convert("GBK//TRANSLIT", "UTF-8", v26.c_str()).c_str(), sizeof(p.BankPassWord));
  auto &v27 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v27.c_str()).c_str(), sizeof(p.AccountID));
  auto &v28 = j.at("Password").get_ref<const std::string &>();
  std::strncpy(p.Password, codec_convert("GBK//TRANSLIT", "UTF-8", v28.c_str()).c_str(), sizeof(p.Password));
  j.at("InstallID").get_to(p.InstallID);
  auto &v30 = j.at("VerifyCertNoFlag").get_ref<const std::string &>();
  p.VerifyCertNoFlag = v30.at(0);
  auto &v31 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v31.c_str()).c_str(), sizeof(p.CurrencyID));
  auto &v32 = j.at("CashExchangeCode").get_ref<const std::string &>();
  p.CashExchangeCode = v32.at(0);
  auto &v33 = j.at("Digest").get_ref<const std::string &>();
  std::strncpy(p.Digest, codec_convert("GBK//TRANSLIT", "UTF-8", v33.c_str()).c_str(), sizeof(p.Digest));
  auto &v34 = j.at("BankAccType").get_ref<const std::string &>();
  p.BankAccType = v34.at(0);
  auto &v35 = j.at("DeviceID").get_ref<const std::string &>();
  std::strncpy(p.DeviceID, codec_convert("GBK//TRANSLIT", "UTF-8", v35.c_str()).c_str(), sizeof(p.DeviceID));
  auto &v36 = j.at("BankSecuAccType").get_ref<const std::string &>();
  p.BankSecuAccType = v36.at(0);
  auto &v37 = j.at("BrokerIDByBank").get_ref<const std::string &>();
  std::strncpy(p.BrokerIDByBank, codec_convert("GBK//TRANSLIT", "UTF-8", v37.c_str()).c_str(), sizeof(p.BrokerIDByBank));
  auto &v38 = j.at("BankSecuAcc").get_ref<const std::string &>();
  std::strncpy(p.BankSecuAcc, codec_convert("GBK//TRANSLIT", "UTF-8", v38.c_str()).c_str(), sizeof(p.BankSecuAcc));
  auto &v39 = j.at("BankPwdFlag").get_ref<const std::string &>();
  p.BankPwdFlag = v39.at(0);
  auto &v40 = j.at("SecuPwdFlag").get_ref<const std::string &>();
  p.SecuPwdFlag = v40.at(0);
  auto &v41 = j.at("OperNo").get_ref<const std::string &>();
  std::strncpy(p.OperNo, codec_convert("GBK//TRANSLIT", "UTF-8", v41.c_str()).c_str(), sizeof(p.OperNo));
  j.at("TID").get_to(p.TID);
  auto &v43 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v43.c_str()).c_str(), sizeof(p.UserID));
  j.at("ErrorID").get_to(p.ErrorID);
  auto &v45 = j.at("ErrorMsg").get_ref<const std::string &>();
  std::strncpy(p.ErrorMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v45.c_str()).c_str(), sizeof(p.ErrorMsg));
  auto &v46 = j.at("LongCustomerName").get_ref<const std::string &>();
  std::strncpy(p.LongCustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v46.c_str()).c_str(), sizeof(p.LongCustomerName));

}



void to_json(json& j, const CThostFtdcChangeAccountField& p) {
  j = json{
           {"TradeCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeCode)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBranchID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BrokerBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerBranchID)},
           {"TradeDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDate)},
           {"TradeTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTime)},
           {"BankSerial", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSerial)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"PlateSerial", p.PlateSerial},
           {"LastFragment", std::string(1, p.LastFragment)},
           {"SessionID", p.SessionID},
           {"CustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.CustomerName)},
           {"IdCardType", std::string(1, p.IdCardType)},
           {"IdentifiedCardNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.IdentifiedCardNo)},
           {"Gender", std::string(1, p.Gender)},
           {"CountryCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.CountryCode)},
           {"CustType", std::string(1, p.CustType)},
           {"Address", codec_convert("UTF-8//TRANSLIT", "GBK", p.Address)},
           {"ZipCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.ZipCode)},
           {"Telephone", codec_convert("UTF-8//TRANSLIT", "GBK", p.Telephone)},
           {"MobilePhone", codec_convert("UTF-8//TRANSLIT", "GBK", p.MobilePhone)},
           {"Fax", codec_convert("UTF-8//TRANSLIT", "GBK", p.Fax)},
           {"EMail", codec_convert("UTF-8//TRANSLIT", "GBK", p.EMail)},
           {"MoneyAccountStatus", std::string(1, p.MoneyAccountStatus)},
           {"BankAccount", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankAccount)},
           {"BankPassWord", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankPassWord)},
           {"NewBankAccount", codec_convert("UTF-8//TRANSLIT", "GBK", p.NewBankAccount)},
           {"NewBankPassWord", codec_convert("UTF-8//TRANSLIT", "GBK", p.NewBankPassWord)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"Password", codec_convert("UTF-8//TRANSLIT", "GBK", p.Password)},
           {"BankAccType", std::string(1, p.BankAccType)},
           {"InstallID", p.InstallID},
           {"VerifyCertNoFlag", std::string(1, p.VerifyCertNoFlag)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"BrokerIDByBank", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerIDByBank)},
           {"BankPwdFlag", std::string(1, p.BankPwdFlag)},
           {"SecuPwdFlag", std::string(1, p.SecuPwdFlag)},
           {"TID", p.TID},
           {"Digest", codec_convert("UTF-8//TRANSLIT", "GBK", p.Digest)},
           {"ErrorID", p.ErrorID},
           {"ErrorMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.ErrorMsg)},
           {"LongCustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.LongCustomerName)},
  };
}

void from_json(const json& j, CThostFtdcChangeAccountField& p) {
  auto &v0 = j.at("TradeCode").get_ref<const std::string &>();
  std::strncpy(p.TradeCode, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradeCode));
  auto &v1 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BankID));
  auto &v2 = j.at("BankBranchID").get_ref<const std::string &>();
  std::strncpy(p.BankBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BankBranchID));
  auto &v3 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v4 = j.at("BrokerBranchID").get_ref<const std::string &>();
  std::strncpy(p.BrokerBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.BrokerBranchID));
  auto &v5 = j.at("TradeDate").get_ref<const std::string &>();
  std::strncpy(p.TradeDate, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.TradeDate));
  auto &v6 = j.at("TradeTime").get_ref<const std::string &>();
  std::strncpy(p.TradeTime, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.TradeTime));
  auto &v7 = j.at("BankSerial").get_ref<const std::string &>();
  std::strncpy(p.BankSerial, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BankSerial));
  auto &v8 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("PlateSerial").get_to(p.PlateSerial);
  auto &v10 = j.at("LastFragment").get_ref<const std::string &>();
  p.LastFragment = v10.at(0);
  j.at("SessionID").get_to(p.SessionID);
  auto &v12 = j.at("CustomerName").get_ref<const std::string &>();
  std::strncpy(p.CustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.CustomerName));
  auto &v13 = j.at("IdCardType").get_ref<const std::string &>();
  p.IdCardType = v13.at(0);
  auto &v14 = j.at("IdentifiedCardNo").get_ref<const std::string &>();
  std::strncpy(p.IdentifiedCardNo, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.IdentifiedCardNo));
  auto &v15 = j.at("Gender").get_ref<const std::string &>();
  p.Gender = v15.at(0);
  auto &v16 = j.at("CountryCode").get_ref<const std::string &>();
  std::strncpy(p.CountryCode, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.CountryCode));
  auto &v17 = j.at("CustType").get_ref<const std::string &>();
  p.CustType = v17.at(0);
  auto &v18 = j.at("Address").get_ref<const std::string &>();
  std::strncpy(p.Address, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.Address));
  auto &v19 = j.at("ZipCode").get_ref<const std::string &>();
  std::strncpy(p.ZipCode, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.ZipCode));
  auto &v20 = j.at("Telephone").get_ref<const std::string &>();
  std::strncpy(p.Telephone, codec_convert("GBK//TRANSLIT", "UTF-8", v20.c_str()).c_str(), sizeof(p.Telephone));
  auto &v21 = j.at("MobilePhone").get_ref<const std::string &>();
  std::strncpy(p.MobilePhone, codec_convert("GBK//TRANSLIT", "UTF-8", v21.c_str()).c_str(), sizeof(p.MobilePhone));
  auto &v22 = j.at("Fax").get_ref<const std::string &>();
  std::strncpy(p.Fax, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.Fax));
  auto &v23 = j.at("EMail").get_ref<const std::string &>();
  std::strncpy(p.EMail, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.EMail));
  auto &v24 = j.at("MoneyAccountStatus").get_ref<const std::string &>();
  p.MoneyAccountStatus = v24.at(0);
  auto &v25 = j.at("BankAccount").get_ref<const std::string &>();
  std::strncpy(p.BankAccount, codec_convert("GBK//TRANSLIT", "UTF-8", v25.c_str()).c_str(), sizeof(p.BankAccount));
  auto &v26 = j.at("BankPassWord").get_ref<const std::string &>();
  std::strncpy(p.BankPassWord, codec_convert("GBK//TRANSLIT", "UTF-8", v26.c_str()).c_str(), sizeof(p.BankPassWord));
  auto &v27 = j.at("NewBankAccount").get_ref<const std::string &>();
  std::strncpy(p.NewBankAccount, codec_convert("GBK//TRANSLIT", "UTF-8", v27.c_str()).c_str(), sizeof(p.NewBankAccount));
  auto &v28 = j.at("NewBankPassWord").get_ref<const std::string &>();
  std::strncpy(p.NewBankPassWord, codec_convert("GBK//TRANSLIT", "UTF-8", v28.c_str()).c_str(), sizeof(p.NewBankPassWord));
  auto &v29 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v29.c_str()).c_str(), sizeof(p.AccountID));
  auto &v30 = j.at("Password").get_ref<const std::string &>();
  std::strncpy(p.Password, codec_convert("GBK//TRANSLIT", "UTF-8", v30.c_str()).c_str(), sizeof(p.Password));
  auto &v31 = j.at("BankAccType").get_ref<const std::string &>();
  p.BankAccType = v31.at(0);
  j.at("InstallID").get_to(p.InstallID);
  auto &v33 = j.at("VerifyCertNoFlag").get_ref<const std::string &>();
  p.VerifyCertNoFlag = v33.at(0);
  auto &v34 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v34.c_str()).c_str(), sizeof(p.CurrencyID));
  auto &v35 = j.at("BrokerIDByBank").get_ref<const std::string &>();
  std::strncpy(p.BrokerIDByBank, codec_convert("GBK//TRANSLIT", "UTF-8", v35.c_str()).c_str(), sizeof(p.BrokerIDByBank));
  auto &v36 = j.at("BankPwdFlag").get_ref<const std::string &>();
  p.BankPwdFlag = v36.at(0);
  auto &v37 = j.at("SecuPwdFlag").get_ref<const std::string &>();
  p.SecuPwdFlag = v37.at(0);
  j.at("TID").get_to(p.TID);
  auto &v39 = j.at("Digest").get_ref<const std::string &>();
  std::strncpy(p.Digest, codec_convert("GBK//TRANSLIT", "UTF-8", v39.c_str()).c_str(), sizeof(p.Digest));
  j.at("ErrorID").get_to(p.ErrorID);
  auto &v41 = j.at("ErrorMsg").get_ref<const std::string &>();
  std::strncpy(p.ErrorMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v41.c_str()).c_str(), sizeof(p.ErrorMsg));
  auto &v42 = j.at("LongCustomerName").get_ref<const std::string &>();
  std::strncpy(p.LongCustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v42.c_str()).c_str(), sizeof(p.LongCustomerName));

}



void to_json(json& j, const CThostFtdcSecAgentACIDMapField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"BrokerSecAgentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerSecAgentID)},
  };
}

void from_json(const json& j, CThostFtdcSecAgentACIDMapField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.UserID));
  auto &v2 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.AccountID));
  auto &v3 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.CurrencyID));
  auto &v4 = j.at("BrokerSecAgentID").get_ref<const std::string &>();
  std::strncpy(p.BrokerSecAgentID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.BrokerSecAgentID));

}



void to_json(json& j, const CThostFtdcQrySecAgentACIDMapField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
  };
}

void from_json(const json& j, CThostFtdcQrySecAgentACIDMapField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.UserID));
  auto &v2 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.AccountID));
  auto &v3 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.CurrencyID));

}



void to_json(json& j, const CThostFtdcUserRightsAssignField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"DRIdentityID", p.DRIdentityID},
  };
}

void from_json(const json& j, CThostFtdcUserRightsAssignField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.UserID));
  j.at("DRIdentityID").get_to(p.DRIdentityID);

}



void to_json(json& j, const CThostFtdcBrokerUserRightAssignField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"DRIdentityID", p.DRIdentityID},
           {"Tradeable", p.Tradeable},
  };
}

void from_json(const json& j, CThostFtdcBrokerUserRightAssignField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  j.at("DRIdentityID").get_to(p.DRIdentityID);
  j.at("Tradeable").get_to(p.Tradeable);

}



void to_json(json& j, const CThostFtdcDRTransferField& p) {
  j = json{
           {"OrigDRIdentityID", p.OrigDRIdentityID},
           {"DestDRIdentityID", p.DestDRIdentityID},
           {"OrigBrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.OrigBrokerID)},
           {"DestBrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.DestBrokerID)},
  };
}

void from_json(const json& j, CThostFtdcDRTransferField& p) {
  j.at("OrigDRIdentityID").get_to(p.OrigDRIdentityID);
  j.at("DestDRIdentityID").get_to(p.DestDRIdentityID);
  auto &v2 = j.at("OrigBrokerID").get_ref<const std::string &>();
  std::strncpy(p.OrigBrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.OrigBrokerID));
  auto &v3 = j.at("DestBrokerID").get_ref<const std::string &>();
  std::strncpy(p.DestBrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.DestBrokerID));

}



void to_json(json& j, const CThostFtdcFensUserInfoField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"LoginMode", std::string(1, p.LoginMode)},
  };
}

void from_json(const json& j, CThostFtdcFensUserInfoField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.UserID));
  auto &v2 = j.at("LoginMode").get_ref<const std::string &>();
  p.LoginMode = v2.at(0);

}



void to_json(json& j, const CThostFtdcCurrTransferIdentityField& p) {
  j = json{
           {"IdentityID", p.IdentityID},
  };
}

void from_json(const json& j, CThostFtdcCurrTransferIdentityField& p) {
  j.at("IdentityID").get_to(p.IdentityID);

}



void to_json(json& j, const CThostFtdcLoginForbiddenUserField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
  };
}

void from_json(const json& j, CThostFtdcLoginForbiddenUserField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.UserID));
  auto &v2 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.reserve1));
  auto &v3 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.IPAddress));

}



void to_json(json& j, const CThostFtdcQryLoginForbiddenUserField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
  };
}

void from_json(const json& j, CThostFtdcQryLoginForbiddenUserField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.UserID));

}



void to_json(json& j, const CThostFtdcTradingAccountReserveField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"Reserve", p.Reserve},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
  };
}

void from_json(const json& j, CThostFtdcTradingAccountReserveField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.AccountID));
  j.at("Reserve").get_to(p.Reserve);
  auto &v3 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.CurrencyID));

}



void to_json(json& j, const CThostFtdcQryLoginForbiddenIPField& p) {
  j = json{
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
  };
}

void from_json(const json& j, CThostFtdcQryLoginForbiddenIPField& p) {
  auto &v0 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.reserve1));
  auto &v1 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.IPAddress));

}



void to_json(json& j, const CThostFtdcQryIPListField& p) {
  j = json{
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
  };
}

void from_json(const json& j, CThostFtdcQryIPListField& p) {
  auto &v0 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.reserve1));
  auto &v1 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.IPAddress));

}



void to_json(json& j, const CThostFtdcQryUserRightsAssignField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
  };
}

void from_json(const json& j, CThostFtdcQryUserRightsAssignField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.UserID));

}



void to_json(json& j, const CThostFtdcReserveOpenAccountConfirmField& p) {
  j = json{
           {"TradeCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeCode)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBranchID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BrokerBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerBranchID)},
           {"TradeDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDate)},
           {"TradeTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTime)},
           {"BankSerial", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSerial)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"PlateSerial", p.PlateSerial},
           {"LastFragment", std::string(1, p.LastFragment)},
           {"SessionID", p.SessionID},
           {"CustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.CustomerName)},
           {"IdCardType", std::string(1, p.IdCardType)},
           {"IdentifiedCardNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.IdentifiedCardNo)},
           {"Gender", std::string(1, p.Gender)},
           {"CountryCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.CountryCode)},
           {"CustType", std::string(1, p.CustType)},
           {"Address", codec_convert("UTF-8//TRANSLIT", "GBK", p.Address)},
           {"ZipCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.ZipCode)},
           {"Telephone", codec_convert("UTF-8//TRANSLIT", "GBK", p.Telephone)},
           {"MobilePhone", codec_convert("UTF-8//TRANSLIT", "GBK", p.MobilePhone)},
           {"Fax", codec_convert("UTF-8//TRANSLIT", "GBK", p.Fax)},
           {"EMail", codec_convert("UTF-8//TRANSLIT", "GBK", p.EMail)},
           {"MoneyAccountStatus", std::string(1, p.MoneyAccountStatus)},
           {"BankAccount", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankAccount)},
           {"BankPassWord", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankPassWord)},
           {"InstallID", p.InstallID},
           {"VerifyCertNoFlag", std::string(1, p.VerifyCertNoFlag)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"Digest", codec_convert("UTF-8//TRANSLIT", "GBK", p.Digest)},
           {"BankAccType", std::string(1, p.BankAccType)},
           {"BrokerIDByBank", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerIDByBank)},
           {"TID", p.TID},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"Password", codec_convert("UTF-8//TRANSLIT", "GBK", p.Password)},
           {"BankReserveOpenSeq", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankReserveOpenSeq)},
           {"BookDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.BookDate)},
           {"BookPsw", codec_convert("UTF-8//TRANSLIT", "GBK", p.BookPsw)},
           {"ErrorID", p.ErrorID},
           {"ErrorMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.ErrorMsg)},
  };
}

void from_json(const json& j, CThostFtdcReserveOpenAccountConfirmField& p) {
  auto &v0 = j.at("TradeCode").get_ref<const std::string &>();
  std::strncpy(p.TradeCode, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradeCode));
  auto &v1 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BankID));
  auto &v2 = j.at("BankBranchID").get_ref<const std::string &>();
  std::strncpy(p.BankBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BankBranchID));
  auto &v3 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v4 = j.at("BrokerBranchID").get_ref<const std::string &>();
  std::strncpy(p.BrokerBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.BrokerBranchID));
  auto &v5 = j.at("TradeDate").get_ref<const std::string &>();
  std::strncpy(p.TradeDate, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.TradeDate));
  auto &v6 = j.at("TradeTime").get_ref<const std::string &>();
  std::strncpy(p.TradeTime, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.TradeTime));
  auto &v7 = j.at("BankSerial").get_ref<const std::string &>();
  std::strncpy(p.BankSerial, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BankSerial));
  auto &v8 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("PlateSerial").get_to(p.PlateSerial);
  auto &v10 = j.at("LastFragment").get_ref<const std::string &>();
  p.LastFragment = v10.at(0);
  j.at("SessionID").get_to(p.SessionID);
  auto &v12 = j.at("CustomerName").get_ref<const std::string &>();
  std::strncpy(p.CustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.CustomerName));
  auto &v13 = j.at("IdCardType").get_ref<const std::string &>();
  p.IdCardType = v13.at(0);
  auto &v14 = j.at("IdentifiedCardNo").get_ref<const std::string &>();
  std::strncpy(p.IdentifiedCardNo, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.IdentifiedCardNo));
  auto &v15 = j.at("Gender").get_ref<const std::string &>();
  p.Gender = v15.at(0);
  auto &v16 = j.at("CountryCode").get_ref<const std::string &>();
  std::strncpy(p.CountryCode, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.CountryCode));
  auto &v17 = j.at("CustType").get_ref<const std::string &>();
  p.CustType = v17.at(0);
  auto &v18 = j.at("Address").get_ref<const std::string &>();
  std::strncpy(p.Address, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.Address));
  auto &v19 = j.at("ZipCode").get_ref<const std::string &>();
  std::strncpy(p.ZipCode, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.ZipCode));
  auto &v20 = j.at("Telephone").get_ref<const std::string &>();
  std::strncpy(p.Telephone, codec_convert("GBK//TRANSLIT", "UTF-8", v20.c_str()).c_str(), sizeof(p.Telephone));
  auto &v21 = j.at("MobilePhone").get_ref<const std::string &>();
  std::strncpy(p.MobilePhone, codec_convert("GBK//TRANSLIT", "UTF-8", v21.c_str()).c_str(), sizeof(p.MobilePhone));
  auto &v22 = j.at("Fax").get_ref<const std::string &>();
  std::strncpy(p.Fax, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.Fax));
  auto &v23 = j.at("EMail").get_ref<const std::string &>();
  std::strncpy(p.EMail, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.EMail));
  auto &v24 = j.at("MoneyAccountStatus").get_ref<const std::string &>();
  p.MoneyAccountStatus = v24.at(0);
  auto &v25 = j.at("BankAccount").get_ref<const std::string &>();
  std::strncpy(p.BankAccount, codec_convert("GBK//TRANSLIT", "UTF-8", v25.c_str()).c_str(), sizeof(p.BankAccount));
  auto &v26 = j.at("BankPassWord").get_ref<const std::string &>();
  std::strncpy(p.BankPassWord, codec_convert("GBK//TRANSLIT", "UTF-8", v26.c_str()).c_str(), sizeof(p.BankPassWord));
  j.at("InstallID").get_to(p.InstallID);
  auto &v28 = j.at("VerifyCertNoFlag").get_ref<const std::string &>();
  p.VerifyCertNoFlag = v28.at(0);
  auto &v29 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v29.c_str()).c_str(), sizeof(p.CurrencyID));
  auto &v30 = j.at("Digest").get_ref<const std::string &>();
  std::strncpy(p.Digest, codec_convert("GBK//TRANSLIT", "UTF-8", v30.c_str()).c_str(), sizeof(p.Digest));
  auto &v31 = j.at("BankAccType").get_ref<const std::string &>();
  p.BankAccType = v31.at(0);
  auto &v32 = j.at("BrokerIDByBank").get_ref<const std::string &>();
  std::strncpy(p.BrokerIDByBank, codec_convert("GBK//TRANSLIT", "UTF-8", v32.c_str()).c_str(), sizeof(p.BrokerIDByBank));
  j.at("TID").get_to(p.TID);
  auto &v34 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v34.c_str()).c_str(), sizeof(p.AccountID));
  auto &v35 = j.at("Password").get_ref<const std::string &>();
  std::strncpy(p.Password, codec_convert("GBK//TRANSLIT", "UTF-8", v35.c_str()).c_str(), sizeof(p.Password));
  auto &v36 = j.at("BankReserveOpenSeq").get_ref<const std::string &>();
  std::strncpy(p.BankReserveOpenSeq, codec_convert("GBK//TRANSLIT", "UTF-8", v36.c_str()).c_str(), sizeof(p.BankReserveOpenSeq));
  auto &v37 = j.at("BookDate").get_ref<const std::string &>();
  std::strncpy(p.BookDate, codec_convert("GBK//TRANSLIT", "UTF-8", v37.c_str()).c_str(), sizeof(p.BookDate));
  auto &v38 = j.at("BookPsw").get_ref<const std::string &>();
  std::strncpy(p.BookPsw, codec_convert("GBK//TRANSLIT", "UTF-8", v38.c_str()).c_str(), sizeof(p.BookPsw));
  j.at("ErrorID").get_to(p.ErrorID);
  auto &v40 = j.at("ErrorMsg").get_ref<const std::string &>();
  std::strncpy(p.ErrorMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v40.c_str()).c_str(), sizeof(p.ErrorMsg));

}



void to_json(json& j, const CThostFtdcReserveOpenAccountField& p) {
  j = json{
           {"TradeCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeCode)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBranchID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BrokerBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerBranchID)},
           {"TradeDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDate)},
           {"TradeTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTime)},
           {"BankSerial", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSerial)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"PlateSerial", p.PlateSerial},
           {"LastFragment", std::string(1, p.LastFragment)},
           {"SessionID", p.SessionID},
           {"CustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.CustomerName)},
           {"IdCardType", std::string(1, p.IdCardType)},
           {"IdentifiedCardNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.IdentifiedCardNo)},
           {"Gender", std::string(1, p.Gender)},
           {"CountryCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.CountryCode)},
           {"CustType", std::string(1, p.CustType)},
           {"Address", codec_convert("UTF-8//TRANSLIT", "GBK", p.Address)},
           {"ZipCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.ZipCode)},
           {"Telephone", codec_convert("UTF-8//TRANSLIT", "GBK", p.Telephone)},
           {"MobilePhone", codec_convert("UTF-8//TRANSLIT", "GBK", p.MobilePhone)},
           {"Fax", codec_convert("UTF-8//TRANSLIT", "GBK", p.Fax)},
           {"EMail", codec_convert("UTF-8//TRANSLIT", "GBK", p.EMail)},
           {"MoneyAccountStatus", std::string(1, p.MoneyAccountStatus)},
           {"BankAccount", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankAccount)},
           {"BankPassWord", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankPassWord)},
           {"InstallID", p.InstallID},
           {"VerifyCertNoFlag", std::string(1, p.VerifyCertNoFlag)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"Digest", codec_convert("UTF-8//TRANSLIT", "GBK", p.Digest)},
           {"BankAccType", std::string(1, p.BankAccType)},
           {"BrokerIDByBank", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerIDByBank)},
           {"TID", p.TID},
           {"ReserveOpenAccStas", std::string(1, p.ReserveOpenAccStas)},
           {"ErrorID", p.ErrorID},
           {"ErrorMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.ErrorMsg)},
  };
}

void from_json(const json& j, CThostFtdcReserveOpenAccountField& p) {
  auto &v0 = j.at("TradeCode").get_ref<const std::string &>();
  std::strncpy(p.TradeCode, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradeCode));
  auto &v1 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BankID));
  auto &v2 = j.at("BankBranchID").get_ref<const std::string &>();
  std::strncpy(p.BankBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BankBranchID));
  auto &v3 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v4 = j.at("BrokerBranchID").get_ref<const std::string &>();
  std::strncpy(p.BrokerBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.BrokerBranchID));
  auto &v5 = j.at("TradeDate").get_ref<const std::string &>();
  std::strncpy(p.TradeDate, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.TradeDate));
  auto &v6 = j.at("TradeTime").get_ref<const std::string &>();
  std::strncpy(p.TradeTime, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.TradeTime));
  auto &v7 = j.at("BankSerial").get_ref<const std::string &>();
  std::strncpy(p.BankSerial, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BankSerial));
  auto &v8 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("PlateSerial").get_to(p.PlateSerial);
  auto &v10 = j.at("LastFragment").get_ref<const std::string &>();
  p.LastFragment = v10.at(0);
  j.at("SessionID").get_to(p.SessionID);
  auto &v12 = j.at("CustomerName").get_ref<const std::string &>();
  std::strncpy(p.CustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.CustomerName));
  auto &v13 = j.at("IdCardType").get_ref<const std::string &>();
  p.IdCardType = v13.at(0);
  auto &v14 = j.at("IdentifiedCardNo").get_ref<const std::string &>();
  std::strncpy(p.IdentifiedCardNo, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.IdentifiedCardNo));
  auto &v15 = j.at("Gender").get_ref<const std::string &>();
  p.Gender = v15.at(0);
  auto &v16 = j.at("CountryCode").get_ref<const std::string &>();
  std::strncpy(p.CountryCode, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.CountryCode));
  auto &v17 = j.at("CustType").get_ref<const std::string &>();
  p.CustType = v17.at(0);
  auto &v18 = j.at("Address").get_ref<const std::string &>();
  std::strncpy(p.Address, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.Address));
  auto &v19 = j.at("ZipCode").get_ref<const std::string &>();
  std::strncpy(p.ZipCode, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.ZipCode));
  auto &v20 = j.at("Telephone").get_ref<const std::string &>();
  std::strncpy(p.Telephone, codec_convert("GBK//TRANSLIT", "UTF-8", v20.c_str()).c_str(), sizeof(p.Telephone));
  auto &v21 = j.at("MobilePhone").get_ref<const std::string &>();
  std::strncpy(p.MobilePhone, codec_convert("GBK//TRANSLIT", "UTF-8", v21.c_str()).c_str(), sizeof(p.MobilePhone));
  auto &v22 = j.at("Fax").get_ref<const std::string &>();
  std::strncpy(p.Fax, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.Fax));
  auto &v23 = j.at("EMail").get_ref<const std::string &>();
  std::strncpy(p.EMail, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.EMail));
  auto &v24 = j.at("MoneyAccountStatus").get_ref<const std::string &>();
  p.MoneyAccountStatus = v24.at(0);
  auto &v25 = j.at("BankAccount").get_ref<const std::string &>();
  std::strncpy(p.BankAccount, codec_convert("GBK//TRANSLIT", "UTF-8", v25.c_str()).c_str(), sizeof(p.BankAccount));
  auto &v26 = j.at("BankPassWord").get_ref<const std::string &>();
  std::strncpy(p.BankPassWord, codec_convert("GBK//TRANSLIT", "UTF-8", v26.c_str()).c_str(), sizeof(p.BankPassWord));
  j.at("InstallID").get_to(p.InstallID);
  auto &v28 = j.at("VerifyCertNoFlag").get_ref<const std::string &>();
  p.VerifyCertNoFlag = v28.at(0);
  auto &v29 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v29.c_str()).c_str(), sizeof(p.CurrencyID));
  auto &v30 = j.at("Digest").get_ref<const std::string &>();
  std::strncpy(p.Digest, codec_convert("GBK//TRANSLIT", "UTF-8", v30.c_str()).c_str(), sizeof(p.Digest));
  auto &v31 = j.at("BankAccType").get_ref<const std::string &>();
  p.BankAccType = v31.at(0);
  auto &v32 = j.at("BrokerIDByBank").get_ref<const std::string &>();
  std::strncpy(p.BrokerIDByBank, codec_convert("GBK//TRANSLIT", "UTF-8", v32.c_str()).c_str(), sizeof(p.BrokerIDByBank));
  j.at("TID").get_to(p.TID);
  auto &v34 = j.at("ReserveOpenAccStas").get_ref<const std::string &>();
  p.ReserveOpenAccStas = v34.at(0);
  j.at("ErrorID").get_to(p.ErrorID);
  auto &v36 = j.at("ErrorMsg").get_ref<const std::string &>();
  std::strncpy(p.ErrorMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v36.c_str()).c_str(), sizeof(p.ErrorMsg));

}



void to_json(json& j, const CThostFtdcAccountPropertyField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankAccount", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankAccount)},
           {"OpenName", codec_convert("UTF-8//TRANSLIT", "GBK", p.OpenName)},
           {"OpenBank", codec_convert("UTF-8//TRANSLIT", "GBK", p.OpenBank)},
           {"IsActive", p.IsActive},
           {"AccountSourceType", std::string(1, p.AccountSourceType)},
           {"OpenDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.OpenDate)},
           {"CancelDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.CancelDate)},
           {"OperatorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.OperatorID)},
           {"OperateDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.OperateDate)},
           {"OperateTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.OperateTime)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
  };
}

void from_json(const json& j, CThostFtdcAccountPropertyField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.AccountID));
  auto &v2 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BankID));
  auto &v3 = j.at("BankAccount").get_ref<const std::string &>();
  std::strncpy(p.BankAccount, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.BankAccount));
  auto &v4 = j.at("OpenName").get_ref<const std::string &>();
  std::strncpy(p.OpenName, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.OpenName));
  auto &v5 = j.at("OpenBank").get_ref<const std::string &>();
  std::strncpy(p.OpenBank, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.OpenBank));
  j.at("IsActive").get_to(p.IsActive);
  auto &v7 = j.at("AccountSourceType").get_ref<const std::string &>();
  p.AccountSourceType = v7.at(0);
  auto &v8 = j.at("OpenDate").get_ref<const std::string &>();
  std::strncpy(p.OpenDate, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.OpenDate));
  auto &v9 = j.at("CancelDate").get_ref<const std::string &>();
  std::strncpy(p.CancelDate, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.CancelDate));
  auto &v10 = j.at("OperatorID").get_ref<const std::string &>();
  std::strncpy(p.OperatorID, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.OperatorID));
  auto &v11 = j.at("OperateDate").get_ref<const std::string &>();
  std::strncpy(p.OperateDate, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.OperateDate));
  auto &v12 = j.at("OperateTime").get_ref<const std::string &>();
  std::strncpy(p.OperateTime, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.OperateTime));
  auto &v13 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.CurrencyID));

}



void to_json(json& j, const CThostFtdcQryCurrDRIdentityField& p) {
  j = json{
           {"DRIdentityID", p.DRIdentityID},
  };
}

void from_json(const json& j, CThostFtdcQryCurrDRIdentityField& p) {
  j.at("DRIdentityID").get_to(p.DRIdentityID);

}



void to_json(json& j, const CThostFtdcCurrDRIdentityField& p) {
  j = json{
           {"DRIdentityID", p.DRIdentityID},
  };
}

void from_json(const json& j, CThostFtdcCurrDRIdentityField& p) {
  j.at("DRIdentityID").get_to(p.DRIdentityID);

}



void to_json(json& j, const CThostFtdcQrySecAgentCheckModeField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
  };
}

void from_json(const json& j, CThostFtdcQrySecAgentCheckModeField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));

}



void to_json(json& j, const CThostFtdcQrySecAgentTradeInfoField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BrokerSecAgentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerSecAgentID)},
  };
}

void from_json(const json& j, CThostFtdcQrySecAgentTradeInfoField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("BrokerSecAgentID").get_ref<const std::string &>();
  std::strncpy(p.BrokerSecAgentID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerSecAgentID));

}



void to_json(json& j, const CThostFtdcReqUserAuthMethodField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
  };
}

void from_json(const json& j, CThostFtdcReqUserAuthMethodField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.UserID));

}



void to_json(json& j, const CThostFtdcRspUserAuthMethodField& p) {
  j = json{
           {"UsableAuthMethod", p.UsableAuthMethod},
  };
}

void from_json(const json& j, CThostFtdcRspUserAuthMethodField& p) {
  j.at("UsableAuthMethod").get_to(p.UsableAuthMethod);

}



void to_json(json& j, const CThostFtdcReqGenUserCaptchaField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
  };
}

void from_json(const json& j, CThostFtdcReqGenUserCaptchaField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.UserID));

}



void to_json(json& j, const CThostFtdcRspGenUserCaptchaField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"CaptchaInfoLen", p.CaptchaInfoLen},
           {"CaptchaInfo", codec_convert("UTF-8//TRANSLIT", "GBK", p.CaptchaInfo)},
  };
}

void from_json(const json& j, CThostFtdcRspGenUserCaptchaField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.UserID));
  j.at("CaptchaInfoLen").get_to(p.CaptchaInfoLen);
  auto &v3 = j.at("CaptchaInfo").get_ref<const std::string &>();
  std::strncpy(p.CaptchaInfo, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.CaptchaInfo));

}



void to_json(json& j, const CThostFtdcReqGenUserTextField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
  };
}

void from_json(const json& j, CThostFtdcReqGenUserTextField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.UserID));

}



void to_json(json& j, const CThostFtdcRspGenUserTextField& p) {
  j = json{
           {"UserTextSeq", p.UserTextSeq},
  };
}

void from_json(const json& j, CThostFtdcRspGenUserTextField& p) {
  j.at("UserTextSeq").get_to(p.UserTextSeq);

}



void to_json(json& j, const CThostFtdcReqUserLoginWithCaptchaField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"Password", codec_convert("UTF-8//TRANSLIT", "GBK", p.Password)},
           {"UserProductInfo", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserProductInfo)},
           {"InterfaceProductInfo", codec_convert("UTF-8//TRANSLIT", "GBK", p.InterfaceProductInfo)},
           {"ProtocolInfo", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProtocolInfo)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"LoginRemark", codec_convert("UTF-8//TRANSLIT", "GBK", p.LoginRemark)},
           {"Captcha", codec_convert("UTF-8//TRANSLIT", "GBK", p.Captcha)},
           {"ClientIPPort", p.ClientIPPort},
           {"ClientIPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientIPAddress)},
  };
}

void from_json(const json& j, CThostFtdcReqUserLoginWithCaptchaField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.UserID));
  auto &v3 = j.at("Password").get_ref<const std::string &>();
  std::strncpy(p.Password, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.Password));
  auto &v4 = j.at("UserProductInfo").get_ref<const std::string &>();
  std::strncpy(p.UserProductInfo, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.UserProductInfo));
  auto &v5 = j.at("InterfaceProductInfo").get_ref<const std::string &>();
  std::strncpy(p.InterfaceProductInfo, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.InterfaceProductInfo));
  auto &v6 = j.at("ProtocolInfo").get_ref<const std::string &>();
  std::strncpy(p.ProtocolInfo, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.ProtocolInfo));
  auto &v7 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v8 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.reserve1));
  auto &v9 = j.at("LoginRemark").get_ref<const std::string &>();
  std::strncpy(p.LoginRemark, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.LoginRemark));
  auto &v10 = j.at("Captcha").get_ref<const std::string &>();
  std::strncpy(p.Captcha, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.Captcha));
  j.at("ClientIPPort").get_to(p.ClientIPPort);
  auto &v12 = j.at("ClientIPAddress").get_ref<const std::string &>();
  std::strncpy(p.ClientIPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.ClientIPAddress));

}



void to_json(json& j, const CThostFtdcReqUserLoginWithTextField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"Password", codec_convert("UTF-8//TRANSLIT", "GBK", p.Password)},
           {"UserProductInfo", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserProductInfo)},
           {"InterfaceProductInfo", codec_convert("UTF-8//TRANSLIT", "GBK", p.InterfaceProductInfo)},
           {"ProtocolInfo", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProtocolInfo)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"LoginRemark", codec_convert("UTF-8//TRANSLIT", "GBK", p.LoginRemark)},
           {"Text", codec_convert("UTF-8//TRANSLIT", "GBK", p.Text)},
           {"ClientIPPort", p.ClientIPPort},
           {"ClientIPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientIPAddress)},
  };
}

void from_json(const json& j, CThostFtdcReqUserLoginWithTextField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.UserID));
  auto &v3 = j.at("Password").get_ref<const std::string &>();
  std::strncpy(p.Password, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.Password));
  auto &v4 = j.at("UserProductInfo").get_ref<const std::string &>();
  std::strncpy(p.UserProductInfo, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.UserProductInfo));
  auto &v5 = j.at("InterfaceProductInfo").get_ref<const std::string &>();
  std::strncpy(p.InterfaceProductInfo, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.InterfaceProductInfo));
  auto &v6 = j.at("ProtocolInfo").get_ref<const std::string &>();
  std::strncpy(p.ProtocolInfo, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.ProtocolInfo));
  auto &v7 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v8 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.reserve1));
  auto &v9 = j.at("LoginRemark").get_ref<const std::string &>();
  std::strncpy(p.LoginRemark, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.LoginRemark));
  auto &v10 = j.at("Text").get_ref<const std::string &>();
  std::strncpy(p.Text, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.Text));
  j.at("ClientIPPort").get_to(p.ClientIPPort);
  auto &v12 = j.at("ClientIPAddress").get_ref<const std::string &>();
  std::strncpy(p.ClientIPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.ClientIPAddress));

}



void to_json(json& j, const CThostFtdcReqUserLoginWithOTPField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"Password", codec_convert("UTF-8//TRANSLIT", "GBK", p.Password)},
           {"UserProductInfo", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserProductInfo)},
           {"InterfaceProductInfo", codec_convert("UTF-8//TRANSLIT", "GBK", p.InterfaceProductInfo)},
           {"ProtocolInfo", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProtocolInfo)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"LoginRemark", codec_convert("UTF-8//TRANSLIT", "GBK", p.LoginRemark)},
           {"OTPPassword", codec_convert("UTF-8//TRANSLIT", "GBK", p.OTPPassword)},
           {"ClientIPPort", p.ClientIPPort},
           {"ClientIPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientIPAddress)},
  };
}

void from_json(const json& j, CThostFtdcReqUserLoginWithOTPField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.UserID));
  auto &v3 = j.at("Password").get_ref<const std::string &>();
  std::strncpy(p.Password, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.Password));
  auto &v4 = j.at("UserProductInfo").get_ref<const std::string &>();
  std::strncpy(p.UserProductInfo, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.UserProductInfo));
  auto &v5 = j.at("InterfaceProductInfo").get_ref<const std::string &>();
  std::strncpy(p.InterfaceProductInfo, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.InterfaceProductInfo));
  auto &v6 = j.at("ProtocolInfo").get_ref<const std::string &>();
  std::strncpy(p.ProtocolInfo, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.ProtocolInfo));
  auto &v7 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v8 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.reserve1));
  auto &v9 = j.at("LoginRemark").get_ref<const std::string &>();
  std::strncpy(p.LoginRemark, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.LoginRemark));
  auto &v10 = j.at("OTPPassword").get_ref<const std::string &>();
  std::strncpy(p.OTPPassword, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.OTPPassword));
  j.at("ClientIPPort").get_to(p.ClientIPPort);
  auto &v12 = j.at("ClientIPAddress").get_ref<const std::string &>();
  std::strncpy(p.ClientIPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.ClientIPAddress));

}



void to_json(json& j, const CThostFtdcReqApiHandshakeField& p) {
  j = json{
           {"CryptoKeyVersion", codec_convert("UTF-8//TRANSLIT", "GBK", p.CryptoKeyVersion)},
  };
}

void from_json(const json& j, CThostFtdcReqApiHandshakeField& p) {
  auto &v0 = j.at("CryptoKeyVersion").get_ref<const std::string &>();
  std::strncpy(p.CryptoKeyVersion, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.CryptoKeyVersion));

}



void to_json(json& j, const CThostFtdcRspApiHandshakeField& p) {
  j = json{
           {"FrontHandshakeDataLen", p.FrontHandshakeDataLen},
           {"FrontHandshakeData", codec_convert("UTF-8//TRANSLIT", "GBK", p.FrontHandshakeData)},
           {"IsApiAuthEnabled", p.IsApiAuthEnabled},
  };
}

void from_json(const json& j, CThostFtdcRspApiHandshakeField& p) {
  j.at("FrontHandshakeDataLen").get_to(p.FrontHandshakeDataLen);
  auto &v1 = j.at("FrontHandshakeData").get_ref<const std::string &>();
  std::strncpy(p.FrontHandshakeData, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.FrontHandshakeData));
  j.at("IsApiAuthEnabled").get_to(p.IsApiAuthEnabled);

}



void to_json(json& j, const CThostFtdcReqVerifyApiKeyField& p) {
  j = json{
           {"ApiHandshakeDataLen", p.ApiHandshakeDataLen},
           {"ApiHandshakeData", codec_convert("UTF-8//TRANSLIT", "GBK", p.ApiHandshakeData)},
  };
}

void from_json(const json& j, CThostFtdcReqVerifyApiKeyField& p) {
  j.at("ApiHandshakeDataLen").get_to(p.ApiHandshakeDataLen);
  auto &v1 = j.at("ApiHandshakeData").get_ref<const std::string &>();
  std::strncpy(p.ApiHandshakeData, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ApiHandshakeData));

}



void to_json(json& j, const CThostFtdcDepartmentUserField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"InvestorRange", std::string(1, p.InvestorRange)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
  };
}

void from_json(const json& j, CThostFtdcDepartmentUserField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.UserID));
  auto &v2 = j.at("InvestorRange").get_ref<const std::string &>();
  p.InvestorRange = v2.at(0);
  auto &v3 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InvestorID));

}



void to_json(json& j, const CThostFtdcQueryFreqField& p) {
  j = json{
           {"QueryFreq", p.QueryFreq},
           {"FTDPkgFreq", p.FTDPkgFreq},
  };
}

void from_json(const json& j, CThostFtdcQueryFreqField& p) {
  j.at("QueryFreq").get_to(p.QueryFreq);
  j.at("FTDPkgFreq").get_to(p.FTDPkgFreq);

}



void to_json(json& j, const CThostFtdcAuthForbiddenIPField& p) {
  j = json{
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
  };
}

void from_json(const json& j, CThostFtdcAuthForbiddenIPField& p) {
  auto &v0 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.IPAddress));

}



void to_json(json& j, const CThostFtdcQryAuthForbiddenIPField& p) {
  j = json{
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
  };
}

void from_json(const json& j, CThostFtdcQryAuthForbiddenIPField& p) {
  auto &v0 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.IPAddress));

}



void to_json(json& j, const CThostFtdcSyncDelaySwapFrozenField& p) {
  j = json{
           {"DelaySwapSeqNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.DelaySwapSeqNo)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"FromCurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.FromCurrencyID)},
           {"FromRemainSwap", p.FromRemainSwap},
           {"IsManualSwap", p.IsManualSwap},
  };
}

void from_json(const json& j, CThostFtdcSyncDelaySwapFrozenField& p) {
  auto &v0 = j.at("DelaySwapSeqNo").get_ref<const std::string &>();
  std::strncpy(p.DelaySwapSeqNo, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.DelaySwapSeqNo));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v3 = j.at("FromCurrencyID").get_ref<const std::string &>();
  std::strncpy(p.FromCurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.FromCurrencyID));
  j.at("FromRemainSwap").get_to(p.FromRemainSwap);
  j.at("IsManualSwap").get_to(p.IsManualSwap);

}



void to_json(json& j, const CThostFtdcUserSystemInfoField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"ClientSystemInfoLen", p.ClientSystemInfoLen},
           {"ClientSystemInfo", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientSystemInfo)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"ClientIPPort", p.ClientIPPort},
           {"ClientLoginTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientLoginTime)},
           {"ClientAppID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientAppID)},
           {"ClientPublicIP", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientPublicIP)},
           {"ClientLoginRemark", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientLoginRemark)},
  };
}

void from_json(const json& j, CThostFtdcUserSystemInfoField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.UserID));
  j.at("ClientSystemInfoLen").get_to(p.ClientSystemInfoLen);
  auto &v3 = j.at("ClientSystemInfo").get_ref<const std::string &>();
  std::strncpy(p.ClientSystemInfo, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ClientSystemInfo));
  auto &v4 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.reserve1));
  j.at("ClientIPPort").get_to(p.ClientIPPort);
  auto &v6 = j.at("ClientLoginTime").get_ref<const std::string &>();
  std::strncpy(p.ClientLoginTime, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.ClientLoginTime));
  auto &v7 = j.at("ClientAppID").get_ref<const std::string &>();
  std::strncpy(p.ClientAppID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.ClientAppID));
  auto &v8 = j.at("ClientPublicIP").get_ref<const std::string &>();
  std::strncpy(p.ClientPublicIP, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.ClientPublicIP));
  auto &v9 = j.at("ClientLoginRemark").get_ref<const std::string &>();
  std::strncpy(p.ClientLoginRemark, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.ClientLoginRemark));

}



void to_json(json& j, const CThostFtdcAuthUserIDField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"AppID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AppID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"AuthType", std::string(1, p.AuthType)},
  };
}

void from_json(const json& j, CThostFtdcAuthUserIDField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("AppID").get_ref<const std::string &>();
  std::strncpy(p.AppID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.AppID));
  auto &v2 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.UserID));
  auto &v3 = j.at("AuthType").get_ref<const std::string &>();
  p.AuthType = v3.at(0);

}



void to_json(json& j, const CThostFtdcAuthIPField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"AppID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AppID)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
  };
}

void from_json(const json& j, CThostFtdcAuthIPField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("AppID").get_ref<const std::string &>();
  std::strncpy(p.AppID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.AppID));
  auto &v2 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.IPAddress));

}



void to_json(json& j, const CThostFtdcQryClassifiedInstrumentField& p) {
  j = json{
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ExchangeInstID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeInstID)},
           {"ProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductID)},
           {"TradingType", std::string(1, p.TradingType)},
           {"ClassType", std::string(1, p.ClassType)},
  };
}

void from_json(const json& j, CThostFtdcQryClassifiedInstrumentField& p) {
  auto &v0 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v2 = j.at("ExchangeInstID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeInstID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ExchangeInstID));
  auto &v3 = j.at("ProductID").get_ref<const std::string &>();
  std::strncpy(p.ProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ProductID));
  auto &v4 = j.at("TradingType").get_ref<const std::string &>();
  p.TradingType = v4.at(0);
  auto &v5 = j.at("ClassType").get_ref<const std::string &>();
  p.ClassType = v5.at(0);

}



void to_json(json& j, const CThostFtdcQryCombPromotionParamField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQryCombPromotionParamField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcCombPromotionParamField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"CombHedgeFlag", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombHedgeFlag)},
           {"Xparameter", p.Xparameter},
  };
}

void from_json(const json& j, CThostFtdcCombPromotionParamField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v2 = j.at("CombHedgeFlag").get_ref<const std::string &>();
  std::strncpy(p.CombHedgeFlag, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.CombHedgeFlag));
  j.at("Xparameter").get_to(p.Xparameter);

}



void to_json(json& j, const CThostFtdcReqUserLoginSMField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"Password", codec_convert("UTF-8//TRANSLIT", "GBK", p.Password)},
           {"UserProductInfo", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserProductInfo)},
           {"InterfaceProductInfo", codec_convert("UTF-8//TRANSLIT", "GBK", p.InterfaceProductInfo)},
           {"ProtocolInfo", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProtocolInfo)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"OneTimePassword", codec_convert("UTF-8//TRANSLIT", "GBK", p.OneTimePassword)},
           {"reserve1", codec_convert("UTF-8//TRANSLIT", "GBK", p.reserve1)},
           {"LoginRemark", codec_convert("UTF-8//TRANSLIT", "GBK", p.LoginRemark)},
           {"ClientIPPort", p.ClientIPPort},
           {"ClientIPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientIPAddress)},
           {"BrokerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerName)},
           {"AuthCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.AuthCode)},
           {"AppID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AppID)},
           {"PIN", codec_convert("UTF-8//TRANSLIT", "GBK", p.PIN)},
  };
}

void from_json(const json& j, CThostFtdcReqUserLoginSMField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.UserID));
  auto &v3 = j.at("Password").get_ref<const std::string &>();
  std::strncpy(p.Password, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.Password));
  auto &v4 = j.at("UserProductInfo").get_ref<const std::string &>();
  std::strncpy(p.UserProductInfo, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.UserProductInfo));
  auto &v5 = j.at("InterfaceProductInfo").get_ref<const std::string &>();
  std::strncpy(p.InterfaceProductInfo, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.InterfaceProductInfo));
  auto &v6 = j.at("ProtocolInfo").get_ref<const std::string &>();
  std::strncpy(p.ProtocolInfo, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.ProtocolInfo));
  auto &v7 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v8 = j.at("OneTimePassword").get_ref<const std::string &>();
  std::strncpy(p.OneTimePassword, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.OneTimePassword));
  auto &v9 = j.at("reserve1").get_ref<const std::string &>();
  std::strncpy(p.reserve1, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.reserve1));
  auto &v10 = j.at("LoginRemark").get_ref<const std::string &>();
  std::strncpy(p.LoginRemark, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.LoginRemark));
  j.at("ClientIPPort").get_to(p.ClientIPPort);
  auto &v12 = j.at("ClientIPAddress").get_ref<const std::string &>();
  std::strncpy(p.ClientIPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.ClientIPAddress));
  auto &v13 = j.at("BrokerName").get_ref<const std::string &>();
  std::strncpy(p.BrokerName, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.BrokerName));
  auto &v14 = j.at("AuthCode").get_ref<const std::string &>();
  std::strncpy(p.AuthCode, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.AuthCode));
  auto &v15 = j.at("AppID").get_ref<const std::string &>();
  std::strncpy(p.AppID, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.AppID));
  auto &v16 = j.at("PIN").get_ref<const std::string &>();
  std::strncpy(p.PIN, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.PIN));

}



void to_json(json& j, const CThostFtdcQryRiskSettleInvstPositionField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQryRiskSettleInvstPositionField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcQryRiskSettleProductStatusField& p) {
  j = json{
           {"ProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductID)},
  };
}

void from_json(const json& j, CThostFtdcQryRiskSettleProductStatusField& p) {
  auto &v0 = j.at("ProductID").get_ref<const std::string &>();
  std::strncpy(p.ProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ProductID));

}



void to_json(json& j, const CThostFtdcRiskSettleInvstPositionField& p) {
  j = json{
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"PosiDirection", std::string(1, p.PosiDirection)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"PositionDate", std::string(1, p.PositionDate)},
           {"YdPosition", p.YdPosition},
           {"Position", p.Position},
           {"LongFrozen", p.LongFrozen},
           {"ShortFrozen", p.ShortFrozen},
           {"LongFrozenAmount", p.LongFrozenAmount},
           {"ShortFrozenAmount", p.ShortFrozenAmount},
           {"OpenVolume", p.OpenVolume},
           {"CloseVolume", p.CloseVolume},
           {"OpenAmount", p.OpenAmount},
           {"CloseAmount", p.CloseAmount},
           {"PositionCost", p.PositionCost},
           {"PreMargin", p.PreMargin},
           {"UseMargin", p.UseMargin},
           {"FrozenMargin", p.FrozenMargin},
           {"FrozenCash", p.FrozenCash},
           {"FrozenCommission", p.FrozenCommission},
           {"CashIn", p.CashIn},
           {"Commission", p.Commission},
           {"CloseProfit", p.CloseProfit},
           {"PositionProfit", p.PositionProfit},
           {"PreSettlementPrice", p.PreSettlementPrice},
           {"SettlementPrice", p.SettlementPrice},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"SettlementID", p.SettlementID},
           {"OpenCost", p.OpenCost},
           {"ExchangeMargin", p.ExchangeMargin},
           {"CombPosition", p.CombPosition},
           {"CombLongFrozen", p.CombLongFrozen},
           {"CombShortFrozen", p.CombShortFrozen},
           {"CloseProfitByDate", p.CloseProfitByDate},
           {"CloseProfitByTrade", p.CloseProfitByTrade},
           {"TodayPosition", p.TodayPosition},
           {"MarginRateByMoney", p.MarginRateByMoney},
           {"MarginRateByVolume", p.MarginRateByVolume},
           {"StrikeFrozen", p.StrikeFrozen},
           {"StrikeFrozenAmount", p.StrikeFrozenAmount},
           {"AbandonFrozen", p.AbandonFrozen},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"YdStrikeFrozen", p.YdStrikeFrozen},
           {"InvestUnitID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestUnitID)},
           {"PositionCostOffset", p.PositionCostOffset},
           {"TasPosition", p.TasPosition},
           {"TasPositionCost", p.TasPositionCost},
  };
}

void from_json(const json& j, CThostFtdcRiskSettleInvstPositionField& p) {
  auto &v0 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v3 = j.at("PosiDirection").get_ref<const std::string &>();
  p.PosiDirection = v3.at(0);
  auto &v4 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v4.at(0);
  auto &v5 = j.at("PositionDate").get_ref<const std::string &>();
  p.PositionDate = v5.at(0);
  j.at("YdPosition").get_to(p.YdPosition);
  j.at("Position").get_to(p.Position);
  j.at("LongFrozen").get_to(p.LongFrozen);
  j.at("ShortFrozen").get_to(p.ShortFrozen);
  j.at("LongFrozenAmount").get_to(p.LongFrozenAmount);
  j.at("ShortFrozenAmount").get_to(p.ShortFrozenAmount);
  j.at("OpenVolume").get_to(p.OpenVolume);
  j.at("CloseVolume").get_to(p.CloseVolume);
  j.at("OpenAmount").get_to(p.OpenAmount);
  j.at("CloseAmount").get_to(p.CloseAmount);
  j.at("PositionCost").get_to(p.PositionCost);
  j.at("PreMargin").get_to(p.PreMargin);
  j.at("UseMargin").get_to(p.UseMargin);
  j.at("FrozenMargin").get_to(p.FrozenMargin);
  j.at("FrozenCash").get_to(p.FrozenCash);
  j.at("FrozenCommission").get_to(p.FrozenCommission);
  j.at("CashIn").get_to(p.CashIn);
  j.at("Commission").get_to(p.Commission);
  j.at("CloseProfit").get_to(p.CloseProfit);
  j.at("PositionProfit").get_to(p.PositionProfit);
  j.at("PreSettlementPrice").get_to(p.PreSettlementPrice);
  j.at("SettlementPrice").get_to(p.SettlementPrice);
  auto &v28 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v28.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("SettlementID").get_to(p.SettlementID);
  j.at("OpenCost").get_to(p.OpenCost);
  j.at("ExchangeMargin").get_to(p.ExchangeMargin);
  j.at("CombPosition").get_to(p.CombPosition);
  j.at("CombLongFrozen").get_to(p.CombLongFrozen);
  j.at("CombShortFrozen").get_to(p.CombShortFrozen);
  j.at("CloseProfitByDate").get_to(p.CloseProfitByDate);
  j.at("CloseProfitByTrade").get_to(p.CloseProfitByTrade);
  j.at("TodayPosition").get_to(p.TodayPosition);
  j.at("MarginRateByMoney").get_to(p.MarginRateByMoney);
  j.at("MarginRateByVolume").get_to(p.MarginRateByVolume);
  j.at("StrikeFrozen").get_to(p.StrikeFrozen);
  j.at("StrikeFrozenAmount").get_to(p.StrikeFrozenAmount);
  j.at("AbandonFrozen").get_to(p.AbandonFrozen);
  auto &v43 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v43.c_str()).c_str(), sizeof(p.ExchangeID));
  j.at("YdStrikeFrozen").get_to(p.YdStrikeFrozen);
  auto &v45 = j.at("InvestUnitID").get_ref<const std::string &>();
  std::strncpy(p.InvestUnitID, codec_convert("GBK//TRANSLIT", "UTF-8", v45.c_str()).c_str(), sizeof(p.InvestUnitID));
  j.at("PositionCostOffset").get_to(p.PositionCostOffset);
  j.at("TasPosition").get_to(p.TasPosition);
  j.at("TasPositionCost").get_to(p.TasPositionCost);

}



void to_json(json& j, const CThostFtdcRiskSettleProductStatusField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductID)},
           {"ProductStatus", std::string(1, p.ProductStatus)},
  };
}

void from_json(const json& j, CThostFtdcRiskSettleProductStatusField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("ProductID").get_ref<const std::string &>();
  std::strncpy(p.ProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ProductID));
  auto &v2 = j.at("ProductStatus").get_ref<const std::string &>();
  p.ProductStatus = v2.at(0);

}



void to_json(json& j, const CThostFtdcSyncDeltaInfoField& p) {
  j = json{
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
           {"SyncDeltaStatus", std::string(1, p.SyncDeltaStatus)},
           {"SyncDescription", codec_convert("UTF-8//TRANSLIT", "GBK", p.SyncDescription)},
           {"IsOnlyTrdDelta", p.IsOnlyTrdDelta},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaInfoField& p) {
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);
  auto &v1 = j.at("SyncDeltaStatus").get_ref<const std::string &>();
  p.SyncDeltaStatus = v1.at(0);
  auto &v2 = j.at("SyncDescription").get_ref<const std::string &>();
  std::strncpy(p.SyncDescription, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.SyncDescription));
  j.at("IsOnlyTrdDelta").get_to(p.IsOnlyTrdDelta);

}



void to_json(json& j, const CThostFtdcSyncDeltaProductStatusField& p) {
  j = json{
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductID)},
           {"ProductStatus", std::string(1, p.ProductStatus)},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaProductStatusField& p) {
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v2 = j.at("ProductID").get_ref<const std::string &>();
  std::strncpy(p.ProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ProductID));
  auto &v3 = j.at("ProductStatus").get_ref<const std::string &>();
  p.ProductStatus = v3.at(0);

}



void to_json(json& j, const CThostFtdcSyncDeltaInvstPosDtlField& p) {
  j = json{
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"Direction", std::string(1, p.Direction)},
           {"OpenDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.OpenDate)},
           {"TradeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeID)},
           {"Volume", p.Volume},
           {"OpenPrice", p.OpenPrice},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"SettlementID", p.SettlementID},
           {"TradeType", std::string(1, p.TradeType)},
           {"CombInstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombInstrumentID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"CloseProfitByDate", p.CloseProfitByDate},
           {"CloseProfitByTrade", p.CloseProfitByTrade},
           {"PositionProfitByDate", p.PositionProfitByDate},
           {"PositionProfitByTrade", p.PositionProfitByTrade},
           {"Margin", p.Margin},
           {"ExchMargin", p.ExchMargin},
           {"MarginRateByMoney", p.MarginRateByMoney},
           {"MarginRateByVolume", p.MarginRateByVolume},
           {"LastSettlementPrice", p.LastSettlementPrice},
           {"SettlementPrice", p.SettlementPrice},
           {"CloseVolume", p.CloseVolume},
           {"CloseAmount", p.CloseAmount},
           {"TimeFirstVolume", p.TimeFirstVolume},
           {"SpecPosiType", std::string(1, p.SpecPosiType)},
           {"ActionDirection", std::string(1, p.ActionDirection)},
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaInvstPosDtlField& p) {
  auto &v0 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v3 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v3.at(0);
  auto &v4 = j.at("Direction").get_ref<const std::string &>();
  p.Direction = v4.at(0);
  auto &v5 = j.at("OpenDate").get_ref<const std::string &>();
  std::strncpy(p.OpenDate, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.OpenDate));
  auto &v6 = j.at("TradeID").get_ref<const std::string &>();
  std::strncpy(p.TradeID, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.TradeID));
  j.at("Volume").get_to(p.Volume);
  j.at("OpenPrice").get_to(p.OpenPrice);
  auto &v9 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("SettlementID").get_to(p.SettlementID);
  auto &v11 = j.at("TradeType").get_ref<const std::string &>();
  p.TradeType = v11.at(0);
  auto &v12 = j.at("CombInstrumentID").get_ref<const std::string &>();
  std::strncpy(p.CombInstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.CombInstrumentID));
  auto &v13 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.ExchangeID));
  j.at("CloseProfitByDate").get_to(p.CloseProfitByDate);
  j.at("CloseProfitByTrade").get_to(p.CloseProfitByTrade);
  j.at("PositionProfitByDate").get_to(p.PositionProfitByDate);
  j.at("PositionProfitByTrade").get_to(p.PositionProfitByTrade);
  j.at("Margin").get_to(p.Margin);
  j.at("ExchMargin").get_to(p.ExchMargin);
  j.at("MarginRateByMoney").get_to(p.MarginRateByMoney);
  j.at("MarginRateByVolume").get_to(p.MarginRateByVolume);
  j.at("LastSettlementPrice").get_to(p.LastSettlementPrice);
  j.at("SettlementPrice").get_to(p.SettlementPrice);
  j.at("CloseVolume").get_to(p.CloseVolume);
  j.at("CloseAmount").get_to(p.CloseAmount);
  j.at("TimeFirstVolume").get_to(p.TimeFirstVolume);
  auto &v27 = j.at("SpecPosiType").get_ref<const std::string &>();
  p.SpecPosiType = v27.at(0);
  auto &v28 = j.at("ActionDirection").get_ref<const std::string &>();
  p.ActionDirection = v28.at(0);
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);

}



void to_json(json& j, const CThostFtdcSyncDeltaInvstPosCombDtlField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"OpenDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.OpenDate)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"SettlementID", p.SettlementID},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"ComTradeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ComTradeID)},
           {"TradeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"Direction", std::string(1, p.Direction)},
           {"TotalAmt", p.TotalAmt},
           {"Margin", p.Margin},
           {"ExchMargin", p.ExchMargin},
           {"MarginRateByMoney", p.MarginRateByMoney},
           {"MarginRateByVolume", p.MarginRateByVolume},
           {"LegID", p.LegID},
           {"LegMultiple", p.LegMultiple},
           {"TradeGroupID", p.TradeGroupID},
           {"ActionDirection", std::string(1, p.ActionDirection)},
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaInvstPosCombDtlField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("OpenDate").get_ref<const std::string &>();
  std::strncpy(p.OpenDate, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.OpenDate));
  auto &v2 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ExchangeID));
  j.at("SettlementID").get_to(p.SettlementID);
  auto &v4 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v5 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v6 = j.at("ComTradeID").get_ref<const std::string &>();
  std::strncpy(p.ComTradeID, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.ComTradeID));
  auto &v7 = j.at("TradeID").get_ref<const std::string &>();
  std::strncpy(p.TradeID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.TradeID));
  auto &v8 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v9 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v9.at(0);
  auto &v10 = j.at("Direction").get_ref<const std::string &>();
  p.Direction = v10.at(0);
  j.at("TotalAmt").get_to(p.TotalAmt);
  j.at("Margin").get_to(p.Margin);
  j.at("ExchMargin").get_to(p.ExchMargin);
  j.at("MarginRateByMoney").get_to(p.MarginRateByMoney);
  j.at("MarginRateByVolume").get_to(p.MarginRateByVolume);
  j.at("LegID").get_to(p.LegID);
  j.at("LegMultiple").get_to(p.LegMultiple);
  j.at("TradeGroupID").get_to(p.TradeGroupID);
  auto &v19 = j.at("ActionDirection").get_ref<const std::string &>();
  p.ActionDirection = v19.at(0);
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);

}



void to_json(json& j, const CThostFtdcSyncDeltaTradingAccountField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"PreMortgage", p.PreMortgage},
           {"PreCredit", p.PreCredit},
           {"PreDeposit", p.PreDeposit},
           {"PreBalance", p.PreBalance},
           {"PreMargin", p.PreMargin},
           {"InterestBase", p.InterestBase},
           {"Interest", p.Interest},
           {"Deposit", p.Deposit},
           {"Withdraw", p.Withdraw},
           {"FrozenMargin", p.FrozenMargin},
           {"FrozenCash", p.FrozenCash},
           {"FrozenCommission", p.FrozenCommission},
           {"CurrMargin", p.CurrMargin},
           {"CashIn", p.CashIn},
           {"Commission", p.Commission},
           {"CloseProfit", p.CloseProfit},
           {"PositionProfit", p.PositionProfit},
           {"Balance", p.Balance},
           {"Available", p.Available},
           {"WithdrawQuota", p.WithdrawQuota},
           {"Reserve", p.Reserve},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"SettlementID", p.SettlementID},
           {"Credit", p.Credit},
           {"Mortgage", p.Mortgage},
           {"ExchangeMargin", p.ExchangeMargin},
           {"DeliveryMargin", p.DeliveryMargin},
           {"ExchangeDeliveryMargin", p.ExchangeDeliveryMargin},
           {"ReserveBalance", p.ReserveBalance},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"PreFundMortgageIn", p.PreFundMortgageIn},
           {"PreFundMortgageOut", p.PreFundMortgageOut},
           {"FundMortgageIn", p.FundMortgageIn},
           {"FundMortgageOut", p.FundMortgageOut},
           {"FundMortgageAvailable", p.FundMortgageAvailable},
           {"MortgageableFund", p.MortgageableFund},
           {"SpecProductMargin", p.SpecProductMargin},
           {"SpecProductFrozenMargin", p.SpecProductFrozenMargin},
           {"SpecProductCommission", p.SpecProductCommission},
           {"SpecProductFrozenCommission", p.SpecProductFrozenCommission},
           {"SpecProductPositionProfit", p.SpecProductPositionProfit},
           {"SpecProductCloseProfit", p.SpecProductCloseProfit},
           {"SpecProductPositionProfitByAlg", p.SpecProductPositionProfitByAlg},
           {"SpecProductExchangeMargin", p.SpecProductExchangeMargin},
           {"FrozenSwap", p.FrozenSwap},
           {"RemainSwap", p.RemainSwap},
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaTradingAccountField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.AccountID));
  j.at("PreMortgage").get_to(p.PreMortgage);
  j.at("PreCredit").get_to(p.PreCredit);
  j.at("PreDeposit").get_to(p.PreDeposit);
  j.at("PreBalance").get_to(p.PreBalance);
  j.at("PreMargin").get_to(p.PreMargin);
  j.at("InterestBase").get_to(p.InterestBase);
  j.at("Interest").get_to(p.Interest);
  j.at("Deposit").get_to(p.Deposit);
  j.at("Withdraw").get_to(p.Withdraw);
  j.at("FrozenMargin").get_to(p.FrozenMargin);
  j.at("FrozenCash").get_to(p.FrozenCash);
  j.at("FrozenCommission").get_to(p.FrozenCommission);
  j.at("CurrMargin").get_to(p.CurrMargin);
  j.at("CashIn").get_to(p.CashIn);
  j.at("Commission").get_to(p.Commission);
  j.at("CloseProfit").get_to(p.CloseProfit);
  j.at("PositionProfit").get_to(p.PositionProfit);
  j.at("Balance").get_to(p.Balance);
  j.at("Available").get_to(p.Available);
  j.at("WithdrawQuota").get_to(p.WithdrawQuota);
  j.at("Reserve").get_to(p.Reserve);
  auto &v23 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("SettlementID").get_to(p.SettlementID);
  j.at("Credit").get_to(p.Credit);
  j.at("Mortgage").get_to(p.Mortgage);
  j.at("ExchangeMargin").get_to(p.ExchangeMargin);
  j.at("DeliveryMargin").get_to(p.DeliveryMargin);
  j.at("ExchangeDeliveryMargin").get_to(p.ExchangeDeliveryMargin);
  j.at("ReserveBalance").get_to(p.ReserveBalance);
  auto &v31 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v31.c_str()).c_str(), sizeof(p.CurrencyID));
  j.at("PreFundMortgageIn").get_to(p.PreFundMortgageIn);
  j.at("PreFundMortgageOut").get_to(p.PreFundMortgageOut);
  j.at("FundMortgageIn").get_to(p.FundMortgageIn);
  j.at("FundMortgageOut").get_to(p.FundMortgageOut);
  j.at("FundMortgageAvailable").get_to(p.FundMortgageAvailable);
  j.at("MortgageableFund").get_to(p.MortgageableFund);
  j.at("SpecProductMargin").get_to(p.SpecProductMargin);
  j.at("SpecProductFrozenMargin").get_to(p.SpecProductFrozenMargin);
  j.at("SpecProductCommission").get_to(p.SpecProductCommission);
  j.at("SpecProductFrozenCommission").get_to(p.SpecProductFrozenCommission);
  j.at("SpecProductPositionProfit").get_to(p.SpecProductPositionProfit);
  j.at("SpecProductCloseProfit").get_to(p.SpecProductCloseProfit);
  j.at("SpecProductPositionProfitByAlg").get_to(p.SpecProductPositionProfitByAlg);
  j.at("SpecProductExchangeMargin").get_to(p.SpecProductExchangeMargin);
  j.at("FrozenSwap").get_to(p.FrozenSwap);
  j.at("RemainSwap").get_to(p.RemainSwap);
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);

}



void to_json(json& j, const CThostFtdcSyncDeltaInitInvstMarginField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"LastRiskTotalInvstMargin", p.LastRiskTotalInvstMargin},
           {"LastRiskTotalExchMargin", p.LastRiskTotalExchMargin},
           {"ThisSyncInvstMargin", p.ThisSyncInvstMargin},
           {"ThisSyncExchMargin", p.ThisSyncExchMargin},
           {"RemainRiskInvstMargin", p.RemainRiskInvstMargin},
           {"RemainRiskExchMargin", p.RemainRiskExchMargin},
           {"LastRiskSpecTotalInvstMargin", p.LastRiskSpecTotalInvstMargin},
           {"LastRiskSpecTotalExchMargin", p.LastRiskSpecTotalExchMargin},
           {"ThisSyncSpecInvstMargin", p.ThisSyncSpecInvstMargin},
           {"ThisSyncSpecExchMargin", p.ThisSyncSpecExchMargin},
           {"RemainRiskSpecInvstMargin", p.RemainRiskSpecInvstMargin},
           {"RemainRiskSpecExchMargin", p.RemainRiskSpecExchMargin},
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaInitInvstMarginField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  j.at("LastRiskTotalInvstMargin").get_to(p.LastRiskTotalInvstMargin);
  j.at("LastRiskTotalExchMargin").get_to(p.LastRiskTotalExchMargin);
  j.at("ThisSyncInvstMargin").get_to(p.ThisSyncInvstMargin);
  j.at("ThisSyncExchMargin").get_to(p.ThisSyncExchMargin);
  j.at("RemainRiskInvstMargin").get_to(p.RemainRiskInvstMargin);
  j.at("RemainRiskExchMargin").get_to(p.RemainRiskExchMargin);
  j.at("LastRiskSpecTotalInvstMargin").get_to(p.LastRiskSpecTotalInvstMargin);
  j.at("LastRiskSpecTotalExchMargin").get_to(p.LastRiskSpecTotalExchMargin);
  j.at("ThisSyncSpecInvstMargin").get_to(p.ThisSyncSpecInvstMargin);
  j.at("ThisSyncSpecExchMargin").get_to(p.ThisSyncSpecExchMargin);
  j.at("RemainRiskSpecInvstMargin").get_to(p.RemainRiskSpecInvstMargin);
  j.at("RemainRiskSpecExchMargin").get_to(p.RemainRiskSpecExchMargin);
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);

}



void to_json(json& j, const CThostFtdcSyncDeltaDceCombInstrumentField& p) {
  j = json{
           {"CombInstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombInstrumentID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ExchangeInstID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeInstID)},
           {"TradeGroupID", p.TradeGroupID},
           {"CombHedgeFlag", std::string(1, p.CombHedgeFlag)},
           {"CombinationType", std::string(1, p.CombinationType)},
           {"Direction", std::string(1, p.Direction)},
           {"ProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductID)},
           {"Xparameter", p.Xparameter},
           {"ActionDirection", std::string(1, p.ActionDirection)},
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaDceCombInstrumentField& p) {
  auto &v0 = j.at("CombInstrumentID").get_ref<const std::string &>();
  std::strncpy(p.CombInstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.CombInstrumentID));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v2 = j.at("ExchangeInstID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeInstID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ExchangeInstID));
  j.at("TradeGroupID").get_to(p.TradeGroupID);
  auto &v4 = j.at("CombHedgeFlag").get_ref<const std::string &>();
  p.CombHedgeFlag = v4.at(0);
  auto &v5 = j.at("CombinationType").get_ref<const std::string &>();
  p.CombinationType = v5.at(0);
  auto &v6 = j.at("Direction").get_ref<const std::string &>();
  p.Direction = v6.at(0);
  auto &v7 = j.at("ProductID").get_ref<const std::string &>();
  std::strncpy(p.ProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.ProductID));
  j.at("Xparameter").get_to(p.Xparameter);
  auto &v9 = j.at("ActionDirection").get_ref<const std::string &>();
  p.ActionDirection = v9.at(0);
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);

}



void to_json(json& j, const CThostFtdcSyncDeltaInvstMarginRateField& p) {
  j = json{
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"InvestorRange", std::string(1, p.InvestorRange)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"LongMarginRatioByMoney", p.LongMarginRatioByMoney},
           {"LongMarginRatioByVolume", p.LongMarginRatioByVolume},
           {"ShortMarginRatioByMoney", p.ShortMarginRatioByMoney},
           {"ShortMarginRatioByVolume", p.ShortMarginRatioByVolume},
           {"IsRelative", p.IsRelative},
           {"ActionDirection", std::string(1, p.ActionDirection)},
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaInvstMarginRateField& p) {
  auto &v0 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v1 = j.at("InvestorRange").get_ref<const std::string &>();
  p.InvestorRange = v1.at(0);
  auto &v2 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v3 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v4 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v4.at(0);
  j.at("LongMarginRatioByMoney").get_to(p.LongMarginRatioByMoney);
  j.at("LongMarginRatioByVolume").get_to(p.LongMarginRatioByVolume);
  j.at("ShortMarginRatioByMoney").get_to(p.ShortMarginRatioByMoney);
  j.at("ShortMarginRatioByVolume").get_to(p.ShortMarginRatioByVolume);
  j.at("IsRelative").get_to(p.IsRelative);
  auto &v10 = j.at("ActionDirection").get_ref<const std::string &>();
  p.ActionDirection = v10.at(0);
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);

}



void to_json(json& j, const CThostFtdcSyncDeltaExchMarginRateField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"LongMarginRatioByMoney", p.LongMarginRatioByMoney},
           {"LongMarginRatioByVolume", p.LongMarginRatioByVolume},
           {"ShortMarginRatioByMoney", p.ShortMarginRatioByMoney},
           {"ShortMarginRatioByVolume", p.ShortMarginRatioByVolume},
           {"ActionDirection", std::string(1, p.ActionDirection)},
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaExchMarginRateField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v2 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v2.at(0);
  j.at("LongMarginRatioByMoney").get_to(p.LongMarginRatioByMoney);
  j.at("LongMarginRatioByVolume").get_to(p.LongMarginRatioByVolume);
  j.at("ShortMarginRatioByMoney").get_to(p.ShortMarginRatioByMoney);
  j.at("ShortMarginRatioByVolume").get_to(p.ShortMarginRatioByVolume);
  auto &v7 = j.at("ActionDirection").get_ref<const std::string &>();
  p.ActionDirection = v7.at(0);
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);

}



void to_json(json& j, const CThostFtdcSyncDeltaOptExchMarginField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"SShortMarginRatioByMoney", p.SShortMarginRatioByMoney},
           {"SShortMarginRatioByVolume", p.SShortMarginRatioByVolume},
           {"HShortMarginRatioByMoney", p.HShortMarginRatioByMoney},
           {"HShortMarginRatioByVolume", p.HShortMarginRatioByVolume},
           {"AShortMarginRatioByMoney", p.AShortMarginRatioByMoney},
           {"AShortMarginRatioByVolume", p.AShortMarginRatioByVolume},
           {"MShortMarginRatioByMoney", p.MShortMarginRatioByMoney},
           {"MShortMarginRatioByVolume", p.MShortMarginRatioByVolume},
           {"ActionDirection", std::string(1, p.ActionDirection)},
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaOptExchMarginField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InstrumentID));
  j.at("SShortMarginRatioByMoney").get_to(p.SShortMarginRatioByMoney);
  j.at("SShortMarginRatioByVolume").get_to(p.SShortMarginRatioByVolume);
  j.at("HShortMarginRatioByMoney").get_to(p.HShortMarginRatioByMoney);
  j.at("HShortMarginRatioByVolume").get_to(p.HShortMarginRatioByVolume);
  j.at("AShortMarginRatioByMoney").get_to(p.AShortMarginRatioByMoney);
  j.at("AShortMarginRatioByVolume").get_to(p.AShortMarginRatioByVolume);
  j.at("MShortMarginRatioByMoney").get_to(p.MShortMarginRatioByMoney);
  j.at("MShortMarginRatioByVolume").get_to(p.MShortMarginRatioByVolume);
  auto &v10 = j.at("ActionDirection").get_ref<const std::string &>();
  p.ActionDirection = v10.at(0);
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);

}



void to_json(json& j, const CThostFtdcSyncDeltaOptInvstMarginField& p) {
  j = json{
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"InvestorRange", std::string(1, p.InvestorRange)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"SShortMarginRatioByMoney", p.SShortMarginRatioByMoney},
           {"SShortMarginRatioByVolume", p.SShortMarginRatioByVolume},
           {"HShortMarginRatioByMoney", p.HShortMarginRatioByMoney},
           {"HShortMarginRatioByVolume", p.HShortMarginRatioByVolume},
           {"AShortMarginRatioByMoney", p.AShortMarginRatioByMoney},
           {"AShortMarginRatioByVolume", p.AShortMarginRatioByVolume},
           {"IsRelative", p.IsRelative},
           {"MShortMarginRatioByMoney", p.MShortMarginRatioByMoney},
           {"MShortMarginRatioByVolume", p.MShortMarginRatioByVolume},
           {"ActionDirection", std::string(1, p.ActionDirection)},
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaOptInvstMarginField& p) {
  auto &v0 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v1 = j.at("InvestorRange").get_ref<const std::string &>();
  p.InvestorRange = v1.at(0);
  auto &v2 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v3 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InvestorID));
  j.at("SShortMarginRatioByMoney").get_to(p.SShortMarginRatioByMoney);
  j.at("SShortMarginRatioByVolume").get_to(p.SShortMarginRatioByVolume);
  j.at("HShortMarginRatioByMoney").get_to(p.HShortMarginRatioByMoney);
  j.at("HShortMarginRatioByVolume").get_to(p.HShortMarginRatioByVolume);
  j.at("AShortMarginRatioByMoney").get_to(p.AShortMarginRatioByMoney);
  j.at("AShortMarginRatioByVolume").get_to(p.AShortMarginRatioByVolume);
  j.at("IsRelative").get_to(p.IsRelative);
  j.at("MShortMarginRatioByMoney").get_to(p.MShortMarginRatioByMoney);
  j.at("MShortMarginRatioByVolume").get_to(p.MShortMarginRatioByVolume);
  auto &v13 = j.at("ActionDirection").get_ref<const std::string &>();
  p.ActionDirection = v13.at(0);
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);

}



void to_json(json& j, const CThostFtdcSyncDeltaInvstMarginRateULField& p) {
  j = json{
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"InvestorRange", std::string(1, p.InvestorRange)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"LongMarginRatioByMoney", p.LongMarginRatioByMoney},
           {"LongMarginRatioByVolume", p.LongMarginRatioByVolume},
           {"ShortMarginRatioByMoney", p.ShortMarginRatioByMoney},
           {"ShortMarginRatioByVolume", p.ShortMarginRatioByVolume},
           {"ActionDirection", std::string(1, p.ActionDirection)},
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaInvstMarginRateULField& p) {
  auto &v0 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v1 = j.at("InvestorRange").get_ref<const std::string &>();
  p.InvestorRange = v1.at(0);
  auto &v2 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v3 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v4 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v4.at(0);
  j.at("LongMarginRatioByMoney").get_to(p.LongMarginRatioByMoney);
  j.at("LongMarginRatioByVolume").get_to(p.LongMarginRatioByVolume);
  j.at("ShortMarginRatioByMoney").get_to(p.ShortMarginRatioByMoney);
  j.at("ShortMarginRatioByVolume").get_to(p.ShortMarginRatioByVolume);
  auto &v9 = j.at("ActionDirection").get_ref<const std::string &>();
  p.ActionDirection = v9.at(0);
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);

}



void to_json(json& j, const CThostFtdcSyncDeltaOptInvstCommRateField& p) {
  j = json{
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"InvestorRange", std::string(1, p.InvestorRange)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"OpenRatioByMoney", p.OpenRatioByMoney},
           {"OpenRatioByVolume", p.OpenRatioByVolume},
           {"CloseRatioByMoney", p.CloseRatioByMoney},
           {"CloseRatioByVolume", p.CloseRatioByVolume},
           {"CloseTodayRatioByMoney", p.CloseTodayRatioByMoney},
           {"CloseTodayRatioByVolume", p.CloseTodayRatioByVolume},
           {"StrikeRatioByMoney", p.StrikeRatioByMoney},
           {"StrikeRatioByVolume", p.StrikeRatioByVolume},
           {"ActionDirection", std::string(1, p.ActionDirection)},
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaOptInvstCommRateField& p) {
  auto &v0 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v1 = j.at("InvestorRange").get_ref<const std::string &>();
  p.InvestorRange = v1.at(0);
  auto &v2 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v3 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InvestorID));
  j.at("OpenRatioByMoney").get_to(p.OpenRatioByMoney);
  j.at("OpenRatioByVolume").get_to(p.OpenRatioByVolume);
  j.at("CloseRatioByMoney").get_to(p.CloseRatioByMoney);
  j.at("CloseRatioByVolume").get_to(p.CloseRatioByVolume);
  j.at("CloseTodayRatioByMoney").get_to(p.CloseTodayRatioByMoney);
  j.at("CloseTodayRatioByVolume").get_to(p.CloseTodayRatioByVolume);
  j.at("StrikeRatioByMoney").get_to(p.StrikeRatioByMoney);
  j.at("StrikeRatioByVolume").get_to(p.StrikeRatioByVolume);
  auto &v12 = j.at("ActionDirection").get_ref<const std::string &>();
  p.ActionDirection = v12.at(0);
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);

}



void to_json(json& j, const CThostFtdcSyncDeltaInvstCommRateField& p) {
  j = json{
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"InvestorRange", std::string(1, p.InvestorRange)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"OpenRatioByMoney", p.OpenRatioByMoney},
           {"OpenRatioByVolume", p.OpenRatioByVolume},
           {"CloseRatioByMoney", p.CloseRatioByMoney},
           {"CloseRatioByVolume", p.CloseRatioByVolume},
           {"CloseTodayRatioByMoney", p.CloseTodayRatioByMoney},
           {"CloseTodayRatioByVolume", p.CloseTodayRatioByVolume},
           {"ActionDirection", std::string(1, p.ActionDirection)},
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaInvstCommRateField& p) {
  auto &v0 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v1 = j.at("InvestorRange").get_ref<const std::string &>();
  p.InvestorRange = v1.at(0);
  auto &v2 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v3 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InvestorID));
  j.at("OpenRatioByMoney").get_to(p.OpenRatioByMoney);
  j.at("OpenRatioByVolume").get_to(p.OpenRatioByVolume);
  j.at("CloseRatioByMoney").get_to(p.CloseRatioByMoney);
  j.at("CloseRatioByVolume").get_to(p.CloseRatioByVolume);
  j.at("CloseTodayRatioByMoney").get_to(p.CloseTodayRatioByMoney);
  j.at("CloseTodayRatioByVolume").get_to(p.CloseTodayRatioByVolume);
  auto &v10 = j.at("ActionDirection").get_ref<const std::string &>();
  p.ActionDirection = v10.at(0);
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);

}



void to_json(json& j, const CThostFtdcSyncDeltaProductExchRateField& p) {
  j = json{
           {"ProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductID)},
           {"QuoteCurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.QuoteCurrencyID)},
           {"ExchangeRate", p.ExchangeRate},
           {"ActionDirection", std::string(1, p.ActionDirection)},
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaProductExchRateField& p) {
  auto &v0 = j.at("ProductID").get_ref<const std::string &>();
  std::strncpy(p.ProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ProductID));
  auto &v1 = j.at("QuoteCurrencyID").get_ref<const std::string &>();
  std::strncpy(p.QuoteCurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.QuoteCurrencyID));
  j.at("ExchangeRate").get_to(p.ExchangeRate);
  auto &v3 = j.at("ActionDirection").get_ref<const std::string &>();
  p.ActionDirection = v3.at(0);
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);

}



void to_json(json& j, const CThostFtdcSyncDeltaDepthMarketDataField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ExchangeInstID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeInstID)},
           {"LastPrice", p.LastPrice},
           {"PreSettlementPrice", p.PreSettlementPrice},
           {"PreClosePrice", p.PreClosePrice},
           {"PreOpenInterest", p.PreOpenInterest},
           {"OpenPrice", p.OpenPrice},
           {"HighestPrice", p.HighestPrice},
           {"LowestPrice", p.LowestPrice},
           {"Volume", p.Volume},
           {"Turnover", p.Turnover},
           {"OpenInterest", p.OpenInterest},
           {"ClosePrice", p.ClosePrice},
           {"SettlementPrice", p.SettlementPrice},
           {"UpperLimitPrice", p.UpperLimitPrice},
           {"LowerLimitPrice", p.LowerLimitPrice},
           {"PreDelta", p.PreDelta},
           {"CurrDelta", p.CurrDelta},
           {"UpdateTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.UpdateTime)},
           {"UpdateMillisec", p.UpdateMillisec},
           {"BidPrice1", p.BidPrice1},
           {"BidVolume1", p.BidVolume1},
           {"AskPrice1", p.AskPrice1},
           {"AskVolume1", p.AskVolume1},
           {"BidPrice2", p.BidPrice2},
           {"BidVolume2", p.BidVolume2},
           {"AskPrice2", p.AskPrice2},
           {"AskVolume2", p.AskVolume2},
           {"BidPrice3", p.BidPrice3},
           {"BidVolume3", p.BidVolume3},
           {"AskPrice3", p.AskPrice3},
           {"AskVolume3", p.AskVolume3},
           {"BidPrice4", p.BidPrice4},
           {"BidVolume4", p.BidVolume4},
           {"AskPrice4", p.AskPrice4},
           {"AskVolume4", p.AskVolume4},
           {"BidPrice5", p.BidPrice5},
           {"BidVolume5", p.BidVolume5},
           {"AskPrice5", p.AskPrice5},
           {"AskVolume5", p.AskVolume5},
           {"AveragePrice", p.AveragePrice},
           {"ActionDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionDay)},
           {"BandingUpperPrice", p.BandingUpperPrice},
           {"BandingLowerPrice", p.BandingLowerPrice},
           {"ActionDirection", std::string(1, p.ActionDirection)},
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaDepthMarketDataField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v2 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v3 = j.at("ExchangeInstID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeInstID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ExchangeInstID));
  j.at("LastPrice").get_to(p.LastPrice);
  j.at("PreSettlementPrice").get_to(p.PreSettlementPrice);
  j.at("PreClosePrice").get_to(p.PreClosePrice);
  j.at("PreOpenInterest").get_to(p.PreOpenInterest);
  j.at("OpenPrice").get_to(p.OpenPrice);
  j.at("HighestPrice").get_to(p.HighestPrice);
  j.at("LowestPrice").get_to(p.LowestPrice);
  j.at("Volume").get_to(p.Volume);
  j.at("Turnover").get_to(p.Turnover);
  j.at("OpenInterest").get_to(p.OpenInterest);
  j.at("ClosePrice").get_to(p.ClosePrice);
  j.at("SettlementPrice").get_to(p.SettlementPrice);
  j.at("UpperLimitPrice").get_to(p.UpperLimitPrice);
  j.at("LowerLimitPrice").get_to(p.LowerLimitPrice);
  j.at("PreDelta").get_to(p.PreDelta);
  j.at("CurrDelta").get_to(p.CurrDelta);
  auto &v20 = j.at("UpdateTime").get_ref<const std::string &>();
  std::strncpy(p.UpdateTime, codec_convert("GBK//TRANSLIT", "UTF-8", v20.c_str()).c_str(), sizeof(p.UpdateTime));
  j.at("UpdateMillisec").get_to(p.UpdateMillisec);
  j.at("BidPrice1").get_to(p.BidPrice1);
  j.at("BidVolume1").get_to(p.BidVolume1);
  j.at("AskPrice1").get_to(p.AskPrice1);
  j.at("AskVolume1").get_to(p.AskVolume1);
  j.at("BidPrice2").get_to(p.BidPrice2);
  j.at("BidVolume2").get_to(p.BidVolume2);
  j.at("AskPrice2").get_to(p.AskPrice2);
  j.at("AskVolume2").get_to(p.AskVolume2);
  j.at("BidPrice3").get_to(p.BidPrice3);
  j.at("BidVolume3").get_to(p.BidVolume3);
  j.at("AskPrice3").get_to(p.AskPrice3);
  j.at("AskVolume3").get_to(p.AskVolume3);
  j.at("BidPrice4").get_to(p.BidPrice4);
  j.at("BidVolume4").get_to(p.BidVolume4);
  j.at("AskPrice4").get_to(p.AskPrice4);
  j.at("AskVolume4").get_to(p.AskVolume4);
  j.at("BidPrice5").get_to(p.BidPrice5);
  j.at("BidVolume5").get_to(p.BidVolume5);
  j.at("AskPrice5").get_to(p.AskPrice5);
  j.at("AskVolume5").get_to(p.AskVolume5);
  j.at("AveragePrice").get_to(p.AveragePrice);
  auto &v43 = j.at("ActionDay").get_ref<const std::string &>();
  std::strncpy(p.ActionDay, codec_convert("GBK//TRANSLIT", "UTF-8", v43.c_str()).c_str(), sizeof(p.ActionDay));
  j.at("BandingUpperPrice").get_to(p.BandingUpperPrice);
  j.at("BandingLowerPrice").get_to(p.BandingLowerPrice);
  auto &v46 = j.at("ActionDirection").get_ref<const std::string &>();
  p.ActionDirection = v46.at(0);
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);

}



void to_json(json& j, const CThostFtdcSyncDeltaIndexPriceField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"ClosePrice", p.ClosePrice},
           {"ActionDirection", std::string(1, p.ActionDirection)},
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaIndexPriceField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InstrumentID));
  j.at("ClosePrice").get_to(p.ClosePrice);
  auto &v3 = j.at("ActionDirection").get_ref<const std::string &>();
  p.ActionDirection = v3.at(0);
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);

}



void to_json(json& j, const CThostFtdcSyncDeltaEWarrantOffsetField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"Direction", std::string(1, p.Direction)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"Volume", p.Volume},
           {"ActionDirection", std::string(1, p.ActionDirection)},
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaEWarrantOffsetField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v3 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v4 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v5 = j.at("Direction").get_ref<const std::string &>();
  p.Direction = v5.at(0);
  auto &v6 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v6.at(0);
  j.at("Volume").get_to(p.Volume);
  auto &v8 = j.at("ActionDirection").get_ref<const std::string &>();
  p.ActionDirection = v8.at(0);
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);

}



void to_json(json& j, const CThostFtdcSPBMFutureParameterField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"ProdFamilyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProdFamilyCode)},
           {"Cvf", p.Cvf},
           {"TimeRange", std::string(1, p.TimeRange)},
           {"MarginRate", p.MarginRate},
           {"LockRateX", p.LockRateX},
           {"AddOnRate", p.AddOnRate},
           {"PreSettlementPrice", p.PreSettlementPrice},
           {"AddOnLockRateX2", p.AddOnLockRateX2},
  };
}

void from_json(const json& j, CThostFtdcSPBMFutureParameterField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v2 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v3 = j.at("ProdFamilyCode").get_ref<const std::string &>();
  std::strncpy(p.ProdFamilyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ProdFamilyCode));
  j.at("Cvf").get_to(p.Cvf);
  auto &v5 = j.at("TimeRange").get_ref<const std::string &>();
  p.TimeRange = v5.at(0);
  j.at("MarginRate").get_to(p.MarginRate);
  j.at("LockRateX").get_to(p.LockRateX);
  j.at("AddOnRate").get_to(p.AddOnRate);
  j.at("PreSettlementPrice").get_to(p.PreSettlementPrice);
  j.at("AddOnLockRateX2").get_to(p.AddOnLockRateX2);

}



void to_json(json& j, const CThostFtdcSPBMOptionParameterField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"ProdFamilyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProdFamilyCode)},
           {"Cvf", p.Cvf},
           {"DownPrice", p.DownPrice},
           {"Delta", p.Delta},
           {"SlimiDelta", p.SlimiDelta},
           {"PreSettlementPrice", p.PreSettlementPrice},
  };
}

void from_json(const json& j, CThostFtdcSPBMOptionParameterField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v2 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v3 = j.at("ProdFamilyCode").get_ref<const std::string &>();
  std::strncpy(p.ProdFamilyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ProdFamilyCode));
  j.at("Cvf").get_to(p.Cvf);
  j.at("DownPrice").get_to(p.DownPrice);
  j.at("Delta").get_to(p.Delta);
  j.at("SlimiDelta").get_to(p.SlimiDelta);
  j.at("PreSettlementPrice").get_to(p.PreSettlementPrice);

}



void to_json(json& j, const CThostFtdcSPBMIntraParameterField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ProdFamilyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProdFamilyCode)},
           {"IntraRateY", p.IntraRateY},
           {"AddOnIntraRateY2", p.AddOnIntraRateY2},
  };
}

void from_json(const json& j, CThostFtdcSPBMIntraParameterField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v2 = j.at("ProdFamilyCode").get_ref<const std::string &>();
  std::strncpy(p.ProdFamilyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ProdFamilyCode));
  j.at("IntraRateY").get_to(p.IntraRateY);
  j.at("AddOnIntraRateY2").get_to(p.AddOnIntraRateY2);

}



void to_json(json& j, const CThostFtdcSPBMInterParameterField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"SpreadId", p.SpreadId},
           {"InterRateZ", p.InterRateZ},
           {"Leg1ProdFamilyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.Leg1ProdFamilyCode)},
           {"Leg2ProdFamilyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.Leg2ProdFamilyCode)},
  };
}

void from_json(const json& j, CThostFtdcSPBMInterParameterField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  j.at("SpreadId").get_to(p.SpreadId);
  j.at("InterRateZ").get_to(p.InterRateZ);
  auto &v4 = j.at("Leg1ProdFamilyCode").get_ref<const std::string &>();
  std::strncpy(p.Leg1ProdFamilyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.Leg1ProdFamilyCode));
  auto &v5 = j.at("Leg2ProdFamilyCode").get_ref<const std::string &>();
  std::strncpy(p.Leg2ProdFamilyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.Leg2ProdFamilyCode));

}



void to_json(json& j, const CThostFtdcSyncSPBMParameterEndField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
  };
}

void from_json(const json& j, CThostFtdcSyncSPBMParameterEndField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));

}



void to_json(json& j, const CThostFtdcQrySPBMFutureParameterField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"ProdFamilyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProdFamilyCode)},
  };
}

void from_json(const json& j, CThostFtdcQrySPBMFutureParameterField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v2 = j.at("ProdFamilyCode").get_ref<const std::string &>();
  std::strncpy(p.ProdFamilyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ProdFamilyCode));

}



void to_json(json& j, const CThostFtdcQrySPBMOptionParameterField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"ProdFamilyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProdFamilyCode)},
  };
}

void from_json(const json& j, CThostFtdcQrySPBMOptionParameterField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v2 = j.at("ProdFamilyCode").get_ref<const std::string &>();
  std::strncpy(p.ProdFamilyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ProdFamilyCode));

}



void to_json(json& j, const CThostFtdcQrySPBMIntraParameterField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ProdFamilyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProdFamilyCode)},
  };
}

void from_json(const json& j, CThostFtdcQrySPBMIntraParameterField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("ProdFamilyCode").get_ref<const std::string &>();
  std::strncpy(p.ProdFamilyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ProdFamilyCode));

}



void to_json(json& j, const CThostFtdcQrySPBMInterParameterField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"Leg1ProdFamilyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.Leg1ProdFamilyCode)},
           {"Leg2ProdFamilyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.Leg2ProdFamilyCode)},
  };
}

void from_json(const json& j, CThostFtdcQrySPBMInterParameterField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("Leg1ProdFamilyCode").get_ref<const std::string &>();
  std::strncpy(p.Leg1ProdFamilyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.Leg1ProdFamilyCode));
  auto &v2 = j.at("Leg2ProdFamilyCode").get_ref<const std::string &>();
  std::strncpy(p.Leg2ProdFamilyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.Leg2ProdFamilyCode));

}



void to_json(json& j, const CThostFtdcSPBMPortfDefinitionField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"PortfolioDefID", p.PortfolioDefID},
           {"ProdFamilyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProdFamilyCode)},
           {"IsSPBM", p.IsSPBM},
  };
}

void from_json(const json& j, CThostFtdcSPBMPortfDefinitionField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  j.at("PortfolioDefID").get_to(p.PortfolioDefID);
  auto &v2 = j.at("ProdFamilyCode").get_ref<const std::string &>();
  std::strncpy(p.ProdFamilyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ProdFamilyCode));
  j.at("IsSPBM").get_to(p.IsSPBM);

}



void to_json(json& j, const CThostFtdcSPBMInvestorPortfDefField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"PortfolioDefID", p.PortfolioDefID},
  };
}

void from_json(const json& j, CThostFtdcSPBMInvestorPortfDefField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorID));
  j.at("PortfolioDefID").get_to(p.PortfolioDefID);

}



void to_json(json& j, const CThostFtdcInvestorPortfMarginRatioField& p) {
  j = json{
           {"InvestorRange", std::string(1, p.InvestorRange)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"MarginRatio", p.MarginRatio},
           {"ProductGroupID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductGroupID)},
  };
}

void from_json(const json& j, CThostFtdcInvestorPortfMarginRatioField& p) {
  auto &v0 = j.at("InvestorRange").get_ref<const std::string &>();
  p.InvestorRange = v0.at(0);
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v3 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ExchangeID));
  j.at("MarginRatio").get_to(p.MarginRatio);
  auto &v5 = j.at("ProductGroupID").get_ref<const std::string &>();
  std::strncpy(p.ProductGroupID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.ProductGroupID));

}



void to_json(json& j, const CThostFtdcQrySPBMPortfDefinitionField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"PortfolioDefID", p.PortfolioDefID},
           {"ProdFamilyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProdFamilyCode)},
  };
}

void from_json(const json& j, CThostFtdcQrySPBMPortfDefinitionField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  j.at("PortfolioDefID").get_to(p.PortfolioDefID);
  auto &v2 = j.at("ProdFamilyCode").get_ref<const std::string &>();
  std::strncpy(p.ProdFamilyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ProdFamilyCode));

}



void to_json(json& j, const CThostFtdcQrySPBMInvestorPortfDefField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
  };
}

void from_json(const json& j, CThostFtdcQrySPBMInvestorPortfDefField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorID));

}



void to_json(json& j, const CThostFtdcQryInvestorPortfMarginRatioField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ProductGroupID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductGroupID)},
  };
}

void from_json(const json& j, CThostFtdcQryInvestorPortfMarginRatioField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v3 = j.at("ProductGroupID").get_ref<const std::string &>();
  std::strncpy(p.ProductGroupID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ProductGroupID));

}



void to_json(json& j, const CThostFtdcInvestorProdSPBMDetailField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"ProdFamilyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProdFamilyCode)},
           {"IntraInstrMargin", p.IntraInstrMargin},
           {"BCollectingMargin", p.BCollectingMargin},
           {"SCollectingMargin", p.SCollectingMargin},
           {"IntraProdMargin", p.IntraProdMargin},
           {"NetMargin", p.NetMargin},
           {"InterProdMargin", p.InterProdMargin},
           {"SingleMargin", p.SingleMargin},
           {"AddOnMargin", p.AddOnMargin},
           {"DeliveryMargin", p.DeliveryMargin},
           {"CallOptionMinRisk", p.CallOptionMinRisk},
           {"PutOptionMinRisk", p.PutOptionMinRisk},
           {"OptionMinRisk", p.OptionMinRisk},
           {"OptionValueOffset", p.OptionValueOffset},
           {"OptionRoyalty", p.OptionRoyalty},
           {"RealOptionValueOffset", p.RealOptionValueOffset},
           {"Margin", p.Margin},
           {"ExchMargin", p.ExchMargin},
  };
}

void from_json(const json& j, CThostFtdcInvestorProdSPBMDetailField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v3 = j.at("ProdFamilyCode").get_ref<const std::string &>();
  std::strncpy(p.ProdFamilyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ProdFamilyCode));
  j.at("IntraInstrMargin").get_to(p.IntraInstrMargin);
  j.at("BCollectingMargin").get_to(p.BCollectingMargin);
  j.at("SCollectingMargin").get_to(p.SCollectingMargin);
  j.at("IntraProdMargin").get_to(p.IntraProdMargin);
  j.at("NetMargin").get_to(p.NetMargin);
  j.at("InterProdMargin").get_to(p.InterProdMargin);
  j.at("SingleMargin").get_to(p.SingleMargin);
  j.at("AddOnMargin").get_to(p.AddOnMargin);
  j.at("DeliveryMargin").get_to(p.DeliveryMargin);
  j.at("CallOptionMinRisk").get_to(p.CallOptionMinRisk);
  j.at("PutOptionMinRisk").get_to(p.PutOptionMinRisk);
  j.at("OptionMinRisk").get_to(p.OptionMinRisk);
  j.at("OptionValueOffset").get_to(p.OptionValueOffset);
  j.at("OptionRoyalty").get_to(p.OptionRoyalty);
  j.at("RealOptionValueOffset").get_to(p.RealOptionValueOffset);
  j.at("Margin").get_to(p.Margin);
  j.at("ExchMargin").get_to(p.ExchMargin);

}



void to_json(json& j, const CThostFtdcQryInvestorProdSPBMDetailField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"ProdFamilyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProdFamilyCode)},
  };
}

void from_json(const json& j, CThostFtdcQryInvestorProdSPBMDetailField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v3 = j.at("ProdFamilyCode").get_ref<const std::string &>();
  std::strncpy(p.ProdFamilyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ProdFamilyCode));

}



void to_json(json& j, const CThostFtdcPortfTradeParamSettingField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"Portfolio", std::string(1, p.Portfolio)},
           {"IsActionVerify", p.IsActionVerify},
           {"IsCloseVerify", p.IsCloseVerify},
  };
}

void from_json(const json& j, CThostFtdcPortfTradeParamSettingField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v3 = j.at("Portfolio").get_ref<const std::string &>();
  p.Portfolio = v3.at(0);
  j.at("IsActionVerify").get_to(p.IsActionVerify);
  j.at("IsCloseVerify").get_to(p.IsCloseVerify);

}



void to_json(json& j, const CThostFtdcInvestorTradingRightField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"InvstTradingRight", std::string(1, p.InvstTradingRight)},
  };
}

void from_json(const json& j, CThostFtdcInvestorTradingRightField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("InvstTradingRight").get_ref<const std::string &>();
  p.InvstTradingRight = v2.at(0);

}



void to_json(json& j, const CThostFtdcMortgageParamField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"MortgageBalance", p.MortgageBalance},
           {"CheckMortgageRatio", p.CheckMortgageRatio},
  };
}

void from_json(const json& j, CThostFtdcMortgageParamField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.AccountID));
  j.at("MortgageBalance").get_to(p.MortgageBalance);
  j.at("CheckMortgageRatio").get_to(p.CheckMortgageRatio);

}



void to_json(json& j, const CThostFtdcWithDrawParamField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"WithDrawParamID", std::string(1, p.WithDrawParamID)},
           {"WithDrawParamValue", codec_convert("UTF-8//TRANSLIT", "GBK", p.WithDrawParamValue)},
  };
}

void from_json(const json& j, CThostFtdcWithDrawParamField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.AccountID));
  auto &v2 = j.at("WithDrawParamID").get_ref<const std::string &>();
  p.WithDrawParamID = v2.at(0);
  auto &v3 = j.at("WithDrawParamValue").get_ref<const std::string &>();
  std::strncpy(p.WithDrawParamValue, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.WithDrawParamValue));

}



void to_json(json& j, const CThostFtdcThostUserFunctionField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"ThostFunctionCode", p.ThostFunctionCode},
  };
}

void from_json(const json& j, CThostFtdcThostUserFunctionField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.UserID));
  j.at("ThostFunctionCode").get_to(p.ThostFunctionCode);

}



void to_json(json& j, const CThostFtdcQryThostUserFunctionField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
  };
}

void from_json(const json& j, CThostFtdcQryThostUserFunctionField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.UserID));

}



void to_json(json& j, const CThostFtdcSPBMAddOnInterParameterField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"SpreadId", p.SpreadId},
           {"AddOnInterRateZ2", p.AddOnInterRateZ2},
           {"Leg1ProdFamilyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.Leg1ProdFamilyCode)},
           {"Leg2ProdFamilyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.Leg2ProdFamilyCode)},
  };
}

void from_json(const json& j, CThostFtdcSPBMAddOnInterParameterField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  j.at("SpreadId").get_to(p.SpreadId);
  j.at("AddOnInterRateZ2").get_to(p.AddOnInterRateZ2);
  auto &v4 = j.at("Leg1ProdFamilyCode").get_ref<const std::string &>();
  std::strncpy(p.Leg1ProdFamilyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.Leg1ProdFamilyCode));
  auto &v5 = j.at("Leg2ProdFamilyCode").get_ref<const std::string &>();
  std::strncpy(p.Leg2ProdFamilyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.Leg2ProdFamilyCode));

}



void to_json(json& j, const CThostFtdcQrySPBMAddOnInterParameterField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"Leg1ProdFamilyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.Leg1ProdFamilyCode)},
           {"Leg2ProdFamilyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.Leg2ProdFamilyCode)},
  };
}

void from_json(const json& j, CThostFtdcQrySPBMAddOnInterParameterField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("Leg1ProdFamilyCode").get_ref<const std::string &>();
  std::strncpy(p.Leg1ProdFamilyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.Leg1ProdFamilyCode));
  auto &v2 = j.at("Leg2ProdFamilyCode").get_ref<const std::string &>();
  std::strncpy(p.Leg2ProdFamilyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.Leg2ProdFamilyCode));

}



void to_json(json& j, const CThostFtdcQryInvestorCommoditySPMMMarginField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"CommodityID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CommodityID)},
  };
}

void from_json(const json& j, CThostFtdcQryInvestorCommoditySPMMMarginField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("CommodityID").get_ref<const std::string &>();
  std::strncpy(p.CommodityID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.CommodityID));

}



void to_json(json& j, const CThostFtdcQryInvestorCommodityGroupSPMMMarginField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"CommodityGroupID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CommodityGroupID)},
  };
}

void from_json(const json& j, CThostFtdcQryInvestorCommodityGroupSPMMMarginField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("CommodityGroupID").get_ref<const std::string &>();
  std::strncpy(p.CommodityGroupID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.CommodityGroupID));

}



void to_json(json& j, const CThostFtdcQrySPMMInstParamField& p) {
  j = json{
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQrySPMMInstParamField& p) {
  auto &v0 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcQrySPMMProductParamField& p) {
  j = json{
           {"ProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductID)},
  };
}

void from_json(const json& j, CThostFtdcQrySPMMProductParamField& p) {
  auto &v0 = j.at("ProductID").get_ref<const std::string &>();
  std::strncpy(p.ProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ProductID));

}



void to_json(json& j, const CThostFtdcInvestorCommoditySPMMMarginField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"CommodityID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CommodityID)},
           {"MarginBeforeDiscount", p.MarginBeforeDiscount},
           {"MarginNoDiscount", p.MarginNoDiscount},
           {"LongPosRisk", p.LongPosRisk},
           {"LongOpenFrozenRisk", p.LongOpenFrozenRisk},
           {"LongCloseFrozenRisk", p.LongCloseFrozenRisk},
           {"ShortPosRisk", p.ShortPosRisk},
           {"ShortOpenFrozenRisk", p.ShortOpenFrozenRisk},
           {"ShortCloseFrozenRisk", p.ShortCloseFrozenRisk},
           {"IntraCommodityRate", p.IntraCommodityRate},
           {"OptionDiscountRate", p.OptionDiscountRate},
           {"PosDiscount", p.PosDiscount},
           {"OpenFrozenDiscount", p.OpenFrozenDiscount},
           {"NetRisk", p.NetRisk},
           {"CloseFrozenMargin", p.CloseFrozenMargin},
           {"FrozenCommission", p.FrozenCommission},
           {"Commission", p.Commission},
           {"FrozenCash", p.FrozenCash},
           {"CashIn", p.CashIn},
           {"StrikeFrozenMargin", p.StrikeFrozenMargin},
  };
}

void from_json(const json& j, CThostFtdcInvestorCommoditySPMMMarginField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v3 = j.at("CommodityID").get_ref<const std::string &>();
  std::strncpy(p.CommodityID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.CommodityID));
  j.at("MarginBeforeDiscount").get_to(p.MarginBeforeDiscount);
  j.at("MarginNoDiscount").get_to(p.MarginNoDiscount);
  j.at("LongPosRisk").get_to(p.LongPosRisk);
  j.at("LongOpenFrozenRisk").get_to(p.LongOpenFrozenRisk);
  j.at("LongCloseFrozenRisk").get_to(p.LongCloseFrozenRisk);
  j.at("ShortPosRisk").get_to(p.ShortPosRisk);
  j.at("ShortOpenFrozenRisk").get_to(p.ShortOpenFrozenRisk);
  j.at("ShortCloseFrozenRisk").get_to(p.ShortCloseFrozenRisk);
  j.at("IntraCommodityRate").get_to(p.IntraCommodityRate);
  j.at("OptionDiscountRate").get_to(p.OptionDiscountRate);
  j.at("PosDiscount").get_to(p.PosDiscount);
  j.at("OpenFrozenDiscount").get_to(p.OpenFrozenDiscount);
  j.at("NetRisk").get_to(p.NetRisk);
  j.at("CloseFrozenMargin").get_to(p.CloseFrozenMargin);
  j.at("FrozenCommission").get_to(p.FrozenCommission);
  j.at("Commission").get_to(p.Commission);
  j.at("FrozenCash").get_to(p.FrozenCash);
  j.at("CashIn").get_to(p.CashIn);
  j.at("StrikeFrozenMargin").get_to(p.StrikeFrozenMargin);

}



void to_json(json& j, const CThostFtdcInvestorCommodityGroupSPMMMarginField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"CommodityGroupID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CommodityGroupID)},
           {"MarginBeforeDiscount", p.MarginBeforeDiscount},
           {"MarginNoDiscount", p.MarginNoDiscount},
           {"LongRisk", p.LongRisk},
           {"ShortRisk", p.ShortRisk},
           {"CloseFrozenMargin", p.CloseFrozenMargin},
           {"InterCommodityRate", p.InterCommodityRate},
           {"MiniMarginRatio", p.MiniMarginRatio},
           {"AdjustRatio", p.AdjustRatio},
           {"IntraCommodityDiscount", p.IntraCommodityDiscount},
           {"InterCommodityDiscount", p.InterCommodityDiscount},
           {"ExchMargin", p.ExchMargin},
           {"InvestorMargin", p.InvestorMargin},
           {"FrozenCommission", p.FrozenCommission},
           {"Commission", p.Commission},
           {"FrozenCash", p.FrozenCash},
           {"CashIn", p.CashIn},
           {"StrikeFrozenMargin", p.StrikeFrozenMargin},
  };
}

void from_json(const json& j, CThostFtdcInvestorCommodityGroupSPMMMarginField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v3 = j.at("CommodityGroupID").get_ref<const std::string &>();
  std::strncpy(p.CommodityGroupID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.CommodityGroupID));
  j.at("MarginBeforeDiscount").get_to(p.MarginBeforeDiscount);
  j.at("MarginNoDiscount").get_to(p.MarginNoDiscount);
  j.at("LongRisk").get_to(p.LongRisk);
  j.at("ShortRisk").get_to(p.ShortRisk);
  j.at("CloseFrozenMargin").get_to(p.CloseFrozenMargin);
  j.at("InterCommodityRate").get_to(p.InterCommodityRate);
  j.at("MiniMarginRatio").get_to(p.MiniMarginRatio);
  j.at("AdjustRatio").get_to(p.AdjustRatio);
  j.at("IntraCommodityDiscount").get_to(p.IntraCommodityDiscount);
  j.at("InterCommodityDiscount").get_to(p.InterCommodityDiscount);
  j.at("ExchMargin").get_to(p.ExchMargin);
  j.at("InvestorMargin").get_to(p.InvestorMargin);
  j.at("FrozenCommission").get_to(p.FrozenCommission);
  j.at("Commission").get_to(p.Commission);
  j.at("FrozenCash").get_to(p.FrozenCash);
  j.at("CashIn").get_to(p.CashIn);
  j.at("StrikeFrozenMargin").get_to(p.StrikeFrozenMargin);

}



void to_json(json& j, const CThostFtdcSPMMInstParamField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"InstMarginCalID", std::string(1, p.InstMarginCalID)},
           {"CommodityID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CommodityID)},
           {"CommodityGroupID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CommodityGroupID)},
  };
}

void from_json(const json& j, CThostFtdcSPMMInstParamField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v2 = j.at("InstMarginCalID").get_ref<const std::string &>();
  p.InstMarginCalID = v2.at(0);
  auto &v3 = j.at("CommodityID").get_ref<const std::string &>();
  std::strncpy(p.CommodityID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.CommodityID));
  auto &v4 = j.at("CommodityGroupID").get_ref<const std::string &>();
  std::strncpy(p.CommodityGroupID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.CommodityGroupID));

}



void to_json(json& j, const CThostFtdcSPMMProductParamField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductID)},
           {"CommodityID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CommodityID)},
           {"CommodityGroupID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CommodityGroupID)},
  };
}

void from_json(const json& j, CThostFtdcSPMMProductParamField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("ProductID").get_ref<const std::string &>();
  std::strncpy(p.ProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ProductID));
  auto &v2 = j.at("CommodityID").get_ref<const std::string &>();
  std::strncpy(p.CommodityID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.CommodityID));
  auto &v3 = j.at("CommodityGroupID").get_ref<const std::string &>();
  std::strncpy(p.CommodityGroupID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.CommodityGroupID));

}



void to_json(json& j, const CThostFtdcQryTraderAssignField& p) {
  j = json{
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
  };
}

void from_json(const json& j, CThostFtdcQryTraderAssignField& p) {
  auto &v0 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TraderID));

}



void to_json(json& j, const CThostFtdcTraderAssignField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"DRIdentityID", p.DRIdentityID},
  };
}

void from_json(const json& j, CThostFtdcTraderAssignField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v2 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.TraderID));
  auto &v3 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ParticipantID));
  j.at("DRIdentityID").get_to(p.DRIdentityID);

}



void to_json(json& j, const CThostFtdcInvestorInfoCntSettingField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"ProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductID)},
           {"IsCalInfoComm", p.IsCalInfoComm},
           {"IsLimitInfoMax", p.IsLimitInfoMax},
           {"InfoMaxLimit", p.InfoMaxLimit},
  };
}

void from_json(const json& j, CThostFtdcInvestorInfoCntSettingField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v3 = j.at("ProductID").get_ref<const std::string &>();
  std::strncpy(p.ProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ProductID));
  j.at("IsCalInfoComm").get_to(p.IsCalInfoComm);
  j.at("IsLimitInfoMax").get_to(p.IsLimitInfoMax);
  j.at("InfoMaxLimit").get_to(p.InfoMaxLimit);

}



void to_json(json& j, const CThostFtdcRCAMSCombProductInfoField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductID)},
           {"CombProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombProductID)},
           {"ProductGroupID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductGroupID)},
  };
}

void from_json(const json& j, CThostFtdcRCAMSCombProductInfoField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v2 = j.at("ProductID").get_ref<const std::string &>();
  std::strncpy(p.ProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ProductID));
  auto &v3 = j.at("CombProductID").get_ref<const std::string &>();
  std::strncpy(p.CombProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.CombProductID));
  auto &v4 = j.at("ProductGroupID").get_ref<const std::string &>();
  std::strncpy(p.ProductGroupID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.ProductGroupID));

}



void to_json(json& j, const CThostFtdcRCAMSInstrParameterField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductID)},
           {"HedgeRate", p.HedgeRate},
  };
}

void from_json(const json& j, CThostFtdcRCAMSInstrParameterField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v2 = j.at("ProductID").get_ref<const std::string &>();
  std::strncpy(p.ProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ProductID));
  j.at("HedgeRate").get_to(p.HedgeRate);

}



void to_json(json& j, const CThostFtdcRCAMSIntraParameterField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"CombProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombProductID)},
           {"HedgeRate", p.HedgeRate},
  };
}

void from_json(const json& j, CThostFtdcRCAMSIntraParameterField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v2 = j.at("CombProductID").get_ref<const std::string &>();
  std::strncpy(p.CombProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.CombProductID));
  j.at("HedgeRate").get_to(p.HedgeRate);

}



void to_json(json& j, const CThostFtdcRCAMSInterParameterField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ProductGroupID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductGroupID)},
           {"Priority", p.Priority},
           {"CreditRate", p.CreditRate},
           {"CombProduct1", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombProduct1)},
           {"CombProduct2", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombProduct2)},
  };
}

void from_json(const json& j, CThostFtdcRCAMSInterParameterField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v2 = j.at("ProductGroupID").get_ref<const std::string &>();
  std::strncpy(p.ProductGroupID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ProductGroupID));
  j.at("Priority").get_to(p.Priority);
  j.at("CreditRate").get_to(p.CreditRate);
  auto &v5 = j.at("CombProduct1").get_ref<const std::string &>();
  std::strncpy(p.CombProduct1, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.CombProduct1));
  auto &v6 = j.at("CombProduct2").get_ref<const std::string &>();
  std::strncpy(p.CombProduct2, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.CombProduct2));

}



void to_json(json& j, const CThostFtdcRCAMSShortOptAdjustParamField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"CombProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombProductID)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"AdjustValue", p.AdjustValue},
  };
}

void from_json(const json& j, CThostFtdcRCAMSShortOptAdjustParamField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v2 = j.at("CombProductID").get_ref<const std::string &>();
  std::strncpy(p.CombProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.CombProductID));
  auto &v3 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v3.at(0);
  j.at("AdjustValue").get_to(p.AdjustValue);

}



void to_json(json& j, const CThostFtdcRCAMSInvestorCombPositionField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"PosiDirection", std::string(1, p.PosiDirection)},
           {"CombInstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombInstrumentID)},
           {"LegID", p.LegID},
           {"ExchangeInstID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeInstID)},
           {"TotalAmt", p.TotalAmt},
           {"ExchMargin", p.ExchMargin},
           {"Margin", p.Margin},
  };
}

void from_json(const json& j, CThostFtdcRCAMSInvestorCombPositionField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v3 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v4 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v4.at(0);
  auto &v5 = j.at("PosiDirection").get_ref<const std::string &>();
  p.PosiDirection = v5.at(0);
  auto &v6 = j.at("CombInstrumentID").get_ref<const std::string &>();
  std::strncpy(p.CombInstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.CombInstrumentID));
  j.at("LegID").get_to(p.LegID);
  auto &v8 = j.at("ExchangeInstID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeInstID, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.ExchangeInstID));
  j.at("TotalAmt").get_to(p.TotalAmt);
  j.at("ExchMargin").get_to(p.ExchMargin);
  j.at("Margin").get_to(p.Margin);

}



void to_json(json& j, const CThostFtdcInvestorProdRCAMSMarginField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"CombProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombProductID)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"ProductGroupID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductGroupID)},
           {"RiskBeforeDiscount", p.RiskBeforeDiscount},
           {"IntraInstrRisk", p.IntraInstrRisk},
           {"BPosRisk", p.BPosRisk},
           {"SPosRisk", p.SPosRisk},
           {"IntraProdRisk", p.IntraProdRisk},
           {"NetRisk", p.NetRisk},
           {"InterProdRisk", p.InterProdRisk},
           {"ShortOptRiskAdj", p.ShortOptRiskAdj},
           {"OptionRoyalty", p.OptionRoyalty},
           {"MMSACloseFrozenMargin", p.MMSACloseFrozenMargin},
           {"CloseCombFrozenMargin", p.CloseCombFrozenMargin},
           {"CloseFrozenMargin", p.CloseFrozenMargin},
           {"MMSAOpenFrozenMargin", p.MMSAOpenFrozenMargin},
           {"DeliveryOpenFrozenMargin", p.DeliveryOpenFrozenMargin},
           {"OpenFrozenMargin", p.OpenFrozenMargin},
           {"UseFrozenMargin", p.UseFrozenMargin},
           {"MMSAExchMargin", p.MMSAExchMargin},
           {"DeliveryExchMargin", p.DeliveryExchMargin},
           {"CombExchMargin", p.CombExchMargin},
           {"ExchMargin", p.ExchMargin},
           {"UseMargin", p.UseMargin},
  };
}

void from_json(const json& j, CThostFtdcInvestorProdRCAMSMarginField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v3 = j.at("CombProductID").get_ref<const std::string &>();
  std::strncpy(p.CombProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.CombProductID));
  auto &v4 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v4.at(0);
  auto &v5 = j.at("ProductGroupID").get_ref<const std::string &>();
  std::strncpy(p.ProductGroupID, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.ProductGroupID));
  j.at("RiskBeforeDiscount").get_to(p.RiskBeforeDiscount);
  j.at("IntraInstrRisk").get_to(p.IntraInstrRisk);
  j.at("BPosRisk").get_to(p.BPosRisk);
  j.at("SPosRisk").get_to(p.SPosRisk);
  j.at("IntraProdRisk").get_to(p.IntraProdRisk);
  j.at("NetRisk").get_to(p.NetRisk);
  j.at("InterProdRisk").get_to(p.InterProdRisk);
  j.at("ShortOptRiskAdj").get_to(p.ShortOptRiskAdj);
  j.at("OptionRoyalty").get_to(p.OptionRoyalty);
  j.at("MMSACloseFrozenMargin").get_to(p.MMSACloseFrozenMargin);
  j.at("CloseCombFrozenMargin").get_to(p.CloseCombFrozenMargin);
  j.at("CloseFrozenMargin").get_to(p.CloseFrozenMargin);
  j.at("MMSAOpenFrozenMargin").get_to(p.MMSAOpenFrozenMargin);
  j.at("DeliveryOpenFrozenMargin").get_to(p.DeliveryOpenFrozenMargin);
  j.at("OpenFrozenMargin").get_to(p.OpenFrozenMargin);
  j.at("UseFrozenMargin").get_to(p.UseFrozenMargin);
  j.at("MMSAExchMargin").get_to(p.MMSAExchMargin);
  j.at("DeliveryExchMargin").get_to(p.DeliveryExchMargin);
  j.at("CombExchMargin").get_to(p.CombExchMargin);
  j.at("ExchMargin").get_to(p.ExchMargin);
  j.at("UseMargin").get_to(p.UseMargin);

}



void to_json(json& j, const CThostFtdcQryRCAMSCombProductInfoField& p) {
  j = json{
           {"ProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductID)},
           {"CombProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombProductID)},
           {"ProductGroupID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductGroupID)},
  };
}

void from_json(const json& j, CThostFtdcQryRCAMSCombProductInfoField& p) {
  auto &v0 = j.at("ProductID").get_ref<const std::string &>();
  std::strncpy(p.ProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ProductID));
  auto &v1 = j.at("CombProductID").get_ref<const std::string &>();
  std::strncpy(p.CombProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.CombProductID));
  auto &v2 = j.at("ProductGroupID").get_ref<const std::string &>();
  std::strncpy(p.ProductGroupID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ProductGroupID));

}



void to_json(json& j, const CThostFtdcQryRCAMSInstrParameterField& p) {
  j = json{
           {"ProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductID)},
  };
}

void from_json(const json& j, CThostFtdcQryRCAMSInstrParameterField& p) {
  auto &v0 = j.at("ProductID").get_ref<const std::string &>();
  std::strncpy(p.ProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ProductID));

}



void to_json(json& j, const CThostFtdcQryRCAMSIntraParameterField& p) {
  j = json{
           {"CombProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombProductID)},
  };
}

void from_json(const json& j, CThostFtdcQryRCAMSIntraParameterField& p) {
  auto &v0 = j.at("CombProductID").get_ref<const std::string &>();
  std::strncpy(p.CombProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.CombProductID));

}



void to_json(json& j, const CThostFtdcQryRCAMSInterParameterField& p) {
  j = json{
           {"ProductGroupID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductGroupID)},
           {"CombProduct1", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombProduct1)},
           {"CombProduct2", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombProduct2)},
  };
}

void from_json(const json& j, CThostFtdcQryRCAMSInterParameterField& p) {
  auto &v0 = j.at("ProductGroupID").get_ref<const std::string &>();
  std::strncpy(p.ProductGroupID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ProductGroupID));
  auto &v1 = j.at("CombProduct1").get_ref<const std::string &>();
  std::strncpy(p.CombProduct1, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.CombProduct1));
  auto &v2 = j.at("CombProduct2").get_ref<const std::string &>();
  std::strncpy(p.CombProduct2, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.CombProduct2));

}



void to_json(json& j, const CThostFtdcQryRCAMSShortOptAdjustParamField& p) {
  j = json{
           {"CombProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombProductID)},
  };
}

void from_json(const json& j, CThostFtdcQryRCAMSShortOptAdjustParamField& p) {
  auto &v0 = j.at("CombProductID").get_ref<const std::string &>();
  std::strncpy(p.CombProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.CombProductID));

}



void to_json(json& j, const CThostFtdcQryRCAMSInvestorCombPositionField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"CombInstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombInstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQryRCAMSInvestorCombPositionField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v3 = j.at("CombInstrumentID").get_ref<const std::string &>();
  std::strncpy(p.CombInstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.CombInstrumentID));

}



void to_json(json& j, const CThostFtdcQryInvestorProdRCAMSMarginField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"CombProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombProductID)},
           {"ProductGroupID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductGroupID)},
  };
}

void from_json(const json& j, CThostFtdcQryInvestorProdRCAMSMarginField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("CombProductID").get_ref<const std::string &>();
  std::strncpy(p.CombProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.CombProductID));
  auto &v3 = j.at("ProductGroupID").get_ref<const std::string &>();
  std::strncpy(p.ProductGroupID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ProductGroupID));

}



void to_json(json& j, const CThostFtdcRULEInstrParameterField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"InstrumentClass", std::string(1, p.InstrumentClass)},
           {"StdInstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.StdInstrumentID)},
           {"BSpecRatio", p.BSpecRatio},
           {"SSpecRatio", p.SSpecRatio},
           {"BHedgeRatio", p.BHedgeRatio},
           {"SHedgeRatio", p.SHedgeRatio},
           {"BAddOnMargin", p.BAddOnMargin},
           {"SAddOnMargin", p.SAddOnMargin},
           {"CommodityGroupID", p.CommodityGroupID},
  };
}

void from_json(const json& j, CThostFtdcRULEInstrParameterField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v2 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v3 = j.at("InstrumentClass").get_ref<const std::string &>();
  p.InstrumentClass = v3.at(0);
  auto &v4 = j.at("StdInstrumentID").get_ref<const std::string &>();
  std::strncpy(p.StdInstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.StdInstrumentID));
  j.at("BSpecRatio").get_to(p.BSpecRatio);
  j.at("SSpecRatio").get_to(p.SSpecRatio);
  j.at("BHedgeRatio").get_to(p.BHedgeRatio);
  j.at("SHedgeRatio").get_to(p.SHedgeRatio);
  j.at("BAddOnMargin").get_to(p.BAddOnMargin);
  j.at("SAddOnMargin").get_to(p.SAddOnMargin);
  j.at("CommodityGroupID").get_to(p.CommodityGroupID);

}



void to_json(json& j, const CThostFtdcRULEIntraParameterField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ProdFamilyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProdFamilyCode)},
           {"StdInstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.StdInstrumentID)},
           {"StdInstrMargin", p.StdInstrMargin},
           {"UsualIntraRate", p.UsualIntraRate},
           {"DeliveryIntraRate", p.DeliveryIntraRate},
  };
}

void from_json(const json& j, CThostFtdcRULEIntraParameterField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v2 = j.at("ProdFamilyCode").get_ref<const std::string &>();
  std::strncpy(p.ProdFamilyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ProdFamilyCode));
  auto &v3 = j.at("StdInstrumentID").get_ref<const std::string &>();
  std::strncpy(p.StdInstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.StdInstrumentID));
  j.at("StdInstrMargin").get_to(p.StdInstrMargin);
  j.at("UsualIntraRate").get_to(p.UsualIntraRate);
  j.at("DeliveryIntraRate").get_to(p.DeliveryIntraRate);

}



void to_json(json& j, const CThostFtdcRULEInterParameterField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"SpreadId", p.SpreadId},
           {"InterRate", p.InterRate},
           {"Leg1ProdFamilyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.Leg1ProdFamilyCode)},
           {"Leg2ProdFamilyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.Leg2ProdFamilyCode)},
           {"Leg1PropFactor", p.Leg1PropFactor},
           {"Leg2PropFactor", p.Leg2PropFactor},
           {"CommodityGroupID", p.CommodityGroupID},
           {"CommodityGroupName", codec_convert("UTF-8//TRANSLIT", "GBK", p.CommodityGroupName)},
  };
}

void from_json(const json& j, CThostFtdcRULEInterParameterField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  j.at("SpreadId").get_to(p.SpreadId);
  j.at("InterRate").get_to(p.InterRate);
  auto &v4 = j.at("Leg1ProdFamilyCode").get_ref<const std::string &>();
  std::strncpy(p.Leg1ProdFamilyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.Leg1ProdFamilyCode));
  auto &v5 = j.at("Leg2ProdFamilyCode").get_ref<const std::string &>();
  std::strncpy(p.Leg2ProdFamilyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.Leg2ProdFamilyCode));
  j.at("Leg1PropFactor").get_to(p.Leg1PropFactor);
  j.at("Leg2PropFactor").get_to(p.Leg2PropFactor);
  j.at("CommodityGroupID").get_to(p.CommodityGroupID);
  auto &v9 = j.at("CommodityGroupName").get_ref<const std::string &>();
  std::strncpy(p.CommodityGroupName, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.CommodityGroupName));

}



void to_json(json& j, const CThostFtdcQryRULEInstrParameterField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQryRULEInstrParameterField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InstrumentID));

}



void to_json(json& j, const CThostFtdcQryRULEIntraParameterField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ProdFamilyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProdFamilyCode)},
  };
}

void from_json(const json& j, CThostFtdcQryRULEIntraParameterField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("ProdFamilyCode").get_ref<const std::string &>();
  std::strncpy(p.ProdFamilyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ProdFamilyCode));

}



void to_json(json& j, const CThostFtdcQryRULEInterParameterField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"Leg1ProdFamilyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.Leg1ProdFamilyCode)},
           {"Leg2ProdFamilyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.Leg2ProdFamilyCode)},
           {"CommodityGroupID", p.CommodityGroupID},
  };
}

void from_json(const json& j, CThostFtdcQryRULEInterParameterField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("Leg1ProdFamilyCode").get_ref<const std::string &>();
  std::strncpy(p.Leg1ProdFamilyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.Leg1ProdFamilyCode));
  auto &v2 = j.at("Leg2ProdFamilyCode").get_ref<const std::string &>();
  std::strncpy(p.Leg2ProdFamilyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.Leg2ProdFamilyCode));
  j.at("CommodityGroupID").get_to(p.CommodityGroupID);

}



void to_json(json& j, const CThostFtdcInvestorProdRULEMarginField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"ProdFamilyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProdFamilyCode)},
           {"InstrumentClass", std::string(1, p.InstrumentClass)},
           {"CommodityGroupID", p.CommodityGroupID},
           {"BStdPosition", p.BStdPosition},
           {"SStdPosition", p.SStdPosition},
           {"BStdOpenFrozen", p.BStdOpenFrozen},
           {"SStdOpenFrozen", p.SStdOpenFrozen},
           {"BStdCloseFrozen", p.BStdCloseFrozen},
           {"SStdCloseFrozen", p.SStdCloseFrozen},
           {"IntraProdStdPosition", p.IntraProdStdPosition},
           {"NetStdPosition", p.NetStdPosition},
           {"InterProdStdPosition", p.InterProdStdPosition},
           {"SingleStdPosition", p.SingleStdPosition},
           {"IntraProdMargin", p.IntraProdMargin},
           {"InterProdMargin", p.InterProdMargin},
           {"SingleMargin", p.SingleMargin},
           {"NonCombMargin", p.NonCombMargin},
           {"AddOnMargin", p.AddOnMargin},
           {"ExchMargin", p.ExchMargin},
           {"AddOnFrozenMargin", p.AddOnFrozenMargin},
           {"OpenFrozenMargin", p.OpenFrozenMargin},
           {"CloseFrozenMargin", p.CloseFrozenMargin},
           {"Margin", p.Margin},
           {"FrozenMargin", p.FrozenMargin},
  };
}

void from_json(const json& j, CThostFtdcInvestorProdRULEMarginField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v3 = j.at("ProdFamilyCode").get_ref<const std::string &>();
  std::strncpy(p.ProdFamilyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ProdFamilyCode));
  auto &v4 = j.at("InstrumentClass").get_ref<const std::string &>();
  p.InstrumentClass = v4.at(0);
  j.at("CommodityGroupID").get_to(p.CommodityGroupID);
  j.at("BStdPosition").get_to(p.BStdPosition);
  j.at("SStdPosition").get_to(p.SStdPosition);
  j.at("BStdOpenFrozen").get_to(p.BStdOpenFrozen);
  j.at("SStdOpenFrozen").get_to(p.SStdOpenFrozen);
  j.at("BStdCloseFrozen").get_to(p.BStdCloseFrozen);
  j.at("SStdCloseFrozen").get_to(p.SStdCloseFrozen);
  j.at("IntraProdStdPosition").get_to(p.IntraProdStdPosition);
  j.at("NetStdPosition").get_to(p.NetStdPosition);
  j.at("InterProdStdPosition").get_to(p.InterProdStdPosition);
  j.at("SingleStdPosition").get_to(p.SingleStdPosition);
  j.at("IntraProdMargin").get_to(p.IntraProdMargin);
  j.at("InterProdMargin").get_to(p.InterProdMargin);
  j.at("SingleMargin").get_to(p.SingleMargin);
  j.at("NonCombMargin").get_to(p.NonCombMargin);
  j.at("AddOnMargin").get_to(p.AddOnMargin);
  j.at("ExchMargin").get_to(p.ExchMargin);
  j.at("AddOnFrozenMargin").get_to(p.AddOnFrozenMargin);
  j.at("OpenFrozenMargin").get_to(p.OpenFrozenMargin);
  j.at("CloseFrozenMargin").get_to(p.CloseFrozenMargin);
  j.at("Margin").get_to(p.Margin);
  j.at("FrozenMargin").get_to(p.FrozenMargin);

}



void to_json(json& j, const CThostFtdcQryInvestorProdRULEMarginField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"ProdFamilyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProdFamilyCode)},
           {"CommodityGroupID", p.CommodityGroupID},
  };
}

void from_json(const json& j, CThostFtdcQryInvestorProdRULEMarginField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v3 = j.at("ProdFamilyCode").get_ref<const std::string &>();
  std::strncpy(p.ProdFamilyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ProdFamilyCode));
  j.at("CommodityGroupID").get_to(p.CommodityGroupID);

}



void to_json(json& j, const CThostFtdcSyncDeltaSPBMPortfDefinitionField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"PortfolioDefID", p.PortfolioDefID},
           {"ProdFamilyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProdFamilyCode)},
           {"IsSPBM", p.IsSPBM},
           {"ActionDirection", std::string(1, p.ActionDirection)},
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaSPBMPortfDefinitionField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  j.at("PortfolioDefID").get_to(p.PortfolioDefID);
  auto &v2 = j.at("ProdFamilyCode").get_ref<const std::string &>();
  std::strncpy(p.ProdFamilyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ProdFamilyCode));
  j.at("IsSPBM").get_to(p.IsSPBM);
  auto &v4 = j.at("ActionDirection").get_ref<const std::string &>();
  p.ActionDirection = v4.at(0);
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);

}



void to_json(json& j, const CThostFtdcSyncDeltaSPBMInvstPortfDefField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"PortfolioDefID", p.PortfolioDefID},
           {"ActionDirection", std::string(1, p.ActionDirection)},
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaSPBMInvstPortfDefField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorID));
  j.at("PortfolioDefID").get_to(p.PortfolioDefID);
  auto &v4 = j.at("ActionDirection").get_ref<const std::string &>();
  p.ActionDirection = v4.at(0);
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);

}



void to_json(json& j, const CThostFtdcSyncDeltaSPBMFutureParameterField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"ProdFamilyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProdFamilyCode)},
           {"Cvf", p.Cvf},
           {"TimeRange", std::string(1, p.TimeRange)},
           {"MarginRate", p.MarginRate},
           {"LockRateX", p.LockRateX},
           {"AddOnRate", p.AddOnRate},
           {"PreSettlementPrice", p.PreSettlementPrice},
           {"AddOnLockRateX2", p.AddOnLockRateX2},
           {"ActionDirection", std::string(1, p.ActionDirection)},
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaSPBMFutureParameterField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v2 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v3 = j.at("ProdFamilyCode").get_ref<const std::string &>();
  std::strncpy(p.ProdFamilyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ProdFamilyCode));
  j.at("Cvf").get_to(p.Cvf);
  auto &v5 = j.at("TimeRange").get_ref<const std::string &>();
  p.TimeRange = v5.at(0);
  j.at("MarginRate").get_to(p.MarginRate);
  j.at("LockRateX").get_to(p.LockRateX);
  j.at("AddOnRate").get_to(p.AddOnRate);
  j.at("PreSettlementPrice").get_to(p.PreSettlementPrice);
  j.at("AddOnLockRateX2").get_to(p.AddOnLockRateX2);
  auto &v11 = j.at("ActionDirection").get_ref<const std::string &>();
  p.ActionDirection = v11.at(0);
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);

}



void to_json(json& j, const CThostFtdcSyncDeltaSPBMOptionParameterField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"ProdFamilyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProdFamilyCode)},
           {"Cvf", p.Cvf},
           {"DownPrice", p.DownPrice},
           {"Delta", p.Delta},
           {"SlimiDelta", p.SlimiDelta},
           {"PreSettlementPrice", p.PreSettlementPrice},
           {"ActionDirection", std::string(1, p.ActionDirection)},
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaSPBMOptionParameterField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v2 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v3 = j.at("ProdFamilyCode").get_ref<const std::string &>();
  std::strncpy(p.ProdFamilyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ProdFamilyCode));
  j.at("Cvf").get_to(p.Cvf);
  j.at("DownPrice").get_to(p.DownPrice);
  j.at("Delta").get_to(p.Delta);
  j.at("SlimiDelta").get_to(p.SlimiDelta);
  j.at("PreSettlementPrice").get_to(p.PreSettlementPrice);
  auto &v9 = j.at("ActionDirection").get_ref<const std::string &>();
  p.ActionDirection = v9.at(0);
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);

}



void to_json(json& j, const CThostFtdcSyncDeltaSPBMIntraParameterField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ProdFamilyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProdFamilyCode)},
           {"IntraRateY", p.IntraRateY},
           {"AddOnIntraRateY2", p.AddOnIntraRateY2},
           {"ActionDirection", std::string(1, p.ActionDirection)},
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaSPBMIntraParameterField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v2 = j.at("ProdFamilyCode").get_ref<const std::string &>();
  std::strncpy(p.ProdFamilyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ProdFamilyCode));
  j.at("IntraRateY").get_to(p.IntraRateY);
  j.at("AddOnIntraRateY2").get_to(p.AddOnIntraRateY2);
  auto &v5 = j.at("ActionDirection").get_ref<const std::string &>();
  p.ActionDirection = v5.at(0);
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);

}



void to_json(json& j, const CThostFtdcSyncDeltaSPBMInterParameterField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"SpreadId", p.SpreadId},
           {"InterRateZ", p.InterRateZ},
           {"Leg1ProdFamilyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.Leg1ProdFamilyCode)},
           {"Leg2ProdFamilyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.Leg2ProdFamilyCode)},
           {"ActionDirection", std::string(1, p.ActionDirection)},
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaSPBMInterParameterField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  j.at("SpreadId").get_to(p.SpreadId);
  j.at("InterRateZ").get_to(p.InterRateZ);
  auto &v4 = j.at("Leg1ProdFamilyCode").get_ref<const std::string &>();
  std::strncpy(p.Leg1ProdFamilyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.Leg1ProdFamilyCode));
  auto &v5 = j.at("Leg2ProdFamilyCode").get_ref<const std::string &>();
  std::strncpy(p.Leg2ProdFamilyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.Leg2ProdFamilyCode));
  auto &v6 = j.at("ActionDirection").get_ref<const std::string &>();
  p.ActionDirection = v6.at(0);
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);

}



void to_json(json& j, const CThostFtdcSyncDeltaSPBMAddOnInterParamField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"SpreadId", p.SpreadId},
           {"AddOnInterRateZ2", p.AddOnInterRateZ2},
           {"Leg1ProdFamilyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.Leg1ProdFamilyCode)},
           {"Leg2ProdFamilyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.Leg2ProdFamilyCode)},
           {"ActionDirection", std::string(1, p.ActionDirection)},
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaSPBMAddOnInterParamField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  j.at("SpreadId").get_to(p.SpreadId);
  j.at("AddOnInterRateZ2").get_to(p.AddOnInterRateZ2);
  auto &v4 = j.at("Leg1ProdFamilyCode").get_ref<const std::string &>();
  std::strncpy(p.Leg1ProdFamilyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.Leg1ProdFamilyCode));
  auto &v5 = j.at("Leg2ProdFamilyCode").get_ref<const std::string &>();
  std::strncpy(p.Leg2ProdFamilyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.Leg2ProdFamilyCode));
  auto &v6 = j.at("ActionDirection").get_ref<const std::string &>();
  p.ActionDirection = v6.at(0);
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);

}



void to_json(json& j, const CThostFtdcSyncDeltaSPMMInstParamField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"InstMarginCalID", std::string(1, p.InstMarginCalID)},
           {"CommodityID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CommodityID)},
           {"CommodityGroupID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CommodityGroupID)},
           {"ActionDirection", std::string(1, p.ActionDirection)},
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaSPMMInstParamField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v2 = j.at("InstMarginCalID").get_ref<const std::string &>();
  p.InstMarginCalID = v2.at(0);
  auto &v3 = j.at("CommodityID").get_ref<const std::string &>();
  std::strncpy(p.CommodityID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.CommodityID));
  auto &v4 = j.at("CommodityGroupID").get_ref<const std::string &>();
  std::strncpy(p.CommodityGroupID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.CommodityGroupID));
  auto &v5 = j.at("ActionDirection").get_ref<const std::string &>();
  p.ActionDirection = v5.at(0);
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);

}



void to_json(json& j, const CThostFtdcSyncDeltaSPMMProductParamField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductID)},
           {"CommodityID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CommodityID)},
           {"CommodityGroupID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CommodityGroupID)},
           {"ActionDirection", std::string(1, p.ActionDirection)},
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaSPMMProductParamField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("ProductID").get_ref<const std::string &>();
  std::strncpy(p.ProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ProductID));
  auto &v2 = j.at("CommodityID").get_ref<const std::string &>();
  std::strncpy(p.CommodityID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.CommodityID));
  auto &v3 = j.at("CommodityGroupID").get_ref<const std::string &>();
  std::strncpy(p.CommodityGroupID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.CommodityGroupID));
  auto &v4 = j.at("ActionDirection").get_ref<const std::string &>();
  p.ActionDirection = v4.at(0);
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);

}



void to_json(json& j, const CThostFtdcSyncDeltaInvestorSPMMModelField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"SPMMModelID", codec_convert("UTF-8//TRANSLIT", "GBK", p.SPMMModelID)},
           {"ActionDirection", std::string(1, p.ActionDirection)},
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaInvestorSPMMModelField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v3 = j.at("SPMMModelID").get_ref<const std::string &>();
  std::strncpy(p.SPMMModelID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.SPMMModelID));
  auto &v4 = j.at("ActionDirection").get_ref<const std::string &>();
  p.ActionDirection = v4.at(0);
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);

}



void to_json(json& j, const CThostFtdcSyncDeltaSPMMModelParamField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"SPMMModelID", codec_convert("UTF-8//TRANSLIT", "GBK", p.SPMMModelID)},
           {"CommodityGroupID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CommodityGroupID)},
           {"IntraCommodityRate", p.IntraCommodityRate},
           {"InterCommodityRate", p.InterCommodityRate},
           {"OptionDiscountRate", p.OptionDiscountRate},
           {"MiniMarginRatio", p.MiniMarginRatio},
           {"ActionDirection", std::string(1, p.ActionDirection)},
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaSPMMModelParamField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("SPMMModelID").get_ref<const std::string &>();
  std::strncpy(p.SPMMModelID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.SPMMModelID));
  auto &v2 = j.at("CommodityGroupID").get_ref<const std::string &>();
  std::strncpy(p.CommodityGroupID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.CommodityGroupID));
  j.at("IntraCommodityRate").get_to(p.IntraCommodityRate);
  j.at("InterCommodityRate").get_to(p.InterCommodityRate);
  j.at("OptionDiscountRate").get_to(p.OptionDiscountRate);
  j.at("MiniMarginRatio").get_to(p.MiniMarginRatio);
  auto &v7 = j.at("ActionDirection").get_ref<const std::string &>();
  p.ActionDirection = v7.at(0);
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);

}



void to_json(json& j, const CThostFtdcSyncDeltaRCAMSCombProdInfoField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductID)},
           {"CombProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombProductID)},
           {"ProductGroupID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductGroupID)},
           {"ActionDirection", std::string(1, p.ActionDirection)},
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaRCAMSCombProdInfoField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v2 = j.at("ProductID").get_ref<const std::string &>();
  std::strncpy(p.ProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ProductID));
  auto &v3 = j.at("CombProductID").get_ref<const std::string &>();
  std::strncpy(p.CombProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.CombProductID));
  auto &v4 = j.at("ProductGroupID").get_ref<const std::string &>();
  std::strncpy(p.ProductGroupID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.ProductGroupID));
  auto &v5 = j.at("ActionDirection").get_ref<const std::string &>();
  p.ActionDirection = v5.at(0);
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);

}



void to_json(json& j, const CThostFtdcSyncDeltaRCAMSInstrParameterField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductID)},
           {"HedgeRate", p.HedgeRate},
           {"ActionDirection", std::string(1, p.ActionDirection)},
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaRCAMSInstrParameterField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v2 = j.at("ProductID").get_ref<const std::string &>();
  std::strncpy(p.ProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ProductID));
  j.at("HedgeRate").get_to(p.HedgeRate);
  auto &v4 = j.at("ActionDirection").get_ref<const std::string &>();
  p.ActionDirection = v4.at(0);
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);

}



void to_json(json& j, const CThostFtdcSyncDeltaRCAMSIntraParameterField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"CombProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombProductID)},
           {"HedgeRate", p.HedgeRate},
           {"ActionDirection", std::string(1, p.ActionDirection)},
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaRCAMSIntraParameterField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v2 = j.at("CombProductID").get_ref<const std::string &>();
  std::strncpy(p.CombProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.CombProductID));
  j.at("HedgeRate").get_to(p.HedgeRate);
  auto &v4 = j.at("ActionDirection").get_ref<const std::string &>();
  p.ActionDirection = v4.at(0);
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);

}



void to_json(json& j, const CThostFtdcSyncDeltaRCAMSInterParameterField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ProductGroupID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductGroupID)},
           {"Priority", p.Priority},
           {"CreditRate", p.CreditRate},
           {"CombProduct1", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombProduct1)},
           {"CombProduct2", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombProduct2)},
           {"ActionDirection", std::string(1, p.ActionDirection)},
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaRCAMSInterParameterField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v2 = j.at("ProductGroupID").get_ref<const std::string &>();
  std::strncpy(p.ProductGroupID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ProductGroupID));
  j.at("Priority").get_to(p.Priority);
  j.at("CreditRate").get_to(p.CreditRate);
  auto &v5 = j.at("CombProduct1").get_ref<const std::string &>();
  std::strncpy(p.CombProduct1, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.CombProduct1));
  auto &v6 = j.at("CombProduct2").get_ref<const std::string &>();
  std::strncpy(p.CombProduct2, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.CombProduct2));
  auto &v7 = j.at("ActionDirection").get_ref<const std::string &>();
  p.ActionDirection = v7.at(0);
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);

}



void to_json(json& j, const CThostFtdcSyncDeltaRCAMSSOptAdjParamField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"CombProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombProductID)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"AdjustValue", p.AdjustValue},
           {"ActionDirection", std::string(1, p.ActionDirection)},
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaRCAMSSOptAdjParamField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v2 = j.at("CombProductID").get_ref<const std::string &>();
  std::strncpy(p.CombProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.CombProductID));
  auto &v3 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v3.at(0);
  j.at("AdjustValue").get_to(p.AdjustValue);
  auto &v5 = j.at("ActionDirection").get_ref<const std::string &>();
  p.ActionDirection = v5.at(0);
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);

}



void to_json(json& j, const CThostFtdcSyncDeltaRCAMSCombRuleDtlField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ProdGroup", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProdGroup)},
           {"RuleId", codec_convert("UTF-8//TRANSLIT", "GBK", p.RuleId)},
           {"Priority", p.Priority},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"CombMargin", p.CombMargin},
           {"ExchangeInstID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeInstID)},
           {"LegID", p.LegID},
           {"LegInstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.LegInstrumentID)},
           {"Direction", std::string(1, p.Direction)},
           {"LegMultiple", p.LegMultiple},
           {"ActionDirection", std::string(1, p.ActionDirection)},
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaRCAMSCombRuleDtlField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v2 = j.at("ProdGroup").get_ref<const std::string &>();
  std::strncpy(p.ProdGroup, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ProdGroup));
  auto &v3 = j.at("RuleId").get_ref<const std::string &>();
  std::strncpy(p.RuleId, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.RuleId));
  j.at("Priority").get_to(p.Priority);
  auto &v5 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v5.at(0);
  j.at("CombMargin").get_to(p.CombMargin);
  auto &v7 = j.at("ExchangeInstID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeInstID, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.ExchangeInstID));
  j.at("LegID").get_to(p.LegID);
  auto &v9 = j.at("LegInstrumentID").get_ref<const std::string &>();
  std::strncpy(p.LegInstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.LegInstrumentID));
  auto &v10 = j.at("Direction").get_ref<const std::string &>();
  p.Direction = v10.at(0);
  j.at("LegMultiple").get_to(p.LegMultiple);
  auto &v12 = j.at("ActionDirection").get_ref<const std::string &>();
  p.ActionDirection = v12.at(0);
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);

}



void to_json(json& j, const CThostFtdcSyncDeltaRCAMSInvstCombPosField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"PosiDirection", std::string(1, p.PosiDirection)},
           {"CombInstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombInstrumentID)},
           {"LegID", p.LegID},
           {"ExchangeInstID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeInstID)},
           {"TotalAmt", p.TotalAmt},
           {"ExchMargin", p.ExchMargin},
           {"Margin", p.Margin},
           {"ActionDirection", std::string(1, p.ActionDirection)},
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaRCAMSInvstCombPosField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v3 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v4 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v4.at(0);
  auto &v5 = j.at("PosiDirection").get_ref<const std::string &>();
  p.PosiDirection = v5.at(0);
  auto &v6 = j.at("CombInstrumentID").get_ref<const std::string &>();
  std::strncpy(p.CombInstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.CombInstrumentID));
  j.at("LegID").get_to(p.LegID);
  auto &v8 = j.at("ExchangeInstID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeInstID, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.ExchangeInstID));
  j.at("TotalAmt").get_to(p.TotalAmt);
  j.at("ExchMargin").get_to(p.ExchMargin);
  j.at("Margin").get_to(p.Margin);
  auto &v12 = j.at("ActionDirection").get_ref<const std::string &>();
  p.ActionDirection = v12.at(0);
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);

}



void to_json(json& j, const CThostFtdcSyncDeltaRULEInstrParameterField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"InstrumentClass", std::string(1, p.InstrumentClass)},
           {"StdInstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.StdInstrumentID)},
           {"BSpecRatio", p.BSpecRatio},
           {"SSpecRatio", p.SSpecRatio},
           {"BHedgeRatio", p.BHedgeRatio},
           {"SHedgeRatio", p.SHedgeRatio},
           {"BAddOnMargin", p.BAddOnMargin},
           {"SAddOnMargin", p.SAddOnMargin},
           {"CommodityGroupID", p.CommodityGroupID},
           {"ActionDirection", std::string(1, p.ActionDirection)},
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaRULEInstrParameterField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v2 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v3 = j.at("InstrumentClass").get_ref<const std::string &>();
  p.InstrumentClass = v3.at(0);
  auto &v4 = j.at("StdInstrumentID").get_ref<const std::string &>();
  std::strncpy(p.StdInstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.StdInstrumentID));
  j.at("BSpecRatio").get_to(p.BSpecRatio);
  j.at("SSpecRatio").get_to(p.SSpecRatio);
  j.at("BHedgeRatio").get_to(p.BHedgeRatio);
  j.at("SHedgeRatio").get_to(p.SHedgeRatio);
  j.at("BAddOnMargin").get_to(p.BAddOnMargin);
  j.at("SAddOnMargin").get_to(p.SAddOnMargin);
  j.at("CommodityGroupID").get_to(p.CommodityGroupID);
  auto &v12 = j.at("ActionDirection").get_ref<const std::string &>();
  p.ActionDirection = v12.at(0);
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);

}



void to_json(json& j, const CThostFtdcSyncDeltaRULEIntraParameterField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"ProdFamilyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProdFamilyCode)},
           {"StdInstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.StdInstrumentID)},
           {"StdInstrMargin", p.StdInstrMargin},
           {"UsualIntraRate", p.UsualIntraRate},
           {"DeliveryIntraRate", p.DeliveryIntraRate},
           {"ActionDirection", std::string(1, p.ActionDirection)},
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaRULEIntraParameterField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v2 = j.at("ProdFamilyCode").get_ref<const std::string &>();
  std::strncpy(p.ProdFamilyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ProdFamilyCode));
  auto &v3 = j.at("StdInstrumentID").get_ref<const std::string &>();
  std::strncpy(p.StdInstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.StdInstrumentID));
  j.at("StdInstrMargin").get_to(p.StdInstrMargin);
  j.at("UsualIntraRate").get_to(p.UsualIntraRate);
  j.at("DeliveryIntraRate").get_to(p.DeliveryIntraRate);
  auto &v7 = j.at("ActionDirection").get_ref<const std::string &>();
  p.ActionDirection = v7.at(0);
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);

}



void to_json(json& j, const CThostFtdcSyncDeltaRULEInterParameterField& p) {
  j = json{
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"SpreadId", p.SpreadId},
           {"InterRate", p.InterRate},
           {"Leg1ProdFamilyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.Leg1ProdFamilyCode)},
           {"Leg2ProdFamilyCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.Leg2ProdFamilyCode)},
           {"Leg1PropFactor", p.Leg1PropFactor},
           {"Leg2PropFactor", p.Leg2PropFactor},
           {"CommodityGroupID", p.CommodityGroupID},
           {"CommodityGroupName", codec_convert("UTF-8//TRANSLIT", "GBK", p.CommodityGroupName)},
           {"ActionDirection", std::string(1, p.ActionDirection)},
           {"SyncDeltaSequenceNo", p.SyncDeltaSequenceNo},
  };
}

void from_json(const json& j, CThostFtdcSyncDeltaRULEInterParameterField& p) {
  auto &v0 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradingDay));
  auto &v1 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.ExchangeID));
  j.at("SpreadId").get_to(p.SpreadId);
  j.at("InterRate").get_to(p.InterRate);
  auto &v4 = j.at("Leg1ProdFamilyCode").get_ref<const std::string &>();
  std::strncpy(p.Leg1ProdFamilyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.Leg1ProdFamilyCode));
  auto &v5 = j.at("Leg2ProdFamilyCode").get_ref<const std::string &>();
  std::strncpy(p.Leg2ProdFamilyCode, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.Leg2ProdFamilyCode));
  j.at("Leg1PropFactor").get_to(p.Leg1PropFactor);
  j.at("Leg2PropFactor").get_to(p.Leg2PropFactor);
  j.at("CommodityGroupID").get_to(p.CommodityGroupID);
  auto &v9 = j.at("CommodityGroupName").get_ref<const std::string &>();
  std::strncpy(p.CommodityGroupName, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.CommodityGroupName));
  auto &v10 = j.at("ActionDirection").get_ref<const std::string &>();
  p.ActionDirection = v10.at(0);
  j.at("SyncDeltaSequenceNo").get_to(p.SyncDeltaSequenceNo);

}



void to_json(json& j, const CThostFtdcIpAddrParamField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"Address", codec_convert("UTF-8//TRANSLIT", "GBK", p.Address)},
           {"DRIdentityID", p.DRIdentityID},
           {"DRIdentityName", codec_convert("UTF-8//TRANSLIT", "GBK", p.DRIdentityName)},
           {"AddrSrvMode", std::string(1, p.AddrSrvMode)},
           {"AddrVer", std::string(1, p.AddrVer)},
           {"AddrNo", p.AddrNo},
           {"AddrName", codec_convert("UTF-8//TRANSLIT", "GBK", p.AddrName)},
           {"IsSM", p.IsSM},
           {"IsLocalAddr", p.IsLocalAddr},
           {"Remark", codec_convert("UTF-8//TRANSLIT", "GBK", p.Remark)},
           {"Site", codec_convert("UTF-8//TRANSLIT", "GBK", p.Site)},
           {"NetOperator", codec_convert("UTF-8//TRANSLIT", "GBK", p.NetOperator)},
  };
}

void from_json(const json& j, CThostFtdcIpAddrParamField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("Address").get_ref<const std::string &>();
  std::strncpy(p.Address, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.Address));
  j.at("DRIdentityID").get_to(p.DRIdentityID);
  auto &v3 = j.at("DRIdentityName").get_ref<const std::string &>();
  std::strncpy(p.DRIdentityName, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.DRIdentityName));
  auto &v4 = j.at("AddrSrvMode").get_ref<const std::string &>();
  p.AddrSrvMode = v4.at(0);
  auto &v5 = j.at("AddrVer").get_ref<const std::string &>();
  p.AddrVer = v5.at(0);
  j.at("AddrNo").get_to(p.AddrNo);
  auto &v7 = j.at("AddrName").get_ref<const std::string &>();
  std::strncpy(p.AddrName, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.AddrName));
  j.at("IsSM").get_to(p.IsSM);
  j.at("IsLocalAddr").get_to(p.IsLocalAddr);
  auto &v10 = j.at("Remark").get_ref<const std::string &>();
  std::strncpy(p.Remark, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.Remark));
  auto &v11 = j.at("Site").get_ref<const std::string &>();
  std::strncpy(p.Site, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.Site));
  auto &v12 = j.at("NetOperator").get_ref<const std::string &>();
  std::strncpy(p.NetOperator, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.NetOperator));

}



void to_json(json& j, const CThostFtdcQryIpAddrParamField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
  };
}

void from_json(const json& j, CThostFtdcQryIpAddrParamField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));

}



void to_json(json& j, const CThostFtdcTGIpAddrParamField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"Address", codec_convert("UTF-8//TRANSLIT", "GBK", p.Address)},
           {"DRIdentityID", p.DRIdentityID},
           {"DRIdentityName", codec_convert("UTF-8//TRANSLIT", "GBK", p.DRIdentityName)},
           {"AddrSrvMode", std::string(1, p.AddrSrvMode)},
           {"AddrVer", std::string(1, p.AddrVer)},
           {"AddrNo", p.AddrNo},
           {"AddrName", codec_convert("UTF-8//TRANSLIT", "GBK", p.AddrName)},
           {"IsSM", p.IsSM},
           {"IsLocalAddr", p.IsLocalAddr},
           {"Remark", codec_convert("UTF-8//TRANSLIT", "GBK", p.Remark)},
           {"Site", codec_convert("UTF-8//TRANSLIT", "GBK", p.Site)},
           {"NetOperator", codec_convert("UTF-8//TRANSLIT", "GBK", p.NetOperator)},
  };
}

void from_json(const json& j, CThostFtdcTGIpAddrParamField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.UserID));
  auto &v2 = j.at("Address").get_ref<const std::string &>();
  std::strncpy(p.Address, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.Address));
  j.at("DRIdentityID").get_to(p.DRIdentityID);
  auto &v4 = j.at("DRIdentityName").get_ref<const std::string &>();
  std::strncpy(p.DRIdentityName, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.DRIdentityName));
  auto &v5 = j.at("AddrSrvMode").get_ref<const std::string &>();
  p.AddrSrvMode = v5.at(0);
  auto &v6 = j.at("AddrVer").get_ref<const std::string &>();
  p.AddrVer = v6.at(0);
  j.at("AddrNo").get_to(p.AddrNo);
  auto &v8 = j.at("AddrName").get_ref<const std::string &>();
  std::strncpy(p.AddrName, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.AddrName));
  j.at("IsSM").get_to(p.IsSM);
  j.at("IsLocalAddr").get_to(p.IsLocalAddr);
  auto &v11 = j.at("Remark").get_ref<const std::string &>();
  std::strncpy(p.Remark, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.Remark));
  auto &v12 = j.at("Site").get_ref<const std::string &>();
  std::strncpy(p.Site, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.Site));
  auto &v13 = j.at("NetOperator").get_ref<const std::string &>();
  std::strncpy(p.NetOperator, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.NetOperator));

}



void to_json(json& j, const CThostFtdcQryTGIpAddrParamField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"AppID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AppID)},
  };
}

void from_json(const json& j, CThostFtdcQryTGIpAddrParamField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.UserID));
  auto &v2 = j.at("AppID").get_ref<const std::string &>();
  std::strncpy(p.AppID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.AppID));

}



void to_json(json& j, const CThostFtdcTGSessionQryStatusField& p) {
  j = json{
           {"LastQryFreq", p.LastQryFreq},
           {"QryStatus", std::string(1, p.QryStatus)},
  };
}

void from_json(const json& j, CThostFtdcTGSessionQryStatusField& p) {
  j.at("LastQryFreq").get_to(p.LastQryFreq);
  auto &v1 = j.at("QryStatus").get_ref<const std::string &>();
  p.QryStatus = v1.at(0);

}



void to_json(json& j, const CThostFtdcLocalAddrConfigField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"PeerAddr", codec_convert("UTF-8//TRANSLIT", "GBK", p.PeerAddr)},
           {"NetMask", codec_convert("UTF-8//TRANSLIT", "GBK", p.NetMask)},
           {"DRIdentityID", p.DRIdentityID},
           {"LocalAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.LocalAddress)},
  };
}

void from_json(const json& j, CThostFtdcLocalAddrConfigField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("PeerAddr").get_ref<const std::string &>();
  std::strncpy(p.PeerAddr, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.PeerAddr));
  auto &v2 = j.at("NetMask").get_ref<const std::string &>();
  std::strncpy(p.NetMask, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.NetMask));
  j.at("DRIdentityID").get_to(p.DRIdentityID);
  auto &v4 = j.at("LocalAddress").get_ref<const std::string &>();
  std::strncpy(p.LocalAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.LocalAddress));

}



void to_json(json& j, const CThostFtdcQryLocalAddrConfigField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
  };
}

void from_json(const json& j, CThostFtdcQryLocalAddrConfigField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));

}



void to_json(json& j, const CThostFtdcReqQueryBankAccountBySecField& p) {
  j = json{
           {"TradeCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeCode)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBranchID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BrokerBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerBranchID)},
           {"TradeDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDate)},
           {"TradeTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTime)},
           {"BankSerial", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSerial)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"PlateSerial", p.PlateSerial},
           {"LastFragment", std::string(1, p.LastFragment)},
           {"SessionID", p.SessionID},
           {"CustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.CustomerName)},
           {"IdCardType", std::string(1, p.IdCardType)},
           {"IdentifiedCardNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.IdentifiedCardNo)},
           {"CustType", std::string(1, p.CustType)},
           {"BankAccount", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankAccount)},
           {"BankPassWord", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankPassWord)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"Password", codec_convert("UTF-8//TRANSLIT", "GBK", p.Password)},
           {"FutureSerial", p.FutureSerial},
           {"InstallID", p.InstallID},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"VerifyCertNoFlag", std::string(1, p.VerifyCertNoFlag)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"Digest", codec_convert("UTF-8//TRANSLIT", "GBK", p.Digest)},
           {"BankAccType", std::string(1, p.BankAccType)},
           {"DeviceID", codec_convert("UTF-8//TRANSLIT", "GBK", p.DeviceID)},
           {"BankSecuAccType", std::string(1, p.BankSecuAccType)},
           {"BrokerIDByBank", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerIDByBank)},
           {"BankSecuAcc", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSecuAcc)},
           {"BankPwdFlag", std::string(1, p.BankPwdFlag)},
           {"SecuPwdFlag", std::string(1, p.SecuPwdFlag)},
           {"OperNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.OperNo)},
           {"RequestID", p.RequestID},
           {"TID", p.TID},
           {"LongCustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.LongCustomerName)},
           {"DRIdentityID", p.DRIdentityID},
           {"SecFutureSerial", p.SecFutureSerial},
  };
}

void from_json(const json& j, CThostFtdcReqQueryBankAccountBySecField& p) {
  auto &v0 = j.at("TradeCode").get_ref<const std::string &>();
  std::strncpy(p.TradeCode, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradeCode));
  auto &v1 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BankID));
  auto &v2 = j.at("BankBranchID").get_ref<const std::string &>();
  std::strncpy(p.BankBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BankBranchID));
  auto &v3 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v4 = j.at("BrokerBranchID").get_ref<const std::string &>();
  std::strncpy(p.BrokerBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.BrokerBranchID));
  auto &v5 = j.at("TradeDate").get_ref<const std::string &>();
  std::strncpy(p.TradeDate, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.TradeDate));
  auto &v6 = j.at("TradeTime").get_ref<const std::string &>();
  std::strncpy(p.TradeTime, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.TradeTime));
  auto &v7 = j.at("BankSerial").get_ref<const std::string &>();
  std::strncpy(p.BankSerial, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BankSerial));
  auto &v8 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("PlateSerial").get_to(p.PlateSerial);
  auto &v10 = j.at("LastFragment").get_ref<const std::string &>();
  p.LastFragment = v10.at(0);
  j.at("SessionID").get_to(p.SessionID);
  auto &v12 = j.at("CustomerName").get_ref<const std::string &>();
  std::strncpy(p.CustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.CustomerName));
  auto &v13 = j.at("IdCardType").get_ref<const std::string &>();
  p.IdCardType = v13.at(0);
  auto &v14 = j.at("IdentifiedCardNo").get_ref<const std::string &>();
  std::strncpy(p.IdentifiedCardNo, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.IdentifiedCardNo));
  auto &v15 = j.at("CustType").get_ref<const std::string &>();
  p.CustType = v15.at(0);
  auto &v16 = j.at("BankAccount").get_ref<const std::string &>();
  std::strncpy(p.BankAccount, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.BankAccount));
  auto &v17 = j.at("BankPassWord").get_ref<const std::string &>();
  std::strncpy(p.BankPassWord, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.BankPassWord));
  auto &v18 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.AccountID));
  auto &v19 = j.at("Password").get_ref<const std::string &>();
  std::strncpy(p.Password, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.Password));
  j.at("FutureSerial").get_to(p.FutureSerial);
  j.at("InstallID").get_to(p.InstallID);
  auto &v22 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.UserID));
  auto &v23 = j.at("VerifyCertNoFlag").get_ref<const std::string &>();
  p.VerifyCertNoFlag = v23.at(0);
  auto &v24 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v24.c_str()).c_str(), sizeof(p.CurrencyID));
  auto &v25 = j.at("Digest").get_ref<const std::string &>();
  std::strncpy(p.Digest, codec_convert("GBK//TRANSLIT", "UTF-8", v25.c_str()).c_str(), sizeof(p.Digest));
  auto &v26 = j.at("BankAccType").get_ref<const std::string &>();
  p.BankAccType = v26.at(0);
  auto &v27 = j.at("DeviceID").get_ref<const std::string &>();
  std::strncpy(p.DeviceID, codec_convert("GBK//TRANSLIT", "UTF-8", v27.c_str()).c_str(), sizeof(p.DeviceID));
  auto &v28 = j.at("BankSecuAccType").get_ref<const std::string &>();
  p.BankSecuAccType = v28.at(0);
  auto &v29 = j.at("BrokerIDByBank").get_ref<const std::string &>();
  std::strncpy(p.BrokerIDByBank, codec_convert("GBK//TRANSLIT", "UTF-8", v29.c_str()).c_str(), sizeof(p.BrokerIDByBank));
  auto &v30 = j.at("BankSecuAcc").get_ref<const std::string &>();
  std::strncpy(p.BankSecuAcc, codec_convert("GBK//TRANSLIT", "UTF-8", v30.c_str()).c_str(), sizeof(p.BankSecuAcc));
  auto &v31 = j.at("BankPwdFlag").get_ref<const std::string &>();
  p.BankPwdFlag = v31.at(0);
  auto &v32 = j.at("SecuPwdFlag").get_ref<const std::string &>();
  p.SecuPwdFlag = v32.at(0);
  auto &v33 = j.at("OperNo").get_ref<const std::string &>();
  std::strncpy(p.OperNo, codec_convert("GBK//TRANSLIT", "UTF-8", v33.c_str()).c_str(), sizeof(p.OperNo));
  j.at("RequestID").get_to(p.RequestID);
  j.at("TID").get_to(p.TID);
  auto &v36 = j.at("LongCustomerName").get_ref<const std::string &>();
  std::strncpy(p.LongCustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v36.c_str()).c_str(), sizeof(p.LongCustomerName));
  j.at("DRIdentityID").get_to(p.DRIdentityID);
  j.at("SecFutureSerial").get_to(p.SecFutureSerial);

}



void to_json(json& j, const CThostFtdcRspQueryBankAccountBySecField& p) {
  j = json{
           {"TradeCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeCode)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBranchID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BrokerBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerBranchID)},
           {"TradeDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDate)},
           {"TradeTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTime)},
           {"BankSerial", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSerial)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"PlateSerial", p.PlateSerial},
           {"LastFragment", std::string(1, p.LastFragment)},
           {"SessionID", p.SessionID},
           {"CustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.CustomerName)},
           {"IdCardType", std::string(1, p.IdCardType)},
           {"IdentifiedCardNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.IdentifiedCardNo)},
           {"CustType", std::string(1, p.CustType)},
           {"BankAccount", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankAccount)},
           {"BankPassWord", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankPassWord)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"Password", codec_convert("UTF-8//TRANSLIT", "GBK", p.Password)},
           {"FutureSerial", p.FutureSerial},
           {"InstallID", p.InstallID},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"VerifyCertNoFlag", std::string(1, p.VerifyCertNoFlag)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"Digest", codec_convert("UTF-8//TRANSLIT", "GBK", p.Digest)},
           {"BankAccType", std::string(1, p.BankAccType)},
           {"DeviceID", codec_convert("UTF-8//TRANSLIT", "GBK", p.DeviceID)},
           {"BankSecuAccType", std::string(1, p.BankSecuAccType)},
           {"BrokerIDByBank", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerIDByBank)},
           {"BankSecuAcc", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSecuAcc)},
           {"BankPwdFlag", std::string(1, p.BankPwdFlag)},
           {"SecuPwdFlag", std::string(1, p.SecuPwdFlag)},
           {"OperNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.OperNo)},
           {"RequestID", p.RequestID},
           {"TID", p.TID},
           {"BankUseAmount", p.BankUseAmount},
           {"BankFetchAmount", p.BankFetchAmount},
           {"LongCustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.LongCustomerName)},
           {"DRIdentityID", p.DRIdentityID},
           {"SecFutureSerial", p.SecFutureSerial},
  };
}

void from_json(const json& j, CThostFtdcRspQueryBankAccountBySecField& p) {
  auto &v0 = j.at("TradeCode").get_ref<const std::string &>();
  std::strncpy(p.TradeCode, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradeCode));
  auto &v1 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BankID));
  auto &v2 = j.at("BankBranchID").get_ref<const std::string &>();
  std::strncpy(p.BankBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BankBranchID));
  auto &v3 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v4 = j.at("BrokerBranchID").get_ref<const std::string &>();
  std::strncpy(p.BrokerBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.BrokerBranchID));
  auto &v5 = j.at("TradeDate").get_ref<const std::string &>();
  std::strncpy(p.TradeDate, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.TradeDate));
  auto &v6 = j.at("TradeTime").get_ref<const std::string &>();
  std::strncpy(p.TradeTime, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.TradeTime));
  auto &v7 = j.at("BankSerial").get_ref<const std::string &>();
  std::strncpy(p.BankSerial, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BankSerial));
  auto &v8 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("PlateSerial").get_to(p.PlateSerial);
  auto &v10 = j.at("LastFragment").get_ref<const std::string &>();
  p.LastFragment = v10.at(0);
  j.at("SessionID").get_to(p.SessionID);
  auto &v12 = j.at("CustomerName").get_ref<const std::string &>();
  std::strncpy(p.CustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.CustomerName));
  auto &v13 = j.at("IdCardType").get_ref<const std::string &>();
  p.IdCardType = v13.at(0);
  auto &v14 = j.at("IdentifiedCardNo").get_ref<const std::string &>();
  std::strncpy(p.IdentifiedCardNo, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.IdentifiedCardNo));
  auto &v15 = j.at("CustType").get_ref<const std::string &>();
  p.CustType = v15.at(0);
  auto &v16 = j.at("BankAccount").get_ref<const std::string &>();
  std::strncpy(p.BankAccount, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.BankAccount));
  auto &v17 = j.at("BankPassWord").get_ref<const std::string &>();
  std::strncpy(p.BankPassWord, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.BankPassWord));
  auto &v18 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.AccountID));
  auto &v19 = j.at("Password").get_ref<const std::string &>();
  std::strncpy(p.Password, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.Password));
  j.at("FutureSerial").get_to(p.FutureSerial);
  j.at("InstallID").get_to(p.InstallID);
  auto &v22 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.UserID));
  auto &v23 = j.at("VerifyCertNoFlag").get_ref<const std::string &>();
  p.VerifyCertNoFlag = v23.at(0);
  auto &v24 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v24.c_str()).c_str(), sizeof(p.CurrencyID));
  auto &v25 = j.at("Digest").get_ref<const std::string &>();
  std::strncpy(p.Digest, codec_convert("GBK//TRANSLIT", "UTF-8", v25.c_str()).c_str(), sizeof(p.Digest));
  auto &v26 = j.at("BankAccType").get_ref<const std::string &>();
  p.BankAccType = v26.at(0);
  auto &v27 = j.at("DeviceID").get_ref<const std::string &>();
  std::strncpy(p.DeviceID, codec_convert("GBK//TRANSLIT", "UTF-8", v27.c_str()).c_str(), sizeof(p.DeviceID));
  auto &v28 = j.at("BankSecuAccType").get_ref<const std::string &>();
  p.BankSecuAccType = v28.at(0);
  auto &v29 = j.at("BrokerIDByBank").get_ref<const std::string &>();
  std::strncpy(p.BrokerIDByBank, codec_convert("GBK//TRANSLIT", "UTF-8", v29.c_str()).c_str(), sizeof(p.BrokerIDByBank));
  auto &v30 = j.at("BankSecuAcc").get_ref<const std::string &>();
  std::strncpy(p.BankSecuAcc, codec_convert("GBK//TRANSLIT", "UTF-8", v30.c_str()).c_str(), sizeof(p.BankSecuAcc));
  auto &v31 = j.at("BankPwdFlag").get_ref<const std::string &>();
  p.BankPwdFlag = v31.at(0);
  auto &v32 = j.at("SecuPwdFlag").get_ref<const std::string &>();
  p.SecuPwdFlag = v32.at(0);
  auto &v33 = j.at("OperNo").get_ref<const std::string &>();
  std::strncpy(p.OperNo, codec_convert("GBK//TRANSLIT", "UTF-8", v33.c_str()).c_str(), sizeof(p.OperNo));
  j.at("RequestID").get_to(p.RequestID);
  j.at("TID").get_to(p.TID);
  j.at("BankUseAmount").get_to(p.BankUseAmount);
  j.at("BankFetchAmount").get_to(p.BankFetchAmount);
  auto &v38 = j.at("LongCustomerName").get_ref<const std::string &>();
  std::strncpy(p.LongCustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v38.c_str()).c_str(), sizeof(p.LongCustomerName));
  j.at("DRIdentityID").get_to(p.DRIdentityID);
  j.at("SecFutureSerial").get_to(p.SecFutureSerial);

}



void to_json(json& j, const CThostFtdcReqTransferBySecField& p) {
  j = json{
           {"TradeCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeCode)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBranchID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BrokerBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerBranchID)},
           {"TradeDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDate)},
           {"TradeTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTime)},
           {"BankSerial", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSerial)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"PlateSerial", p.PlateSerial},
           {"LastFragment", std::string(1, p.LastFragment)},
           {"SessionID", p.SessionID},
           {"CustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.CustomerName)},
           {"IdCardType", std::string(1, p.IdCardType)},
           {"IdentifiedCardNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.IdentifiedCardNo)},
           {"CustType", std::string(1, p.CustType)},
           {"BankAccount", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankAccount)},
           {"BankPassWord", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankPassWord)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"Password", codec_convert("UTF-8//TRANSLIT", "GBK", p.Password)},
           {"InstallID", p.InstallID},
           {"FutureSerial", p.FutureSerial},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"VerifyCertNoFlag", std::string(1, p.VerifyCertNoFlag)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"TradeAmount", p.TradeAmount},
           {"FutureFetchAmount", p.FutureFetchAmount},
           {"FeePayFlag", std::string(1, p.FeePayFlag)},
           {"CustFee", p.CustFee},
           {"BrokerFee", p.BrokerFee},
           {"Message", codec_convert("UTF-8//TRANSLIT", "GBK", p.Message)},
           {"Digest", codec_convert("UTF-8//TRANSLIT", "GBK", p.Digest)},
           {"BankAccType", std::string(1, p.BankAccType)},
           {"DeviceID", codec_convert("UTF-8//TRANSLIT", "GBK", p.DeviceID)},
           {"BankSecuAccType", std::string(1, p.BankSecuAccType)},
           {"BrokerIDByBank", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerIDByBank)},
           {"BankSecuAcc", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSecuAcc)},
           {"BankPwdFlag", std::string(1, p.BankPwdFlag)},
           {"SecuPwdFlag", std::string(1, p.SecuPwdFlag)},
           {"OperNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.OperNo)},
           {"RequestID", p.RequestID},
           {"TID", p.TID},
           {"TransferStatus", std::string(1, p.TransferStatus)},
           {"LongCustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.LongCustomerName)},
           {"DRIdentityID", p.DRIdentityID},
           {"SecFutureSerial", p.SecFutureSerial},
  };
}

void from_json(const json& j, CThostFtdcReqTransferBySecField& p) {
  auto &v0 = j.at("TradeCode").get_ref<const std::string &>();
  std::strncpy(p.TradeCode, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradeCode));
  auto &v1 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BankID));
  auto &v2 = j.at("BankBranchID").get_ref<const std::string &>();
  std::strncpy(p.BankBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BankBranchID));
  auto &v3 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v4 = j.at("BrokerBranchID").get_ref<const std::string &>();
  std::strncpy(p.BrokerBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.BrokerBranchID));
  auto &v5 = j.at("TradeDate").get_ref<const std::string &>();
  std::strncpy(p.TradeDate, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.TradeDate));
  auto &v6 = j.at("TradeTime").get_ref<const std::string &>();
  std::strncpy(p.TradeTime, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.TradeTime));
  auto &v7 = j.at("BankSerial").get_ref<const std::string &>();
  std::strncpy(p.BankSerial, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BankSerial));
  auto &v8 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("PlateSerial").get_to(p.PlateSerial);
  auto &v10 = j.at("LastFragment").get_ref<const std::string &>();
  p.LastFragment = v10.at(0);
  j.at("SessionID").get_to(p.SessionID);
  auto &v12 = j.at("CustomerName").get_ref<const std::string &>();
  std::strncpy(p.CustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.CustomerName));
  auto &v13 = j.at("IdCardType").get_ref<const std::string &>();
  p.IdCardType = v13.at(0);
  auto &v14 = j.at("IdentifiedCardNo").get_ref<const std::string &>();
  std::strncpy(p.IdentifiedCardNo, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.IdentifiedCardNo));
  auto &v15 = j.at("CustType").get_ref<const std::string &>();
  p.CustType = v15.at(0);
  auto &v16 = j.at("BankAccount").get_ref<const std::string &>();
  std::strncpy(p.BankAccount, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.BankAccount));
  auto &v17 = j.at("BankPassWord").get_ref<const std::string &>();
  std::strncpy(p.BankPassWord, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.BankPassWord));
  auto &v18 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.AccountID));
  auto &v19 = j.at("Password").get_ref<const std::string &>();
  std::strncpy(p.Password, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.Password));
  j.at("InstallID").get_to(p.InstallID);
  j.at("FutureSerial").get_to(p.FutureSerial);
  auto &v22 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.UserID));
  auto &v23 = j.at("VerifyCertNoFlag").get_ref<const std::string &>();
  p.VerifyCertNoFlag = v23.at(0);
  auto &v24 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v24.c_str()).c_str(), sizeof(p.CurrencyID));
  j.at("TradeAmount").get_to(p.TradeAmount);
  j.at("FutureFetchAmount").get_to(p.FutureFetchAmount);
  auto &v27 = j.at("FeePayFlag").get_ref<const std::string &>();
  p.FeePayFlag = v27.at(0);
  j.at("CustFee").get_to(p.CustFee);
  j.at("BrokerFee").get_to(p.BrokerFee);
  auto &v30 = j.at("Message").get_ref<const std::string &>();
  std::strncpy(p.Message, codec_convert("GBK//TRANSLIT", "UTF-8", v30.c_str()).c_str(), sizeof(p.Message));
  auto &v31 = j.at("Digest").get_ref<const std::string &>();
  std::strncpy(p.Digest, codec_convert("GBK//TRANSLIT", "UTF-8", v31.c_str()).c_str(), sizeof(p.Digest));
  auto &v32 = j.at("BankAccType").get_ref<const std::string &>();
  p.BankAccType = v32.at(0);
  auto &v33 = j.at("DeviceID").get_ref<const std::string &>();
  std::strncpy(p.DeviceID, codec_convert("GBK//TRANSLIT", "UTF-8", v33.c_str()).c_str(), sizeof(p.DeviceID));
  auto &v34 = j.at("BankSecuAccType").get_ref<const std::string &>();
  p.BankSecuAccType = v34.at(0);
  auto &v35 = j.at("BrokerIDByBank").get_ref<const std::string &>();
  std::strncpy(p.BrokerIDByBank, codec_convert("GBK//TRANSLIT", "UTF-8", v35.c_str()).c_str(), sizeof(p.BrokerIDByBank));
  auto &v36 = j.at("BankSecuAcc").get_ref<const std::string &>();
  std::strncpy(p.BankSecuAcc, codec_convert("GBK//TRANSLIT", "UTF-8", v36.c_str()).c_str(), sizeof(p.BankSecuAcc));
  auto &v37 = j.at("BankPwdFlag").get_ref<const std::string &>();
  p.BankPwdFlag = v37.at(0);
  auto &v38 = j.at("SecuPwdFlag").get_ref<const std::string &>();
  p.SecuPwdFlag = v38.at(0);
  auto &v39 = j.at("OperNo").get_ref<const std::string &>();
  std::strncpy(p.OperNo, codec_convert("GBK//TRANSLIT", "UTF-8", v39.c_str()).c_str(), sizeof(p.OperNo));
  j.at("RequestID").get_to(p.RequestID);
  j.at("TID").get_to(p.TID);
  auto &v42 = j.at("TransferStatus").get_ref<const std::string &>();
  p.TransferStatus = v42.at(0);
  auto &v43 = j.at("LongCustomerName").get_ref<const std::string &>();
  std::strncpy(p.LongCustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v43.c_str()).c_str(), sizeof(p.LongCustomerName));
  j.at("DRIdentityID").get_to(p.DRIdentityID);
  j.at("SecFutureSerial").get_to(p.SecFutureSerial);

}



void to_json(json& j, const CThostFtdcRspTransferBySecField& p) {
  j = json{
           {"TradeCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeCode)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBranchID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BrokerBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerBranchID)},
           {"TradeDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDate)},
           {"TradeTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTime)},
           {"BankSerial", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSerial)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"PlateSerial", p.PlateSerial},
           {"LastFragment", std::string(1, p.LastFragment)},
           {"SessionID", p.SessionID},
           {"CustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.CustomerName)},
           {"IdCardType", std::string(1, p.IdCardType)},
           {"IdentifiedCardNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.IdentifiedCardNo)},
           {"CustType", std::string(1, p.CustType)},
           {"BankAccount", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankAccount)},
           {"BankPassWord", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankPassWord)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"Password", codec_convert("UTF-8//TRANSLIT", "GBK", p.Password)},
           {"InstallID", p.InstallID},
           {"FutureSerial", p.FutureSerial},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"VerifyCertNoFlag", std::string(1, p.VerifyCertNoFlag)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"TradeAmount", p.TradeAmount},
           {"FutureFetchAmount", p.FutureFetchAmount},
           {"FeePayFlag", std::string(1, p.FeePayFlag)},
           {"CustFee", p.CustFee},
           {"BrokerFee", p.BrokerFee},
           {"Message", codec_convert("UTF-8//TRANSLIT", "GBK", p.Message)},
           {"Digest", codec_convert("UTF-8//TRANSLIT", "GBK", p.Digest)},
           {"BankAccType", std::string(1, p.BankAccType)},
           {"DeviceID", codec_convert("UTF-8//TRANSLIT", "GBK", p.DeviceID)},
           {"BankSecuAccType", std::string(1, p.BankSecuAccType)},
           {"BrokerIDByBank", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerIDByBank)},
           {"BankSecuAcc", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSecuAcc)},
           {"BankPwdFlag", std::string(1, p.BankPwdFlag)},
           {"SecuPwdFlag", std::string(1, p.SecuPwdFlag)},
           {"OperNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.OperNo)},
           {"RequestID", p.RequestID},
           {"TID", p.TID},
           {"TransferStatus", std::string(1, p.TransferStatus)},
           {"ErrorID", p.ErrorID},
           {"ErrorMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.ErrorMsg)},
           {"LongCustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.LongCustomerName)},
           {"DRIdentityID", p.DRIdentityID},
           {"SecFutureSerial", p.SecFutureSerial},
  };
}

void from_json(const json& j, CThostFtdcRspTransferBySecField& p) {
  auto &v0 = j.at("TradeCode").get_ref<const std::string &>();
  std::strncpy(p.TradeCode, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradeCode));
  auto &v1 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BankID));
  auto &v2 = j.at("BankBranchID").get_ref<const std::string &>();
  std::strncpy(p.BankBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BankBranchID));
  auto &v3 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v4 = j.at("BrokerBranchID").get_ref<const std::string &>();
  std::strncpy(p.BrokerBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.BrokerBranchID));
  auto &v5 = j.at("TradeDate").get_ref<const std::string &>();
  std::strncpy(p.TradeDate, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.TradeDate));
  auto &v6 = j.at("TradeTime").get_ref<const std::string &>();
  std::strncpy(p.TradeTime, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.TradeTime));
  auto &v7 = j.at("BankSerial").get_ref<const std::string &>();
  std::strncpy(p.BankSerial, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BankSerial));
  auto &v8 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("PlateSerial").get_to(p.PlateSerial);
  auto &v10 = j.at("LastFragment").get_ref<const std::string &>();
  p.LastFragment = v10.at(0);
  j.at("SessionID").get_to(p.SessionID);
  auto &v12 = j.at("CustomerName").get_ref<const std::string &>();
  std::strncpy(p.CustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.CustomerName));
  auto &v13 = j.at("IdCardType").get_ref<const std::string &>();
  p.IdCardType = v13.at(0);
  auto &v14 = j.at("IdentifiedCardNo").get_ref<const std::string &>();
  std::strncpy(p.IdentifiedCardNo, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.IdentifiedCardNo));
  auto &v15 = j.at("CustType").get_ref<const std::string &>();
  p.CustType = v15.at(0);
  auto &v16 = j.at("BankAccount").get_ref<const std::string &>();
  std::strncpy(p.BankAccount, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.BankAccount));
  auto &v17 = j.at("BankPassWord").get_ref<const std::string &>();
  std::strncpy(p.BankPassWord, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.BankPassWord));
  auto &v18 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.AccountID));
  auto &v19 = j.at("Password").get_ref<const std::string &>();
  std::strncpy(p.Password, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.Password));
  j.at("InstallID").get_to(p.InstallID);
  j.at("FutureSerial").get_to(p.FutureSerial);
  auto &v22 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.UserID));
  auto &v23 = j.at("VerifyCertNoFlag").get_ref<const std::string &>();
  p.VerifyCertNoFlag = v23.at(0);
  auto &v24 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v24.c_str()).c_str(), sizeof(p.CurrencyID));
  j.at("TradeAmount").get_to(p.TradeAmount);
  j.at("FutureFetchAmount").get_to(p.FutureFetchAmount);
  auto &v27 = j.at("FeePayFlag").get_ref<const std::string &>();
  p.FeePayFlag = v27.at(0);
  j.at("CustFee").get_to(p.CustFee);
  j.at("BrokerFee").get_to(p.BrokerFee);
  auto &v30 = j.at("Message").get_ref<const std::string &>();
  std::strncpy(p.Message, codec_convert("GBK//TRANSLIT", "UTF-8", v30.c_str()).c_str(), sizeof(p.Message));
  auto &v31 = j.at("Digest").get_ref<const std::string &>();
  std::strncpy(p.Digest, codec_convert("GBK//TRANSLIT", "UTF-8", v31.c_str()).c_str(), sizeof(p.Digest));
  auto &v32 = j.at("BankAccType").get_ref<const std::string &>();
  p.BankAccType = v32.at(0);
  auto &v33 = j.at("DeviceID").get_ref<const std::string &>();
  std::strncpy(p.DeviceID, codec_convert("GBK//TRANSLIT", "UTF-8", v33.c_str()).c_str(), sizeof(p.DeviceID));
  auto &v34 = j.at("BankSecuAccType").get_ref<const std::string &>();
  p.BankSecuAccType = v34.at(0);
  auto &v35 = j.at("BrokerIDByBank").get_ref<const std::string &>();
  std::strncpy(p.BrokerIDByBank, codec_convert("GBK//TRANSLIT", "UTF-8", v35.c_str()).c_str(), sizeof(p.BrokerIDByBank));
  auto &v36 = j.at("BankSecuAcc").get_ref<const std::string &>();
  std::strncpy(p.BankSecuAcc, codec_convert("GBK//TRANSLIT", "UTF-8", v36.c_str()).c_str(), sizeof(p.BankSecuAcc));
  auto &v37 = j.at("BankPwdFlag").get_ref<const std::string &>();
  p.BankPwdFlag = v37.at(0);
  auto &v38 = j.at("SecuPwdFlag").get_ref<const std::string &>();
  p.SecuPwdFlag = v38.at(0);
  auto &v39 = j.at("OperNo").get_ref<const std::string &>();
  std::strncpy(p.OperNo, codec_convert("GBK//TRANSLIT", "UTF-8", v39.c_str()).c_str(), sizeof(p.OperNo));
  j.at("RequestID").get_to(p.RequestID);
  j.at("TID").get_to(p.TID);
  auto &v42 = j.at("TransferStatus").get_ref<const std::string &>();
  p.TransferStatus = v42.at(0);
  j.at("ErrorID").get_to(p.ErrorID);
  auto &v44 = j.at("ErrorMsg").get_ref<const std::string &>();
  std::strncpy(p.ErrorMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v44.c_str()).c_str(), sizeof(p.ErrorMsg));
  auto &v45 = j.at("LongCustomerName").get_ref<const std::string &>();
  std::strncpy(p.LongCustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v45.c_str()).c_str(), sizeof(p.LongCustomerName));
  j.at("DRIdentityID").get_to(p.DRIdentityID);
  j.at("SecFutureSerial").get_to(p.SecFutureSerial);

}



void to_json(json& j, const CThostFtdcNotifyQueryFutureAccountBySecField& p) {
  j = json{
           {"TradeCode", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeCode)},
           {"BankID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankID)},
           {"BankBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankBranchID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"BrokerBranchID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerBranchID)},
           {"TradeDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeDate)},
           {"TradeTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradeTime)},
           {"BankSerial", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSerial)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"PlateSerial", p.PlateSerial},
           {"LastFragment", std::string(1, p.LastFragment)},
           {"SessionID", p.SessionID},
           {"CustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.CustomerName)},
           {"IdCardType", std::string(1, p.IdCardType)},
           {"IdentifiedCardNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.IdentifiedCardNo)},
           {"CustType", std::string(1, p.CustType)},
           {"BankAccount", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankAccount)},
           {"BankPassWord", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankPassWord)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"Password", codec_convert("UTF-8//TRANSLIT", "GBK", p.Password)},
           {"FutureSerial", p.FutureSerial},
           {"InstallID", p.InstallID},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"VerifyCertNoFlag", std::string(1, p.VerifyCertNoFlag)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"Digest", codec_convert("UTF-8//TRANSLIT", "GBK", p.Digest)},
           {"BankAccType", std::string(1, p.BankAccType)},
           {"DeviceID", codec_convert("UTF-8//TRANSLIT", "GBK", p.DeviceID)},
           {"BankSecuAccType", std::string(1, p.BankSecuAccType)},
           {"BrokerIDByBank", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerIDByBank)},
           {"BankSecuAcc", codec_convert("UTF-8//TRANSLIT", "GBK", p.BankSecuAcc)},
           {"BankPwdFlag", std::string(1, p.BankPwdFlag)},
           {"SecuPwdFlag", std::string(1, p.SecuPwdFlag)},
           {"OperNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.OperNo)},
           {"RequestID", p.RequestID},
           {"TID", p.TID},
           {"BankUseAmount", p.BankUseAmount},
           {"BankFetchAmount", p.BankFetchAmount},
           {"ErrorID", p.ErrorID},
           {"ErrorMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.ErrorMsg)},
           {"LongCustomerName", codec_convert("UTF-8//TRANSLIT", "GBK", p.LongCustomerName)},
           {"DRIdentityID", p.DRIdentityID},
           {"SecFutureSerial", p.SecFutureSerial},
  };
}

void from_json(const json& j, CThostFtdcNotifyQueryFutureAccountBySecField& p) {
  auto &v0 = j.at("TradeCode").get_ref<const std::string &>();
  std::strncpy(p.TradeCode, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.TradeCode));
  auto &v1 = j.at("BankID").get_ref<const std::string &>();
  std::strncpy(p.BankID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BankID));
  auto &v2 = j.at("BankBranchID").get_ref<const std::string &>();
  std::strncpy(p.BankBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BankBranchID));
  auto &v3 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v4 = j.at("BrokerBranchID").get_ref<const std::string &>();
  std::strncpy(p.BrokerBranchID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.BrokerBranchID));
  auto &v5 = j.at("TradeDate").get_ref<const std::string &>();
  std::strncpy(p.TradeDate, codec_convert("GBK//TRANSLIT", "UTF-8", v5.c_str()).c_str(), sizeof(p.TradeDate));
  auto &v6 = j.at("TradeTime").get_ref<const std::string &>();
  std::strncpy(p.TradeTime, codec_convert("GBK//TRANSLIT", "UTF-8", v6.c_str()).c_str(), sizeof(p.TradeTime));
  auto &v7 = j.at("BankSerial").get_ref<const std::string &>();
  std::strncpy(p.BankSerial, codec_convert("GBK//TRANSLIT", "UTF-8", v7.c_str()).c_str(), sizeof(p.BankSerial));
  auto &v8 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v8.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("PlateSerial").get_to(p.PlateSerial);
  auto &v10 = j.at("LastFragment").get_ref<const std::string &>();
  p.LastFragment = v10.at(0);
  j.at("SessionID").get_to(p.SessionID);
  auto &v12 = j.at("CustomerName").get_ref<const std::string &>();
  std::strncpy(p.CustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.CustomerName));
  auto &v13 = j.at("IdCardType").get_ref<const std::string &>();
  p.IdCardType = v13.at(0);
  auto &v14 = j.at("IdentifiedCardNo").get_ref<const std::string &>();
  std::strncpy(p.IdentifiedCardNo, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.IdentifiedCardNo));
  auto &v15 = j.at("CustType").get_ref<const std::string &>();
  p.CustType = v15.at(0);
  auto &v16 = j.at("BankAccount").get_ref<const std::string &>();
  std::strncpy(p.BankAccount, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.BankAccount));
  auto &v17 = j.at("BankPassWord").get_ref<const std::string &>();
  std::strncpy(p.BankPassWord, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.BankPassWord));
  auto &v18 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.AccountID));
  auto &v19 = j.at("Password").get_ref<const std::string &>();
  std::strncpy(p.Password, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.Password));
  j.at("FutureSerial").get_to(p.FutureSerial);
  j.at("InstallID").get_to(p.InstallID);
  auto &v22 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.UserID));
  auto &v23 = j.at("VerifyCertNoFlag").get_ref<const std::string &>();
  p.VerifyCertNoFlag = v23.at(0);
  auto &v24 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v24.c_str()).c_str(), sizeof(p.CurrencyID));
  auto &v25 = j.at("Digest").get_ref<const std::string &>();
  std::strncpy(p.Digest, codec_convert("GBK//TRANSLIT", "UTF-8", v25.c_str()).c_str(), sizeof(p.Digest));
  auto &v26 = j.at("BankAccType").get_ref<const std::string &>();
  p.BankAccType = v26.at(0);
  auto &v27 = j.at("DeviceID").get_ref<const std::string &>();
  std::strncpy(p.DeviceID, codec_convert("GBK//TRANSLIT", "UTF-8", v27.c_str()).c_str(), sizeof(p.DeviceID));
  auto &v28 = j.at("BankSecuAccType").get_ref<const std::string &>();
  p.BankSecuAccType = v28.at(0);
  auto &v29 = j.at("BrokerIDByBank").get_ref<const std::string &>();
  std::strncpy(p.BrokerIDByBank, codec_convert("GBK//TRANSLIT", "UTF-8", v29.c_str()).c_str(), sizeof(p.BrokerIDByBank));
  auto &v30 = j.at("BankSecuAcc").get_ref<const std::string &>();
  std::strncpy(p.BankSecuAcc, codec_convert("GBK//TRANSLIT", "UTF-8", v30.c_str()).c_str(), sizeof(p.BankSecuAcc));
  auto &v31 = j.at("BankPwdFlag").get_ref<const std::string &>();
  p.BankPwdFlag = v31.at(0);
  auto &v32 = j.at("SecuPwdFlag").get_ref<const std::string &>();
  p.SecuPwdFlag = v32.at(0);
  auto &v33 = j.at("OperNo").get_ref<const std::string &>();
  std::strncpy(p.OperNo, codec_convert("GBK//TRANSLIT", "UTF-8", v33.c_str()).c_str(), sizeof(p.OperNo));
  j.at("RequestID").get_to(p.RequestID);
  j.at("TID").get_to(p.TID);
  j.at("BankUseAmount").get_to(p.BankUseAmount);
  j.at("BankFetchAmount").get_to(p.BankFetchAmount);
  j.at("ErrorID").get_to(p.ErrorID);
  auto &v39 = j.at("ErrorMsg").get_ref<const std::string &>();
  std::strncpy(p.ErrorMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v39.c_str()).c_str(), sizeof(p.ErrorMsg));
  auto &v40 = j.at("LongCustomerName").get_ref<const std::string &>();
  std::strncpy(p.LongCustomerName, codec_convert("GBK//TRANSLIT", "UTF-8", v40.c_str()).c_str(), sizeof(p.LongCustomerName));
  j.at("DRIdentityID").get_to(p.DRIdentityID);
  j.at("SecFutureSerial").get_to(p.SecFutureSerial);

}



void to_json(json& j, const CThostFtdcExitEmergencyField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
  };
}

void from_json(const json& j, CThostFtdcExitEmergencyField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));

}



void to_json(json& j, const CThostFtdcInvestorPortfMarginModelField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"MarginModelID", codec_convert("UTF-8//TRANSLIT", "GBK", p.MarginModelID)},
  };
}

void from_json(const json& j, CThostFtdcInvestorPortfMarginModelField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("MarginModelID").get_ref<const std::string &>();
  std::strncpy(p.MarginModelID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.MarginModelID));

}



void to_json(json& j, const CThostFtdcInvestorPortfSettingField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"HedgeFlag", std::string(1, p.HedgeFlag)},
           {"UsePortf", p.UsePortf},
  };
}

void from_json(const json& j, CThostFtdcInvestorPortfSettingField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v3 = j.at("HedgeFlag").get_ref<const std::string &>();
  p.HedgeFlag = v3.at(0);
  j.at("UsePortf").get_to(p.UsePortf);

}



void to_json(json& j, const CThostFtdcQryInvestorPortfSettingField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
  };
}

void from_json(const json& j, CThostFtdcQryInvestorPortfSettingField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorID));

}



void to_json(json& j, const CThostFtdcUserPasswordUpdateFromSecField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"OldPassword", codec_convert("UTF-8//TRANSLIT", "GBK", p.OldPassword)},
           {"NewPassword", codec_convert("UTF-8//TRANSLIT", "GBK", p.NewPassword)},
           {"FromSec", p.FromSec},
  };
}

void from_json(const json& j, CThostFtdcUserPasswordUpdateFromSecField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.UserID));
  auto &v2 = j.at("OldPassword").get_ref<const std::string &>();
  std::strncpy(p.OldPassword, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.OldPassword));
  auto &v3 = j.at("NewPassword").get_ref<const std::string &>();
  std::strncpy(p.NewPassword, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.NewPassword));
  j.at("FromSec").get_to(p.FromSec);

}



void to_json(json& j, const CThostFtdcSettlementInfoConfirmFromSecField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"ConfirmDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.ConfirmDate)},
           {"ConfirmTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.ConfirmTime)},
           {"FromSec", p.FromSec},
  };
}

void from_json(const json& j, CThostFtdcSettlementInfoConfirmFromSecField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("ConfirmDate").get_ref<const std::string &>();
  std::strncpy(p.ConfirmDate, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ConfirmDate));
  auto &v3 = j.at("ConfirmTime").get_ref<const std::string &>();
  std::strncpy(p.ConfirmTime, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.ConfirmTime));
  j.at("FromSec").get_to(p.FromSec);

}



void to_json(json& j, const CThostFtdcTradingAccountPasswordUpdateFromSecField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"AccountID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AccountID)},
           {"OldPassword", codec_convert("UTF-8//TRANSLIT", "GBK", p.OldPassword)},
           {"NewPassword", codec_convert("UTF-8//TRANSLIT", "GBK", p.NewPassword)},
           {"CurrencyID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CurrencyID)},
           {"FromSec", p.FromSec},
  };
}

void from_json(const json& j, CThostFtdcTradingAccountPasswordUpdateFromSecField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("AccountID").get_ref<const std::string &>();
  std::strncpy(p.AccountID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.AccountID));
  auto &v2 = j.at("OldPassword").get_ref<const std::string &>();
  std::strncpy(p.OldPassword, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.OldPassword));
  auto &v3 = j.at("NewPassword").get_ref<const std::string &>();
  std::strncpy(p.NewPassword, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.NewPassword));
  auto &v4 = j.at("CurrencyID").get_ref<const std::string &>();
  std::strncpy(p.CurrencyID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.CurrencyID));
  j.at("FromSec").get_to(p.FromSec);

}



void to_json(json& j, const CThostFtdcRiskForbiddenRightField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
  };
}

void from_json(const json& j, CThostFtdcRiskForbiddenRightField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v3 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.UserID));

}



void to_json(json& j, const CThostFtdcInvestorInfoCommRecField& p) {
  j = json{
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"OrderCount", p.OrderCount},
           {"OrderActionCount", p.OrderActionCount},
           {"ForQuoteCnt", p.ForQuoteCnt},
           {"InfoComm", p.InfoComm},
           {"IsOptSeries", p.IsOptSeries},
           {"ProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductID)},
           {"InfoCnt", p.InfoCnt},
  };
}

void from_json(const json& j, CThostFtdcInvestorInfoCommRecField& p) {
  auto &v0 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v1 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v2 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v3 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.InstrumentID));
  j.at("OrderCount").get_to(p.OrderCount);
  j.at("OrderActionCount").get_to(p.OrderActionCount);
  j.at("ForQuoteCnt").get_to(p.ForQuoteCnt);
  j.at("InfoComm").get_to(p.InfoComm);
  j.at("IsOptSeries").get_to(p.IsOptSeries);
  auto &v9 = j.at("ProductID").get_ref<const std::string &>();
  std::strncpy(p.ProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.ProductID));
  j.at("InfoCnt").get_to(p.InfoCnt);

}



void to_json(json& j, const CThostFtdcQryInvestorInfoCommRecField& p) {
  j = json{
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
  };
}

void from_json(const json& j, CThostFtdcQryInvestorInfoCommRecField& p) {
  auto &v0 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v1 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v2 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.BrokerID));

}



void to_json(json& j, const CThostFtdcCombLegField& p) {
  j = json{
           {"CombInstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.CombInstrumentID)},
           {"LegID", p.LegID},
           {"LegInstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.LegInstrumentID)},
           {"Direction", std::string(1, p.Direction)},
           {"LegMultiple", p.LegMultiple},
           {"ImplyLevel", p.ImplyLevel},
  };
}

void from_json(const json& j, CThostFtdcCombLegField& p) {
  auto &v0 = j.at("CombInstrumentID").get_ref<const std::string &>();
  std::strncpy(p.CombInstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.CombInstrumentID));
  j.at("LegID").get_to(p.LegID);
  auto &v2 = j.at("LegInstrumentID").get_ref<const std::string &>();
  std::strncpy(p.LegInstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.LegInstrumentID));
  auto &v3 = j.at("Direction").get_ref<const std::string &>();
  p.Direction = v3.at(0);
  j.at("LegMultiple").get_to(p.LegMultiple);
  j.at("ImplyLevel").get_to(p.ImplyLevel);

}



void to_json(json& j, const CThostFtdcQryCombLegField& p) {
  j = json{
           {"LegInstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.LegInstrumentID)},
  };
}

void from_json(const json& j, CThostFtdcQryCombLegField& p) {
  auto &v0 = j.at("LegInstrumentID").get_ref<const std::string &>();
  std::strncpy(p.LegInstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.LegInstrumentID));

}



void to_json(json& j, const CThostFtdcInputOffsetSettingField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"UnderlyingInstrID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UnderlyingInstrID)},
           {"ProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductID)},
           {"OffsetType", std::string(1, p.OffsetType)},
           {"Volume", p.Volume},
           {"IsOffset", p.IsOffset},
           {"RequestID", p.RequestID},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
  };
}

void from_json(const json& j, CThostFtdcInputOffsetSettingField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v3 = j.at("UnderlyingInstrID").get_ref<const std::string &>();
  std::strncpy(p.UnderlyingInstrID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.UnderlyingInstrID));
  auto &v4 = j.at("ProductID").get_ref<const std::string &>();
  std::strncpy(p.ProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.ProductID));
  auto &v5 = j.at("OffsetType").get_ref<const std::string &>();
  p.OffsetType = v5.at(0);
  j.at("Volume").get_to(p.Volume);
  j.at("IsOffset").get_to(p.IsOffset);
  j.at("RequestID").get_to(p.RequestID);
  auto &v9 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.UserID));
  auto &v10 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v11 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.IPAddress));
  auto &v12 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.MacAddress));

}



void to_json(json& j, const CThostFtdcOffsetSettingField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"UnderlyingInstrID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UnderlyingInstrID)},
           {"ProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductID)},
           {"OffsetType", std::string(1, p.OffsetType)},
           {"Volume", p.Volume},
           {"IsOffset", p.IsOffset},
           {"RequestID", p.RequestID},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"ExchangeInstID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeInstID)},
           {"ExchangeSerialNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeSerialNo)},
           {"ExchangeProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeProductID)},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"InstallID", p.InstallID},
           {"OrderSubmitStatus", std::string(1, p.OrderSubmitStatus)},
           {"TradingDay", codec_convert("UTF-8//TRANSLIT", "GBK", p.TradingDay)},
           {"SettlementID", p.SettlementID},
           {"InsertDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.InsertDate)},
           {"InsertTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.InsertTime)},
           {"CancelTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.CancelTime)},
           {"ExecResult", std::string(1, p.ExecResult)},
           {"SequenceNo", p.SequenceNo},
           {"FrontID", p.FrontID},
           {"SessionID", p.SessionID},
           {"StatusMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.StatusMsg)},
           {"ActiveUserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActiveUserID)},
           {"BrokerOffsetSettingSeq", p.BrokerOffsetSettingSeq},
  };
}

void from_json(const json& j, CThostFtdcOffsetSettingField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v3 = j.at("UnderlyingInstrID").get_ref<const std::string &>();
  std::strncpy(p.UnderlyingInstrID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.UnderlyingInstrID));
  auto &v4 = j.at("ProductID").get_ref<const std::string &>();
  std::strncpy(p.ProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.ProductID));
  auto &v5 = j.at("OffsetType").get_ref<const std::string &>();
  p.OffsetType = v5.at(0);
  j.at("Volume").get_to(p.Volume);
  j.at("IsOffset").get_to(p.IsOffset);
  j.at("RequestID").get_to(p.RequestID);
  auto &v9 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.UserID));
  auto &v10 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v11 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.IPAddress));
  auto &v12 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v13 = j.at("ExchangeInstID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeInstID, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.ExchangeInstID));
  auto &v14 = j.at("ExchangeSerialNo").get_ref<const std::string &>();
  std::strncpy(p.ExchangeSerialNo, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.ExchangeSerialNo));
  auto &v15 = j.at("ExchangeProductID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.ExchangeProductID));
  auto &v16 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v17 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v17.c_str()).c_str(), sizeof(p.ClientID));
  auto &v18 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.TraderID));
  j.at("InstallID").get_to(p.InstallID);
  auto &v20 = j.at("OrderSubmitStatus").get_ref<const std::string &>();
  p.OrderSubmitStatus = v20.at(0);
  auto &v21 = j.at("TradingDay").get_ref<const std::string &>();
  std::strncpy(p.TradingDay, codec_convert("GBK//TRANSLIT", "UTF-8", v21.c_str()).c_str(), sizeof(p.TradingDay));
  j.at("SettlementID").get_to(p.SettlementID);
  auto &v23 = j.at("InsertDate").get_ref<const std::string &>();
  std::strncpy(p.InsertDate, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.InsertDate));
  auto &v24 = j.at("InsertTime").get_ref<const std::string &>();
  std::strncpy(p.InsertTime, codec_convert("GBK//TRANSLIT", "UTF-8", v24.c_str()).c_str(), sizeof(p.InsertTime));
  auto &v25 = j.at("CancelTime").get_ref<const std::string &>();
  std::strncpy(p.CancelTime, codec_convert("GBK//TRANSLIT", "UTF-8", v25.c_str()).c_str(), sizeof(p.CancelTime));
  auto &v26 = j.at("ExecResult").get_ref<const std::string &>();
  p.ExecResult = v26.at(0);
  j.at("SequenceNo").get_to(p.SequenceNo);
  j.at("FrontID").get_to(p.FrontID);
  j.at("SessionID").get_to(p.SessionID);
  auto &v30 = j.at("StatusMsg").get_ref<const std::string &>();
  std::strncpy(p.StatusMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v30.c_str()).c_str(), sizeof(p.StatusMsg));
  auto &v31 = j.at("ActiveUserID").get_ref<const std::string &>();
  std::strncpy(p.ActiveUserID, codec_convert("GBK//TRANSLIT", "UTF-8", v31.c_str()).c_str(), sizeof(p.ActiveUserID));
  j.at("BrokerOffsetSettingSeq").get_to(p.BrokerOffsetSettingSeq);

}



void to_json(json& j, const CThostFtdcCancelOffsetSettingField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"InstrumentID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InstrumentID)},
           {"UnderlyingInstrID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UnderlyingInstrID)},
           {"ProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductID)},
           {"OffsetType", std::string(1, p.OffsetType)},
           {"Volume", p.Volume},
           {"IsOffset", p.IsOffset},
           {"RequestID", p.RequestID},
           {"UserID", codec_convert("UTF-8//TRANSLIT", "GBK", p.UserID)},
           {"ExchangeID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeID)},
           {"IPAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.IPAddress)},
           {"MacAddress", codec_convert("UTF-8//TRANSLIT", "GBK", p.MacAddress)},
           {"ExchangeInstID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeInstID)},
           {"ExchangeSerialNo", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeSerialNo)},
           {"ExchangeProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ExchangeProductID)},
           {"TraderID", codec_convert("UTF-8//TRANSLIT", "GBK", p.TraderID)},
           {"InstallID", p.InstallID},
           {"ParticipantID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ParticipantID)},
           {"ClientID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ClientID)},
           {"OrderActionStatus", std::string(1, p.OrderActionStatus)},
           {"StatusMsg", codec_convert("UTF-8//TRANSLIT", "GBK", p.StatusMsg)},
           {"ActionLocalID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionLocalID)},
           {"ActionDate", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionDate)},
           {"ActionTime", codec_convert("UTF-8//TRANSLIT", "GBK", p.ActionTime)},
  };
}

void from_json(const json& j, CThostFtdcCancelOffsetSettingField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("InstrumentID").get_ref<const std::string &>();
  std::strncpy(p.InstrumentID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.InstrumentID));
  auto &v3 = j.at("UnderlyingInstrID").get_ref<const std::string &>();
  std::strncpy(p.UnderlyingInstrID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.UnderlyingInstrID));
  auto &v4 = j.at("ProductID").get_ref<const std::string &>();
  std::strncpy(p.ProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v4.c_str()).c_str(), sizeof(p.ProductID));
  auto &v5 = j.at("OffsetType").get_ref<const std::string &>();
  p.OffsetType = v5.at(0);
  j.at("Volume").get_to(p.Volume);
  j.at("IsOffset").get_to(p.IsOffset);
  j.at("RequestID").get_to(p.RequestID);
  auto &v9 = j.at("UserID").get_ref<const std::string &>();
  std::strncpy(p.UserID, codec_convert("GBK//TRANSLIT", "UTF-8", v9.c_str()).c_str(), sizeof(p.UserID));
  auto &v10 = j.at("ExchangeID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeID, codec_convert("GBK//TRANSLIT", "UTF-8", v10.c_str()).c_str(), sizeof(p.ExchangeID));
  auto &v11 = j.at("IPAddress").get_ref<const std::string &>();
  std::strncpy(p.IPAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v11.c_str()).c_str(), sizeof(p.IPAddress));
  auto &v12 = j.at("MacAddress").get_ref<const std::string &>();
  std::strncpy(p.MacAddress, codec_convert("GBK//TRANSLIT", "UTF-8", v12.c_str()).c_str(), sizeof(p.MacAddress));
  auto &v13 = j.at("ExchangeInstID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeInstID, codec_convert("GBK//TRANSLIT", "UTF-8", v13.c_str()).c_str(), sizeof(p.ExchangeInstID));
  auto &v14 = j.at("ExchangeSerialNo").get_ref<const std::string &>();
  std::strncpy(p.ExchangeSerialNo, codec_convert("GBK//TRANSLIT", "UTF-8", v14.c_str()).c_str(), sizeof(p.ExchangeSerialNo));
  auto &v15 = j.at("ExchangeProductID").get_ref<const std::string &>();
  std::strncpy(p.ExchangeProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v15.c_str()).c_str(), sizeof(p.ExchangeProductID));
  auto &v16 = j.at("TraderID").get_ref<const std::string &>();
  std::strncpy(p.TraderID, codec_convert("GBK//TRANSLIT", "UTF-8", v16.c_str()).c_str(), sizeof(p.TraderID));
  j.at("InstallID").get_to(p.InstallID);
  auto &v18 = j.at("ParticipantID").get_ref<const std::string &>();
  std::strncpy(p.ParticipantID, codec_convert("GBK//TRANSLIT", "UTF-8", v18.c_str()).c_str(), sizeof(p.ParticipantID));
  auto &v19 = j.at("ClientID").get_ref<const std::string &>();
  std::strncpy(p.ClientID, codec_convert("GBK//TRANSLIT", "UTF-8", v19.c_str()).c_str(), sizeof(p.ClientID));
  auto &v20 = j.at("OrderActionStatus").get_ref<const std::string &>();
  p.OrderActionStatus = v20.at(0);
  auto &v21 = j.at("StatusMsg").get_ref<const std::string &>();
  std::strncpy(p.StatusMsg, codec_convert("GBK//TRANSLIT", "UTF-8", v21.c_str()).c_str(), sizeof(p.StatusMsg));
  auto &v22 = j.at("ActionLocalID").get_ref<const std::string &>();
  std::strncpy(p.ActionLocalID, codec_convert("GBK//TRANSLIT", "UTF-8", v22.c_str()).c_str(), sizeof(p.ActionLocalID));
  auto &v23 = j.at("ActionDate").get_ref<const std::string &>();
  std::strncpy(p.ActionDate, codec_convert("GBK//TRANSLIT", "UTF-8", v23.c_str()).c_str(), sizeof(p.ActionDate));
  auto &v24 = j.at("ActionTime").get_ref<const std::string &>();
  std::strncpy(p.ActionTime, codec_convert("GBK//TRANSLIT", "UTF-8", v24.c_str()).c_str(), sizeof(p.ActionTime));

}



void to_json(json& j, const CThostFtdcQryOffsetSettingField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"InvestorID", codec_convert("UTF-8//TRANSLIT", "GBK", p.InvestorID)},
           {"ProductID", codec_convert("UTF-8//TRANSLIT", "GBK", p.ProductID)},
           {"OffsetType", std::string(1, p.OffsetType)},
  };
}

void from_json(const json& j, CThostFtdcQryOffsetSettingField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("InvestorID").get_ref<const std::string &>();
  std::strncpy(p.InvestorID, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.InvestorID));
  auto &v2 = j.at("ProductID").get_ref<const std::string &>();
  std::strncpy(p.ProductID, codec_convert("GBK//TRANSLIT", "UTF-8", v2.c_str()).c_str(), sizeof(p.ProductID));
  auto &v3 = j.at("OffsetType").get_ref<const std::string &>();
  p.OffsetType = v3.at(0);

}



void to_json(json& j, const CThostFtdcAddrAppIDRelationField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
           {"Address", codec_convert("UTF-8//TRANSLIT", "GBK", p.Address)},
           {"DRIdentityID", p.DRIdentityID},
           {"AppID", codec_convert("UTF-8//TRANSLIT", "GBK", p.AppID)},
  };
}

void from_json(const json& j, CThostFtdcAddrAppIDRelationField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));
  auto &v1 = j.at("Address").get_ref<const std::string &>();
  std::strncpy(p.Address, codec_convert("GBK//TRANSLIT", "UTF-8", v1.c_str()).c_str(), sizeof(p.Address));
  j.at("DRIdentityID").get_to(p.DRIdentityID);
  auto &v3 = j.at("AppID").get_ref<const std::string &>();
  std::strncpy(p.AppID, codec_convert("GBK//TRANSLIT", "UTF-8", v3.c_str()).c_str(), sizeof(p.AppID));

}



void to_json(json& j, const CThostFtdcQryAddrAppIDRelationField& p) {
  j = json{
           {"BrokerID", codec_convert("UTF-8//TRANSLIT", "GBK", p.BrokerID)},
  };
}

void from_json(const json& j, CThostFtdcQryAddrAppIDRelationField& p) {
  auto &v0 = j.at("BrokerID").get_ref<const std::string &>();
  std::strncpy(p.BrokerID, codec_convert("GBK//TRANSLIT", "UTF-8", v0.c_str()).c_str(), sizeof(p.BrokerID));

}



void to_json(json& j, const CThostFtdcFrontInfoField& p) {
  j = json{
           {"QryFreq", p.QryFreq},
           {"FTDPkgFreq", p.FTDPkgFreq},
  };
}

void from_json(const json& j, CThostFtdcFrontInfoField& p) {
  j.at("QryFreq").get_to(p.QryFreq);
  j.at("FTDPkgFreq").get_to(p.FTDPkgFreq);

}



Bridge::Bridge(zmq::context_t *ctx) : trader_api_(CThostFtdcTraderApi::CreateFtdcTraderApi()), md_api_(nullptr) {

  char *trader_addr = getenv("TRADER_ADDR");

  push_sock_ = zmq::socket_t(*ctx, zmq::socket_type::push);

  const char *pull_url = getenv("ZMQ_PULL_URL");

  std::string pull_endpoint = pull_url != nullptr ? pull_url : "tcp://127.0.0.1:5700";

  auto star_pos = pull_endpoint.find('*');

  if (star_pos != std::string::npos) {

    pull_endpoint.replace(star_pos, 1, "127.0.0.1");

  }

  push_sock_.connect(pull_endpoint);

  pull_sock_ = zmq::socket_t(*ctx, zmq::socket_type::pull);

  pull_sock_.connect("tcp://localhost:5701");

  spdlog::info("Init, connecting trader addr: {}", trader_addr);

  trader_api_->RegisterSpi(this);

  trader_api_->SubscribePublicTopic(THOST_TERT_QUICK);

  trader_api_->SubscribePrivateTopic(THOST_TERT_QUICK);

  trader_api_->RegisterFront(trader_addr);

  trader_api_->Init();

}



void Bridge::SetMdApi(CThostFtdcMdApi *md_api) {

  md_api_ = md_api;

}



/* 登出请求响应 */
void Bridge::OnRspUserLogout(CThostFtdcUserLogoutField *pUserLogout, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspUserLogout",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pUserLogout != nullptr) {
    j["res"]["value"] = *pUserLogout;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 用户口令更新请求响应 */
void Bridge::OnRspUserPasswordUpdate(CThostFtdcUserPasswordUpdateField *pUserPasswordUpdate, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspUserPasswordUpdate",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pUserPasswordUpdate != nullptr) {
    j["res"]["value"] = *pUserPasswordUpdate;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 资金账户口令更新请求响应 */
void Bridge::OnRspTradingAccountPasswordUpdate(CThostFtdcTradingAccountPasswordUpdateField *pTradingAccountPasswordUpdate, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspTradingAccountPasswordUpdate",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pTradingAccountPasswordUpdate != nullptr) {
    j["res"]["value"] = *pTradingAccountPasswordUpdate;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 查询用户当前支持的认证模式的回复 */
void Bridge::OnRspUserAuthMethod(CThostFtdcRspUserAuthMethodField *pRspUserAuthMethod, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspUserAuthMethod",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pRspUserAuthMethod != nullptr) {
    j["res"]["value"] = *pRspUserAuthMethod;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 获取图形验证码请求的回复 */
void Bridge::OnRspGenUserCaptcha(CThostFtdcRspGenUserCaptchaField *pRspGenUserCaptcha, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspGenUserCaptcha",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pRspGenUserCaptcha != nullptr) {
    j["res"]["value"] = *pRspGenUserCaptcha;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 获取短信验证码请求的回复 */
void Bridge::OnRspGenUserText(CThostFtdcRspGenUserTextField *pRspGenUserText, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspGenUserText",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pRspGenUserText != nullptr) {
    j["res"]["value"] = *pRspGenUserText;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 报单录入请求响应 */
void Bridge::OnRspOrderInsert(CThostFtdcInputOrderField *pInputOrder, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspOrderInsert",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pInputOrder != nullptr) {
    j["res"]["value"] = *pInputOrder;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 预埋单录入请求响应 */
void Bridge::OnRspParkedOrderInsert(CThostFtdcParkedOrderField *pParkedOrder, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspParkedOrderInsert",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pParkedOrder != nullptr) {
    j["res"]["value"] = *pParkedOrder;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 预埋撤单录入请求响应 */
void Bridge::OnRspParkedOrderAction(CThostFtdcParkedOrderActionField *pParkedOrderAction, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspParkedOrderAction",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pParkedOrderAction != nullptr) {
    j["res"]["value"] = *pParkedOrderAction;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 报单操作请求响应 */
void Bridge::OnRspOrderAction(CThostFtdcInputOrderActionField *pInputOrderAction, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspOrderAction",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pInputOrderAction != nullptr) {
    j["res"]["value"] = *pInputOrderAction;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 查询最大报单数量响应 */
void Bridge::OnRspQryMaxOrderVolume(CThostFtdcQryMaxOrderVolumeField *pQryMaxOrderVolume, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryMaxOrderVolume",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pQryMaxOrderVolume != nullptr) {
    j["res"]["value"] = *pQryMaxOrderVolume;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 投资者结算结果确认响应 */
void Bridge::OnRspSettlementInfoConfirm(CThostFtdcSettlementInfoConfirmField *pSettlementInfoConfirm, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspSettlementInfoConfirm",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pSettlementInfoConfirm != nullptr) {
    j["res"]["value"] = *pSettlementInfoConfirm;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 删除预埋单响应 */
void Bridge::OnRspRemoveParkedOrder(CThostFtdcRemoveParkedOrderField *pRemoveParkedOrder, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspRemoveParkedOrder",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pRemoveParkedOrder != nullptr) {
    j["res"]["value"] = *pRemoveParkedOrder;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 删除预埋撤单响应 */
void Bridge::OnRspRemoveParkedOrderAction(CThostFtdcRemoveParkedOrderActionField *pRemoveParkedOrderAction, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspRemoveParkedOrderAction",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pRemoveParkedOrderAction != nullptr) {
    j["res"]["value"] = *pRemoveParkedOrderAction;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 执行宣告录入请求响应 */
void Bridge::OnRspExecOrderInsert(CThostFtdcInputExecOrderField *pInputExecOrder, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspExecOrderInsert",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pInputExecOrder != nullptr) {
    j["res"]["value"] = *pInputExecOrder;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 执行宣告操作请求响应 */
void Bridge::OnRspExecOrderAction(CThostFtdcInputExecOrderActionField *pInputExecOrderAction, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspExecOrderAction",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pInputExecOrderAction != nullptr) {
    j["res"]["value"] = *pInputExecOrderAction;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 询价录入请求响应 */
void Bridge::OnRspForQuoteInsert(CThostFtdcInputForQuoteField *pInputForQuote, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspForQuoteInsert",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pInputForQuote != nullptr) {
    j["res"]["value"] = *pInputForQuote;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 报价录入请求响应 */
void Bridge::OnRspQuoteInsert(CThostFtdcInputQuoteField *pInputQuote, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQuoteInsert",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pInputQuote != nullptr) {
    j["res"]["value"] = *pInputQuote;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 报价操作请求响应 */
void Bridge::OnRspQuoteAction(CThostFtdcInputQuoteActionField *pInputQuoteAction, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQuoteAction",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pInputQuoteAction != nullptr) {
    j["res"]["value"] = *pInputQuoteAction;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 批量报单操作请求响应 */
void Bridge::OnRspBatchOrderAction(CThostFtdcInputBatchOrderActionField *pInputBatchOrderAction, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspBatchOrderAction",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pInputBatchOrderAction != nullptr) {
    j["res"]["value"] = *pInputBatchOrderAction;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 期权自对冲录入请求响应 */
void Bridge::OnRspOptionSelfCloseInsert(CThostFtdcInputOptionSelfCloseField *pInputOptionSelfClose, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspOptionSelfCloseInsert",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pInputOptionSelfClose != nullptr) {
    j["res"]["value"] = *pInputOptionSelfClose;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 期权自对冲操作请求响应 */
void Bridge::OnRspOptionSelfCloseAction(CThostFtdcInputOptionSelfCloseActionField *pInputOptionSelfCloseAction, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspOptionSelfCloseAction",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pInputOptionSelfCloseAction != nullptr) {
    j["res"]["value"] = *pInputOptionSelfCloseAction;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 申请组合录入请求响应 */
void Bridge::OnRspCombActionInsert(CThostFtdcInputCombActionField *pInputCombAction, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspCombActionInsert",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pInputCombAction != nullptr) {
    j["res"]["value"] = *pInputCombAction;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询报单响应 */
void Bridge::OnRspQryOrder(CThostFtdcOrderField *pOrder, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryOrder",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pOrder != nullptr) {
    j["res"]["value"] = *pOrder;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询成交响应 */
void Bridge::OnRspQryTrade(CThostFtdcTradeField *pTrade, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryTrade",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pTrade != nullptr) {
    j["res"]["value"] = *pTrade;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询投资者持仓响应 */
void Bridge::OnRspQryInvestorPosition(CThostFtdcInvestorPositionField *pInvestorPosition, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryInvestorPosition",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pInvestorPosition != nullptr) {
    j["res"]["value"] = *pInvestorPosition;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询资金账户响应 */
void Bridge::OnRspQryTradingAccount(CThostFtdcTradingAccountField *pTradingAccount, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryTradingAccount",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pTradingAccount != nullptr) {
    j["res"]["value"] = *pTradingAccount;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询投资者响应 */
void Bridge::OnRspQryInvestor(CThostFtdcInvestorField *pInvestor, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryInvestor",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pInvestor != nullptr) {
    j["res"]["value"] = *pInvestor;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询交易编码响应 */
void Bridge::OnRspQryTradingCode(CThostFtdcTradingCodeField *pTradingCode, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryTradingCode",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pTradingCode != nullptr) {
    j["res"]["value"] = *pTradingCode;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询合约保证金率响应 */
void Bridge::OnRspQryInstrumentMarginRate(CThostFtdcInstrumentMarginRateField *pInstrumentMarginRate, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryInstrumentMarginRate",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pInstrumentMarginRate != nullptr) {
    j["res"]["value"] = *pInstrumentMarginRate;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询合约手续费率响应 */
void Bridge::OnRspQryInstrumentCommissionRate(CThostFtdcInstrumentCommissionRateField *pInstrumentCommissionRate, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryInstrumentCommissionRate",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pInstrumentCommissionRate != nullptr) {
    j["res"]["value"] = *pInstrumentCommissionRate;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询交易所响应 */
void Bridge::OnRspQryExchange(CThostFtdcExchangeField *pExchange, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryExchange",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pExchange != nullptr) {
    j["res"]["value"] = *pExchange;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询产品响应 */
void Bridge::OnRspQryProduct(CThostFtdcProductField *pProduct, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryProduct",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pProduct != nullptr) {
    j["res"]["value"] = *pProduct;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询合约响应 */
void Bridge::OnRspQryInstrument(CThostFtdcInstrumentField *pInstrument, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryInstrument",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pInstrument != nullptr) {
    j["res"]["value"] = *pInstrument;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询行情响应 */
void Bridge::OnRspQryDepthMarketData(CThostFtdcDepthMarketDataField *pDepthMarketData, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryDepthMarketData",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pDepthMarketData != nullptr) {
    j["res"]["value"] = *pDepthMarketData;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询交易员报盘机响应 */
void Bridge::OnRspQryTraderOffer(CThostFtdcTraderOfferField *pTraderOffer, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryTraderOffer",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pTraderOffer != nullptr) {
    j["res"]["value"] = *pTraderOffer;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询投资者结算结果响应 */
void Bridge::OnRspQrySettlementInfo(CThostFtdcSettlementInfoField *pSettlementInfo, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQrySettlementInfo",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pSettlementInfo != nullptr) {
    j["res"]["value"] = *pSettlementInfo;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询转帐银行响应 */
void Bridge::OnRspQryTransferBank(CThostFtdcTransferBankField *pTransferBank, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryTransferBank",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pTransferBank != nullptr) {
    j["res"]["value"] = *pTransferBank;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询投资者持仓明细响应 */
void Bridge::OnRspQryInvestorPositionDetail(CThostFtdcInvestorPositionDetailField *pInvestorPositionDetail, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryInvestorPositionDetail",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pInvestorPositionDetail != nullptr) {
    j["res"]["value"] = *pInvestorPositionDetail;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询客户通知响应 */
void Bridge::OnRspQryNotice(CThostFtdcNoticeField *pNotice, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryNotice",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pNotice != nullptr) {
    j["res"]["value"] = *pNotice;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询结算信息确认响应 */
void Bridge::OnRspQrySettlementInfoConfirm(CThostFtdcSettlementInfoConfirmField *pSettlementInfoConfirm, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQrySettlementInfoConfirm",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pSettlementInfoConfirm != nullptr) {
    j["res"]["value"] = *pSettlementInfoConfirm;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询投资者持仓明细响应 */
void Bridge::OnRspQryInvestorPositionCombineDetail(CThostFtdcInvestorPositionCombineDetailField *pInvestorPositionCombineDetail, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryInvestorPositionCombineDetail",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pInvestorPositionCombineDetail != nullptr) {
    j["res"]["value"] = *pInvestorPositionCombineDetail;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 查询保证金监管系统经纪公司资金账户密钥响应 */
void Bridge::OnRspQryCFMMCTradingAccountKey(CThostFtdcCFMMCTradingAccountKeyField *pCFMMCTradingAccountKey, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryCFMMCTradingAccountKey",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pCFMMCTradingAccountKey != nullptr) {
    j["res"]["value"] = *pCFMMCTradingAccountKey;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询仓单折抵信息响应 */
void Bridge::OnRspQryEWarrantOffset(CThostFtdcEWarrantOffsetField *pEWarrantOffset, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryEWarrantOffset",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pEWarrantOffset != nullptr) {
    j["res"]["value"] = *pEWarrantOffset;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询投资者品种/跨品种保证金响应 */
void Bridge::OnRspQryInvestorProductGroupMargin(CThostFtdcInvestorProductGroupMarginField *pInvestorProductGroupMargin, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryInvestorProductGroupMargin",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pInvestorProductGroupMargin != nullptr) {
    j["res"]["value"] = *pInvestorProductGroupMargin;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询交易所保证金率响应 */
void Bridge::OnRspQryExchangeMarginRate(CThostFtdcExchangeMarginRateField *pExchangeMarginRate, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryExchangeMarginRate",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pExchangeMarginRate != nullptr) {
    j["res"]["value"] = *pExchangeMarginRate;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询交易所调整保证金率响应 */
void Bridge::OnRspQryExchangeMarginRateAdjust(CThostFtdcExchangeMarginRateAdjustField *pExchangeMarginRateAdjust, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryExchangeMarginRateAdjust",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pExchangeMarginRateAdjust != nullptr) {
    j["res"]["value"] = *pExchangeMarginRateAdjust;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询汇率响应 */
void Bridge::OnRspQryExchangeRate(CThostFtdcExchangeRateField *pExchangeRate, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryExchangeRate",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pExchangeRate != nullptr) {
    j["res"]["value"] = *pExchangeRate;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询二级代理操作员银期权限响应 */
void Bridge::OnRspQrySecAgentACIDMap(CThostFtdcSecAgentACIDMapField *pSecAgentACIDMap, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQrySecAgentACIDMap",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pSecAgentACIDMap != nullptr) {
    j["res"]["value"] = *pSecAgentACIDMap;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询产品报价汇率 */
void Bridge::OnRspQryProductExchRate(CThostFtdcProductExchRateField *pProductExchRate, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryProductExchRate",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pProductExchRate != nullptr) {
    j["res"]["value"] = *pProductExchRate;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询产品组 */
void Bridge::OnRspQryProductGroup(CThostFtdcProductGroupField *pProductGroup, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryProductGroup",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pProductGroup != nullptr) {
    j["res"]["value"] = *pProductGroup;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询做市商合约手续费率响应 */
void Bridge::OnRspQryMMInstrumentCommissionRate(CThostFtdcMMInstrumentCommissionRateField *pMMInstrumentCommissionRate, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryMMInstrumentCommissionRate",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pMMInstrumentCommissionRate != nullptr) {
    j["res"]["value"] = *pMMInstrumentCommissionRate;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询做市商期权合约手续费响应 */
void Bridge::OnRspQryMMOptionInstrCommRate(CThostFtdcMMOptionInstrCommRateField *pMMOptionInstrCommRate, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryMMOptionInstrCommRate",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pMMOptionInstrCommRate != nullptr) {
    j["res"]["value"] = *pMMOptionInstrCommRate;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询报单手续费响应 */
void Bridge::OnRspQryInstrumentOrderCommRate(CThostFtdcInstrumentOrderCommRateField *pInstrumentOrderCommRate, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryInstrumentOrderCommRate",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pInstrumentOrderCommRate != nullptr) {
    j["res"]["value"] = *pInstrumentOrderCommRate;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询资金账户响应 */
void Bridge::OnRspQrySecAgentTradingAccount(CThostFtdcTradingAccountField *pTradingAccount, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQrySecAgentTradingAccount",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pTradingAccount != nullptr) {
    j["res"]["value"] = *pTradingAccount;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询二级代理商资金校验模式响应 */
void Bridge::OnRspQrySecAgentCheckMode(CThostFtdcSecAgentCheckModeField *pSecAgentCheckMode, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQrySecAgentCheckMode",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pSecAgentCheckMode != nullptr) {
    j["res"]["value"] = *pSecAgentCheckMode;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询二级代理商信息响应 */
void Bridge::OnRspQrySecAgentTradeInfo(CThostFtdcSecAgentTradeInfoField *pSecAgentTradeInfo, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQrySecAgentTradeInfo",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pSecAgentTradeInfo != nullptr) {
    j["res"]["value"] = *pSecAgentTradeInfo;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询期权交易成本响应 */
void Bridge::OnRspQryOptionInstrTradeCost(CThostFtdcOptionInstrTradeCostField *pOptionInstrTradeCost, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryOptionInstrTradeCost",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pOptionInstrTradeCost != nullptr) {
    j["res"]["value"] = *pOptionInstrTradeCost;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询期权合约手续费响应 */
void Bridge::OnRspQryOptionInstrCommRate(CThostFtdcOptionInstrCommRateField *pOptionInstrCommRate, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryOptionInstrCommRate",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pOptionInstrCommRate != nullptr) {
    j["res"]["value"] = *pOptionInstrCommRate;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询执行宣告响应 */
void Bridge::OnRspQryExecOrder(CThostFtdcExecOrderField *pExecOrder, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryExecOrder",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pExecOrder != nullptr) {
    j["res"]["value"] = *pExecOrder;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询询价响应 */
void Bridge::OnRspQryForQuote(CThostFtdcForQuoteField *pForQuote, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryForQuote",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pForQuote != nullptr) {
    j["res"]["value"] = *pForQuote;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询报价响应 */
void Bridge::OnRspQryQuote(CThostFtdcQuoteField *pQuote, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryQuote",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pQuote != nullptr) {
    j["res"]["value"] = *pQuote;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询期权自对冲响应 */
void Bridge::OnRspQryOptionSelfClose(CThostFtdcOptionSelfCloseField *pOptionSelfClose, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryOptionSelfClose",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pOptionSelfClose != nullptr) {
    j["res"]["value"] = *pOptionSelfClose;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询投资单元响应 */
void Bridge::OnRspQryInvestUnit(CThostFtdcInvestUnitField *pInvestUnit, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryInvestUnit",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pInvestUnit != nullptr) {
    j["res"]["value"] = *pInvestUnit;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询组合合约安全系数响应 */
void Bridge::OnRspQryCombInstrumentGuard(CThostFtdcCombInstrumentGuardField *pCombInstrumentGuard, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryCombInstrumentGuard",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pCombInstrumentGuard != nullptr) {
    j["res"]["value"] = *pCombInstrumentGuard;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询申请组合响应 */
void Bridge::OnRspQryCombAction(CThostFtdcCombActionField *pCombAction, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryCombAction",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pCombAction != nullptr) {
    j["res"]["value"] = *pCombAction;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询转帐流水响应 */
void Bridge::OnRspQryTransferSerial(CThostFtdcTransferSerialField *pTransferSerial, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryTransferSerial",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pTransferSerial != nullptr) {
    j["res"]["value"] = *pTransferSerial;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询银期签约关系响应 */
void Bridge::OnRspQryAccountregister(CThostFtdcAccountregisterField *pAccountregister, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryAccountregister",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pAccountregister != nullptr) {
    j["res"]["value"] = *pAccountregister;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 报单通知 */
void Bridge::OnRtnOrder(CThostFtdcOrderField *pOrder) {
  Message msg = {.event = "OnRtnOrder",
                 .error_code = 0,
                 .error_message = "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pOrder != nullptr) {
    j["res"]["value"] = *pOrder;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 成交通知 */
void Bridge::OnRtnTrade(CThostFtdcTradeField *pTrade) {
  Message msg = {.event = "OnRtnTrade",
                 .error_code = 0,
                 .error_message = "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pTrade != nullptr) {
    j["res"]["value"] = *pTrade;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 报单录入错误回报 */
void Bridge::OnErrRtnOrderInsert(CThostFtdcInputOrderField *pInputOrder, CThostFtdcRspInfoField *pRspInfo) {
  Message msg = {.event = "OnErrRtnOrderInsert",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pInputOrder != nullptr) {
    j["res"]["value"] = *pInputOrder;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 报单操作错误回报 */
void Bridge::OnErrRtnOrderAction(CThostFtdcOrderActionField *pOrderAction, CThostFtdcRspInfoField *pRspInfo) {
  Message msg = {.event = "OnErrRtnOrderAction",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pOrderAction != nullptr) {
    j["res"]["value"] = *pOrderAction;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 合约交易状态通知 */
void Bridge::OnRtnInstrumentStatus(CThostFtdcInstrumentStatusField *pInstrumentStatus) {
  Message msg = {.event = "OnRtnInstrumentStatus",
                 .error_code = 0,
                 .error_message = "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pInstrumentStatus != nullptr) {
    j["res"]["value"] = *pInstrumentStatus;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 交易所公告通知 */
void Bridge::OnRtnBulletin(CThostFtdcBulletinField *pBulletin) {
  Message msg = {.event = "OnRtnBulletin",
                 .error_code = 0,
                 .error_message = "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pBulletin != nullptr) {
    j["res"]["value"] = *pBulletin;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 交易通知 */
void Bridge::OnRtnTradingNotice(CThostFtdcTradingNoticeInfoField *pTradingNoticeInfo) {
  Message msg = {.event = "OnRtnTradingNotice",
                 .error_code = 0,
                 .error_message = "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pTradingNoticeInfo != nullptr) {
    j["res"]["value"] = *pTradingNoticeInfo;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 提示条件单校验错误 */
void Bridge::OnRtnErrorConditionalOrder(CThostFtdcErrorConditionalOrderField *pErrorConditionalOrder) {
  Message msg = {.event = "OnRtnErrorConditionalOrder",
                 .error_code = 0,
                 .error_message = "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pErrorConditionalOrder != nullptr) {
    j["res"]["value"] = *pErrorConditionalOrder;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 执行宣告通知 */
void Bridge::OnRtnExecOrder(CThostFtdcExecOrderField *pExecOrder) {
  Message msg = {.event = "OnRtnExecOrder",
                 .error_code = 0,
                 .error_message = "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pExecOrder != nullptr) {
    j["res"]["value"] = *pExecOrder;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 执行宣告录入错误回报 */
void Bridge::OnErrRtnExecOrderInsert(CThostFtdcInputExecOrderField *pInputExecOrder, CThostFtdcRspInfoField *pRspInfo) {
  Message msg = {.event = "OnErrRtnExecOrderInsert",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pInputExecOrder != nullptr) {
    j["res"]["value"] = *pInputExecOrder;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 执行宣告操作错误回报 */
void Bridge::OnErrRtnExecOrderAction(CThostFtdcExecOrderActionField *pExecOrderAction, CThostFtdcRspInfoField *pRspInfo) {
  Message msg = {.event = "OnErrRtnExecOrderAction",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pExecOrderAction != nullptr) {
    j["res"]["value"] = *pExecOrderAction;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 询价录入错误回报 */
void Bridge::OnErrRtnForQuoteInsert(CThostFtdcInputForQuoteField *pInputForQuote, CThostFtdcRspInfoField *pRspInfo) {
  Message msg = {.event = "OnErrRtnForQuoteInsert",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pInputForQuote != nullptr) {
    j["res"]["value"] = *pInputForQuote;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 报价通知 */
void Bridge::OnRtnQuote(CThostFtdcQuoteField *pQuote) {
  Message msg = {.event = "OnRtnQuote",
                 .error_code = 0,
                 .error_message = "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pQuote != nullptr) {
    j["res"]["value"] = *pQuote;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 报价录入错误回报 */
void Bridge::OnErrRtnQuoteInsert(CThostFtdcInputQuoteField *pInputQuote, CThostFtdcRspInfoField *pRspInfo) {
  Message msg = {.event = "OnErrRtnQuoteInsert",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pInputQuote != nullptr) {
    j["res"]["value"] = *pInputQuote;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 报价操作错误回报 */
void Bridge::OnErrRtnQuoteAction(CThostFtdcQuoteActionField *pQuoteAction, CThostFtdcRspInfoField *pRspInfo) {
  Message msg = {.event = "OnErrRtnQuoteAction",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pQuoteAction != nullptr) {
    j["res"]["value"] = *pQuoteAction;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 询价通知 */
void Bridge::OnRtnForQuoteRsp(CThostFtdcForQuoteRspField *pForQuoteRsp) {
  Message msg = {.event = "OnRtnForQuoteRsp",
                 .error_code = 0,
                 .error_message = "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pForQuoteRsp != nullptr) {
    j["res"]["value"] = *pForQuoteRsp;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 保证金监控中心用户令牌 */
void Bridge::OnRtnCFMMCTradingAccountToken(CThostFtdcCFMMCTradingAccountTokenField *pCFMMCTradingAccountToken) {
  Message msg = {.event = "OnRtnCFMMCTradingAccountToken",
                 .error_code = 0,
                 .error_message = "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pCFMMCTradingAccountToken != nullptr) {
    j["res"]["value"] = *pCFMMCTradingAccountToken;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 批量报单操作错误回报 */
void Bridge::OnErrRtnBatchOrderAction(CThostFtdcBatchOrderActionField *pBatchOrderAction, CThostFtdcRspInfoField *pRspInfo) {
  Message msg = {.event = "OnErrRtnBatchOrderAction",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pBatchOrderAction != nullptr) {
    j["res"]["value"] = *pBatchOrderAction;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 期权自对冲通知 */
void Bridge::OnRtnOptionSelfClose(CThostFtdcOptionSelfCloseField *pOptionSelfClose) {
  Message msg = {.event = "OnRtnOptionSelfClose",
                 .error_code = 0,
                 .error_message = "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pOptionSelfClose != nullptr) {
    j["res"]["value"] = *pOptionSelfClose;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 期权自对冲录入错误回报 */
void Bridge::OnErrRtnOptionSelfCloseInsert(CThostFtdcInputOptionSelfCloseField *pInputOptionSelfClose, CThostFtdcRspInfoField *pRspInfo) {
  Message msg = {.event = "OnErrRtnOptionSelfCloseInsert",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pInputOptionSelfClose != nullptr) {
    j["res"]["value"] = *pInputOptionSelfClose;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 期权自对冲操作错误回报 */
void Bridge::OnErrRtnOptionSelfCloseAction(CThostFtdcOptionSelfCloseActionField *pOptionSelfCloseAction, CThostFtdcRspInfoField *pRspInfo) {
  Message msg = {.event = "OnErrRtnOptionSelfCloseAction",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pOptionSelfCloseAction != nullptr) {
    j["res"]["value"] = *pOptionSelfCloseAction;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 申请组合通知 */
void Bridge::OnRtnCombAction(CThostFtdcCombActionField *pCombAction) {
  Message msg = {.event = "OnRtnCombAction",
                 .error_code = 0,
                 .error_message = "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pCombAction != nullptr) {
    j["res"]["value"] = *pCombAction;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 申请组合录入错误回报 */
void Bridge::OnErrRtnCombActionInsert(CThostFtdcInputCombActionField *pInputCombAction, CThostFtdcRspInfoField *pRspInfo) {
  Message msg = {.event = "OnErrRtnCombActionInsert",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pInputCombAction != nullptr) {
    j["res"]["value"] = *pInputCombAction;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询签约银行响应 */
void Bridge::OnRspQryContractBank(CThostFtdcContractBankField *pContractBank, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryContractBank",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pContractBank != nullptr) {
    j["res"]["value"] = *pContractBank;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询预埋单响应 */
void Bridge::OnRspQryParkedOrder(CThostFtdcParkedOrderField *pParkedOrder, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryParkedOrder",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pParkedOrder != nullptr) {
    j["res"]["value"] = *pParkedOrder;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询预埋撤单响应 */
void Bridge::OnRspQryParkedOrderAction(CThostFtdcParkedOrderActionField *pParkedOrderAction, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryParkedOrderAction",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pParkedOrderAction != nullptr) {
    j["res"]["value"] = *pParkedOrderAction;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询交易通知响应 */
void Bridge::OnRspQryTradingNotice(CThostFtdcTradingNoticeField *pTradingNotice, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryTradingNotice",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pTradingNotice != nullptr) {
    j["res"]["value"] = *pTradingNotice;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询经纪公司交易参数响应 */
void Bridge::OnRspQryBrokerTradingParams(CThostFtdcBrokerTradingParamsField *pBrokerTradingParams, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryBrokerTradingParams",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pBrokerTradingParams != nullptr) {
    j["res"]["value"] = *pBrokerTradingParams;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询经纪公司交易算法响应 */
void Bridge::OnRspQryBrokerTradingAlgos(CThostFtdcBrokerTradingAlgosField *pBrokerTradingAlgos, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryBrokerTradingAlgos",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pBrokerTradingAlgos != nullptr) {
    j["res"]["value"] = *pBrokerTradingAlgos;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询监控中心用户令牌 */
void Bridge::OnRspQueryCFMMCTradingAccountToken(CThostFtdcQueryCFMMCTradingAccountTokenField *pQueryCFMMCTradingAccountToken, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQueryCFMMCTradingAccountToken",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pQueryCFMMCTradingAccountToken != nullptr) {
    j["res"]["value"] = *pQueryCFMMCTradingAccountToken;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 银行发起银行资金转期货通知 */
void Bridge::OnRtnFromBankToFutureByBank(CThostFtdcRspTransferField *pRspTransfer) {
  Message msg = {.event = "OnRtnFromBankToFutureByBank",
                 .error_code = 0,
                 .error_message = "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pRspTransfer != nullptr) {
    j["res"]["value"] = *pRspTransfer;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 银行发起期货资金转银行通知 */
void Bridge::OnRtnFromFutureToBankByBank(CThostFtdcRspTransferField *pRspTransfer) {
  Message msg = {.event = "OnRtnFromFutureToBankByBank",
                 .error_code = 0,
                 .error_message = "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pRspTransfer != nullptr) {
    j["res"]["value"] = *pRspTransfer;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 银行发起冲正银行转期货通知 */
void Bridge::OnRtnRepealFromBankToFutureByBank(CThostFtdcRspRepealField *pRspRepeal) {
  Message msg = {.event = "OnRtnRepealFromBankToFutureByBank",
                 .error_code = 0,
                 .error_message = "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pRspRepeal != nullptr) {
    j["res"]["value"] = *pRspRepeal;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 银行发起冲正期货转银行通知 */
void Bridge::OnRtnRepealFromFutureToBankByBank(CThostFtdcRspRepealField *pRspRepeal) {
  Message msg = {.event = "OnRtnRepealFromFutureToBankByBank",
                 .error_code = 0,
                 .error_message = "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pRspRepeal != nullptr) {
    j["res"]["value"] = *pRspRepeal;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 期货发起银行资金转期货通知 */
void Bridge::OnRtnFromBankToFutureByFuture(CThostFtdcRspTransferField *pRspTransfer) {
  Message msg = {.event = "OnRtnFromBankToFutureByFuture",
                 .error_code = 0,
                 .error_message = "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pRspTransfer != nullptr) {
    j["res"]["value"] = *pRspTransfer;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 期货发起期货资金转银行通知 */
void Bridge::OnRtnFromFutureToBankByFuture(CThostFtdcRspTransferField *pRspTransfer) {
  Message msg = {.event = "OnRtnFromFutureToBankByFuture",
                 .error_code = 0,
                 .error_message = "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pRspTransfer != nullptr) {
    j["res"]["value"] = *pRspTransfer;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 系统运行时期货端手工发起冲正银行转期货请求，银行处理完毕后报盘发回的通知 */
void Bridge::OnRtnRepealFromBankToFutureByFutureManual(CThostFtdcRspRepealField *pRspRepeal) {
  Message msg = {.event = "OnRtnRepealFromBankToFutureByFutureManual",
                 .error_code = 0,
                 .error_message = "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pRspRepeal != nullptr) {
    j["res"]["value"] = *pRspRepeal;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 系统运行时期货端手工发起冲正期货转银行请求，银行处理完毕后报盘发回的通知 */
void Bridge::OnRtnRepealFromFutureToBankByFutureManual(CThostFtdcRspRepealField *pRspRepeal) {
  Message msg = {.event = "OnRtnRepealFromFutureToBankByFutureManual",
                 .error_code = 0,
                 .error_message = "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pRspRepeal != nullptr) {
    j["res"]["value"] = *pRspRepeal;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 期货发起查询银行余额通知 */
void Bridge::OnRtnQueryBankBalanceByFuture(CThostFtdcNotifyQueryAccountField *pNotifyQueryAccount) {
  Message msg = {.event = "OnRtnQueryBankBalanceByFuture",
                 .error_code = 0,
                 .error_message = "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pNotifyQueryAccount != nullptr) {
    j["res"]["value"] = *pNotifyQueryAccount;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 期货发起银行资金转期货错误回报 */
void Bridge::OnErrRtnBankToFutureByFuture(CThostFtdcReqTransferField *pReqTransfer, CThostFtdcRspInfoField *pRspInfo) {
  Message msg = {.event = "OnErrRtnBankToFutureByFuture",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pReqTransfer != nullptr) {
    j["res"]["value"] = *pReqTransfer;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 期货发起期货资金转银行错误回报 */
void Bridge::OnErrRtnFutureToBankByFuture(CThostFtdcReqTransferField *pReqTransfer, CThostFtdcRspInfoField *pRspInfo) {
  Message msg = {.event = "OnErrRtnFutureToBankByFuture",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pReqTransfer != nullptr) {
    j["res"]["value"] = *pReqTransfer;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 系统运行时期货端手工发起冲正银行转期货错误回报 */
void Bridge::OnErrRtnRepealBankToFutureByFutureManual(CThostFtdcReqRepealField *pReqRepeal, CThostFtdcRspInfoField *pRspInfo) {
  Message msg = {.event = "OnErrRtnRepealBankToFutureByFutureManual",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pReqRepeal != nullptr) {
    j["res"]["value"] = *pReqRepeal;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 系统运行时期货端手工发起冲正期货转银行错误回报 */
void Bridge::OnErrRtnRepealFutureToBankByFutureManual(CThostFtdcReqRepealField *pReqRepeal, CThostFtdcRspInfoField *pRspInfo) {
  Message msg = {.event = "OnErrRtnRepealFutureToBankByFutureManual",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pReqRepeal != nullptr) {
    j["res"]["value"] = *pReqRepeal;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 期货发起查询银行余额错误回报 */
void Bridge::OnErrRtnQueryBankBalanceByFuture(CThostFtdcReqQueryAccountField *pReqQueryAccount, CThostFtdcRspInfoField *pRspInfo) {
  Message msg = {.event = "OnErrRtnQueryBankBalanceByFuture",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pReqQueryAccount != nullptr) {
    j["res"]["value"] = *pReqQueryAccount;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 期货发起冲正银行转期货请求，银行处理完毕后报盘发回的通知 */
void Bridge::OnRtnRepealFromBankToFutureByFuture(CThostFtdcRspRepealField *pRspRepeal) {
  Message msg = {.event = "OnRtnRepealFromBankToFutureByFuture",
                 .error_code = 0,
                 .error_message = "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pRspRepeal != nullptr) {
    j["res"]["value"] = *pRspRepeal;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 期货发起冲正期货转银行请求，银行处理完毕后报盘发回的通知 */
void Bridge::OnRtnRepealFromFutureToBankByFuture(CThostFtdcRspRepealField *pRspRepeal) {
  Message msg = {.event = "OnRtnRepealFromFutureToBankByFuture",
                 .error_code = 0,
                 .error_message = "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pRspRepeal != nullptr) {
    j["res"]["value"] = *pRspRepeal;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 期货发起银行资金转期货应答 */
void Bridge::OnRspFromBankToFutureByFuture(CThostFtdcReqTransferField *pReqTransfer, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspFromBankToFutureByFuture",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pReqTransfer != nullptr) {
    j["res"]["value"] = *pReqTransfer;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 期货发起期货资金转银行应答 */
void Bridge::OnRspFromFutureToBankByFuture(CThostFtdcReqTransferField *pReqTransfer, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspFromFutureToBankByFuture",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pReqTransfer != nullptr) {
    j["res"]["value"] = *pReqTransfer;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 期货发起查询银行余额应答 */
void Bridge::OnRspQueryBankAccountMoneyByFuture(CThostFtdcReqQueryAccountField *pReqQueryAccount, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQueryBankAccountMoneyByFuture",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pReqQueryAccount != nullptr) {
    j["res"]["value"] = *pReqQueryAccount;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 银行发起银期开户通知 */
void Bridge::OnRtnOpenAccountByBank(CThostFtdcOpenAccountField *pOpenAccount) {
  Message msg = {.event = "OnRtnOpenAccountByBank",
                 .error_code = 0,
                 .error_message = "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pOpenAccount != nullptr) {
    j["res"]["value"] = *pOpenAccount;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 银行发起银期销户通知 */
void Bridge::OnRtnCancelAccountByBank(CThostFtdcCancelAccountField *pCancelAccount) {
  Message msg = {.event = "OnRtnCancelAccountByBank",
                 .error_code = 0,
                 .error_message = "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pCancelAccount != nullptr) {
    j["res"]["value"] = *pCancelAccount;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 银行发起变更银行账号通知 */
void Bridge::OnRtnChangeAccountByBank(CThostFtdcChangeAccountField *pChangeAccount) {
  Message msg = {.event = "OnRtnChangeAccountByBank",
                 .error_code = 0,
                 .error_message = "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pChangeAccount != nullptr) {
    j["res"]["value"] = *pChangeAccount;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求查询分类合约响应 */
void Bridge::OnRspQryClassifiedInstrument(CThostFtdcInstrumentField *pInstrument, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryClassifiedInstrument",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pInstrument != nullptr) {
    j["res"]["value"] = *pInstrument;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 请求组合优惠比例响应 */
void Bridge::OnRspQryCombPromotionParam(CThostFtdcCombPromotionParamField *pCombPromotionParam, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryCombPromotionParam",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pCombPromotionParam != nullptr) {
    j["res"]["value"] = *pCombPromotionParam;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 投资者风险结算持仓查询响应 */
void Bridge::OnRspQryRiskSettleInvstPosition(CThostFtdcRiskSettleInvstPositionField *pRiskSettleInvstPosition, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryRiskSettleInvstPosition",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pRiskSettleInvstPosition != nullptr) {
    j["res"]["value"] = *pRiskSettleInvstPosition;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 风险结算产品查询响应 */
void Bridge::OnRspQryRiskSettleProductStatus(CThostFtdcRiskSettleProductStatusField *pRiskSettleProductStatus, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryRiskSettleProductStatus",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pRiskSettleProductStatus != nullptr) {
    j["res"]["value"] = *pRiskSettleProductStatus;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* SPBM期货合约参数查询响应 */
void Bridge::OnRspQrySPBMFutureParameter(CThostFtdcSPBMFutureParameterField *pSPBMFutureParameter, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQrySPBMFutureParameter",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pSPBMFutureParameter != nullptr) {
    j["res"]["value"] = *pSPBMFutureParameter;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* SPBM期权合约参数查询响应 */
void Bridge::OnRspQrySPBMOptionParameter(CThostFtdcSPBMOptionParameterField *pSPBMOptionParameter, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQrySPBMOptionParameter",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pSPBMOptionParameter != nullptr) {
    j["res"]["value"] = *pSPBMOptionParameter;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* SPBM品种内对锁仓折扣参数查询响应 */
void Bridge::OnRspQrySPBMIntraParameter(CThostFtdcSPBMIntraParameterField *pSPBMIntraParameter, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQrySPBMIntraParameter",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pSPBMIntraParameter != nullptr) {
    j["res"]["value"] = *pSPBMIntraParameter;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* SPBM跨品种抵扣参数查询响应 */
void Bridge::OnRspQrySPBMInterParameter(CThostFtdcSPBMInterParameterField *pSPBMInterParameter, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQrySPBMInterParameter",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pSPBMInterParameter != nullptr) {
    j["res"]["value"] = *pSPBMInterParameter;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* SPBM组合保证金套餐查询响应 */
void Bridge::OnRspQrySPBMPortfDefinition(CThostFtdcSPBMPortfDefinitionField *pSPBMPortfDefinition, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQrySPBMPortfDefinition",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pSPBMPortfDefinition != nullptr) {
    j["res"]["value"] = *pSPBMPortfDefinition;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 投资者SPBM套餐选择查询响应 */
void Bridge::OnRspQrySPBMInvestorPortfDef(CThostFtdcSPBMInvestorPortfDefField *pSPBMInvestorPortfDef, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQrySPBMInvestorPortfDef",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pSPBMInvestorPortfDef != nullptr) {
    j["res"]["value"] = *pSPBMInvestorPortfDef;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 投资者新型组合保证金系数查询响应 */
void Bridge::OnRspQryInvestorPortfMarginRatio(CThostFtdcInvestorPortfMarginRatioField *pInvestorPortfMarginRatio, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryInvestorPortfMarginRatio",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pInvestorPortfMarginRatio != nullptr) {
    j["res"]["value"] = *pInvestorPortfMarginRatio;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 投资者产品SPBM明细查询响应 */
void Bridge::OnRspQryInvestorProdSPBMDetail(CThostFtdcInvestorProdSPBMDetailField *pInvestorProdSPBMDetail, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryInvestorProdSPBMDetail",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pInvestorProdSPBMDetail != nullptr) {
    j["res"]["value"] = *pInvestorProdSPBMDetail;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 投资者商品组SPMM记录查询响应 */
void Bridge::OnRspQryInvestorCommoditySPMMMargin(CThostFtdcInvestorCommoditySPMMMarginField *pInvestorCommoditySPMMMargin, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryInvestorCommoditySPMMMargin",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pInvestorCommoditySPMMMargin != nullptr) {
    j["res"]["value"] = *pInvestorCommoditySPMMMargin;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 投资者商品群SPMM记录查询响应 */
void Bridge::OnRspQryInvestorCommodityGroupSPMMMargin(CThostFtdcInvestorCommodityGroupSPMMMarginField *pInvestorCommodityGroupSPMMMargin, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryInvestorCommodityGroupSPMMMargin",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pInvestorCommodityGroupSPMMMargin != nullptr) {
    j["res"]["value"] = *pInvestorCommodityGroupSPMMMargin;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* SPMM合约参数查询响应 */
void Bridge::OnRspQrySPMMInstParam(CThostFtdcSPMMInstParamField *pSPMMInstParam, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQrySPMMInstParam",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pSPMMInstParam != nullptr) {
    j["res"]["value"] = *pSPMMInstParam;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* SPMM产品参数查询响应 */
void Bridge::OnRspQrySPMMProductParam(CThostFtdcSPMMProductParamField *pSPMMProductParam, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQrySPMMProductParam",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pSPMMProductParam != nullptr) {
    j["res"]["value"] = *pSPMMProductParam;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* SPBM附加跨品种抵扣参数查询响应 */
void Bridge::OnRspQrySPBMAddOnInterParameter(CThostFtdcSPBMAddOnInterParameterField *pSPBMAddOnInterParameter, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQrySPBMAddOnInterParameter",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pSPBMAddOnInterParameter != nullptr) {
    j["res"]["value"] = *pSPBMAddOnInterParameter;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* RCAMS产品组合信息查询响应 */
void Bridge::OnRspQryRCAMSCombProductInfo(CThostFtdcRCAMSCombProductInfoField *pRCAMSCombProductInfo, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryRCAMSCombProductInfo",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pRCAMSCombProductInfo != nullptr) {
    j["res"]["value"] = *pRCAMSCombProductInfo;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* RCAMS同合约风险对冲参数查询响应 */
void Bridge::OnRspQryRCAMSInstrParameter(CThostFtdcRCAMSInstrParameterField *pRCAMSInstrParameter, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryRCAMSInstrParameter",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pRCAMSInstrParameter != nullptr) {
    j["res"]["value"] = *pRCAMSInstrParameter;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* RCAMS品种内风险对冲参数查询响应 */
void Bridge::OnRspQryRCAMSIntraParameter(CThostFtdcRCAMSIntraParameterField *pRCAMSIntraParameter, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryRCAMSIntraParameter",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pRCAMSIntraParameter != nullptr) {
    j["res"]["value"] = *pRCAMSIntraParameter;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* RCAMS跨品种风险折抵参数查询响应 */
void Bridge::OnRspQryRCAMSInterParameter(CThostFtdcRCAMSInterParameterField *pRCAMSInterParameter, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryRCAMSInterParameter",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pRCAMSInterParameter != nullptr) {
    j["res"]["value"] = *pRCAMSInterParameter;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* RCAMS空头期权风险调整参数查询响应 */
void Bridge::OnRspQryRCAMSShortOptAdjustParam(CThostFtdcRCAMSShortOptAdjustParamField *pRCAMSShortOptAdjustParam, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryRCAMSShortOptAdjustParam",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pRCAMSShortOptAdjustParam != nullptr) {
    j["res"]["value"] = *pRCAMSShortOptAdjustParam;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* RCAMS策略组合持仓查询响应 */
void Bridge::OnRspQryRCAMSInvestorCombPosition(CThostFtdcRCAMSInvestorCombPositionField *pRCAMSInvestorCombPosition, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryRCAMSInvestorCombPosition",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pRCAMSInvestorCombPosition != nullptr) {
    j["res"]["value"] = *pRCAMSInvestorCombPosition;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 投资者品种RCAMS保证金查询响应 */
void Bridge::OnRspQryInvestorProdRCAMSMargin(CThostFtdcInvestorProdRCAMSMarginField *pInvestorProdRCAMSMargin, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryInvestorProdRCAMSMargin",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pInvestorProdRCAMSMargin != nullptr) {
    j["res"]["value"] = *pInvestorProdRCAMSMargin;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* RULE合约保证金参数查询响应 */
void Bridge::OnRspQryRULEInstrParameter(CThostFtdcRULEInstrParameterField *pRULEInstrParameter, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryRULEInstrParameter",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pRULEInstrParameter != nullptr) {
    j["res"]["value"] = *pRULEInstrParameter;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* RULE品种内对锁仓折扣参数查询响应 */
void Bridge::OnRspQryRULEIntraParameter(CThostFtdcRULEIntraParameterField *pRULEIntraParameter, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryRULEIntraParameter",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pRULEIntraParameter != nullptr) {
    j["res"]["value"] = *pRULEIntraParameter;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* RULE跨品种抵扣参数查询响应 */
void Bridge::OnRspQryRULEInterParameter(CThostFtdcRULEInterParameterField *pRULEInterParameter, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryRULEInterParameter",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pRULEInterParameter != nullptr) {
    j["res"]["value"] = *pRULEInterParameter;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 投资者产品RULE保证金查询响应 */
void Bridge::OnRspQryInvestorProdRULEMargin(CThostFtdcInvestorProdRULEMarginField *pInvestorProdRULEMargin, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryInvestorProdRULEMargin",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pInvestorProdRULEMargin != nullptr) {
    j["res"]["value"] = *pInvestorProdRULEMargin;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 投资者新型组合保证金开关查询响应 */
void Bridge::OnRspQryInvestorPortfSetting(CThostFtdcInvestorPortfSettingField *pInvestorPortfSetting, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryInvestorPortfSetting",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pInvestorPortfSetting != nullptr) {
    j["res"]["value"] = *pInvestorPortfSetting;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 投资者申报费阶梯收取记录查询响应 */
void Bridge::OnRspQryInvestorInfoCommRec(CThostFtdcInvestorInfoCommRecField *pInvestorInfoCommRec, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryInvestorInfoCommRec",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pInvestorInfoCommRec != nullptr) {
    j["res"]["value"] = *pInvestorInfoCommRec;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 组合腿信息查询响应 */
void Bridge::OnRspQryCombLeg(CThostFtdcCombLegField *pCombLeg, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryCombLeg",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pCombLeg != nullptr) {
    j["res"]["value"] = *pCombLeg;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 对冲设置请求响应 */
void Bridge::OnRspOffsetSetting(CThostFtdcInputOffsetSettingField *pInputOffsetSetting, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspOffsetSetting",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pInputOffsetSetting != nullptr) {
    j["res"]["value"] = *pInputOffsetSetting;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 对冲设置撤销请求响应 */
void Bridge::OnRspCancelOffsetSetting(CThostFtdcInputOffsetSettingField *pInputOffsetSetting, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspCancelOffsetSetting",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pInputOffsetSetting != nullptr) {
    j["res"]["value"] = *pInputOffsetSetting;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 对冲设置通知 */
void Bridge::OnRtnOffsetSetting(CThostFtdcOffsetSettingField *pOffsetSetting) {
  Message msg = {.event = "OnRtnOffsetSetting",
                 .error_code = 0,
                 .error_message = "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pOffsetSetting != nullptr) {
    j["res"]["value"] = *pOffsetSetting;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 对冲设置错误回报 */
void Bridge::OnErrRtnOffsetSetting(CThostFtdcInputOffsetSettingField *pInputOffsetSetting, CThostFtdcRspInfoField *pRspInfo) {
  Message msg = {.event = "OnErrRtnOffsetSetting",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pInputOffsetSetting != nullptr) {
    j["res"]["value"] = *pInputOffsetSetting;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 对冲设置撤销错误回报 */
void Bridge::OnErrRtnCancelOffsetSetting(CThostFtdcCancelOffsetSettingField *pCancelOffsetSetting, CThostFtdcRspInfoField *pRspInfo) {
  Message msg = {.event = "OnErrRtnCancelOffsetSetting",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = true};
  json j;
  j["request_id"] = 0;
  j["res"] = msg;
  if (pCancelOffsetSetting != nullptr) {
    j["res"]["value"] = *pCancelOffsetSetting;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



/* 投资者对冲设置查询响应 */
void Bridge::OnRspQryOffsetSetting(CThostFtdcOffsetSettingField *pOffsetSetting, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  Message msg = {.event = "OnRspQryOffsetSetting",
                 .error_code = pRspInfo != nullptr ? pRspInfo->ErrorID : 0,
                 .error_message = pRspInfo != nullptr ? codec_convert("UTF-8//TRANSLIT", "GBK", pRspInfo->ErrorMsg): "",
                 .is_last = bIsLast};
  json j;
  j["request_id"] = nRequestID;
  j["res"] = msg;
  if (pOffsetSetting != nullptr) {
    j["res"]["value"] = *pOffsetSetting;
  }
  try {
    std::string string_msg = j.dump();
    spdlog::info("ZMQ PUSH: {}", string_msg);
    push_sock_.send(zmq::buffer(string_msg));
    spdlog::info("SentZMQ");
  } catch (json::exception &e) {
    spdlog::error("error: {}", e.what());
    throw;
  }
}



void Bridge::Serve() {

  if (md_api_ == nullptr) {

    spdlog::warn("MdApi has not been set before Serve; market data requests will not be handled");

  }

  auto serveThread = std::async(std::launch::async, ListenReq, trader_api_, &push_sock_, &pull_sock_, md_api_);

  serveThread.wait();

}



void Bridge::ListenReq(CThostFtdcTraderApi *trader_api, zmq::socket_t *push_sock, zmq::socket_t *pull_sock, CThostFtdcMdApi *md_api) {
  while (true) {
    zmq::message_t msg;
    spdlog::info("ReceivingZMQ");
    auto res = pull_sock->recv(msg, zmq::recv_flags::none);
    spdlog::info("ReceivedZMQ");
    std::string string_msg = msg.to_string();
    spdlog::info("ZMQ PULL: {}", string_msg);
    json data_array = json::parse(string_msg);
    for (json::iterator it = data_array.begin(); it != data_array.end(); ++it) {
      json data = *it;
      std::string method_name = data["req"]["method"].get<std::string>();
      /* 客户端认证请求 */
      if (method_name == "ReqAuthenticate") {
        auto field = data["req"]["params"].get<CThostFtdcReqAuthenticateField>();
        auto a = trader_api->ReqAuthenticate(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqAuthenticate",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 用户登录请求 */
      if (method_name == "ReqUserLogin") {
        auto field = data["req"]["params"].get<CThostFtdcReqUserLoginField>();
        auto a = trader_api->ReqUserLogin(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqUserLogin",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 登出请求 */
      if (method_name == "ReqUserLogout") {
        auto field = data["req"]["params"].get<CThostFtdcUserLogoutField>();
        auto a = trader_api->ReqUserLogout(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqUserLogout",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 用户口令更新请求 */
      if (method_name == "ReqUserPasswordUpdate") {
        auto field = data["req"]["params"].get<CThostFtdcUserPasswordUpdateField>();
        auto a = trader_api->ReqUserPasswordUpdate(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqUserPasswordUpdate",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 资金账户口令更新请求 */
      if (method_name == "ReqTradingAccountPasswordUpdate") {
        auto field = data["req"]["params"].get<CThostFtdcTradingAccountPasswordUpdateField>();
        auto a = trader_api->ReqTradingAccountPasswordUpdate(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqTradingAccountPasswordUpdate",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 查询用户当前支持的认证模式 */
      if (method_name == "ReqUserAuthMethod") {
        auto field = data["req"]["params"].get<CThostFtdcReqUserAuthMethodField>();
        auto a = trader_api->ReqUserAuthMethod(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqUserAuthMethod",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 用户发出获取图形验证码请求 */
      if (method_name == "ReqGenUserCaptcha") {
        auto field = data["req"]["params"].get<CThostFtdcReqGenUserCaptchaField>();
        auto a = trader_api->ReqGenUserCaptcha(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqGenUserCaptcha",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 用户发出获取短信验证码请求 */
      if (method_name == "ReqGenUserText") {
        auto field = data["req"]["params"].get<CThostFtdcReqGenUserTextField>();
        auto a = trader_api->ReqGenUserText(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqGenUserText",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 用户发出带有图片验证码的登陆请求 */
      if (method_name == "ReqUserLoginWithCaptcha") {
        auto field = data["req"]["params"].get<CThostFtdcReqUserLoginWithCaptchaField>();
        auto a = trader_api->ReqUserLoginWithCaptcha(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqUserLoginWithCaptcha",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 用户发出带有短信验证码的登陆请求 */
      if (method_name == "ReqUserLoginWithText") {
        auto field = data["req"]["params"].get<CThostFtdcReqUserLoginWithTextField>();
        auto a = trader_api->ReqUserLoginWithText(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqUserLoginWithText",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 用户发出带有动态口令的登陆请求 */
      if (method_name == "ReqUserLoginWithOTP") {
        auto field = data["req"]["params"].get<CThostFtdcReqUserLoginWithOTPField>();
        auto a = trader_api->ReqUserLoginWithOTP(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqUserLoginWithOTP",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 报单录入请求 */
      if (method_name == "ReqOrderInsert") {
        auto field = data["req"]["params"].get<CThostFtdcInputOrderField>();
        auto a = trader_api->ReqOrderInsert(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqOrderInsert",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 预埋单录入请求 */
      if (method_name == "ReqParkedOrderInsert") {
        auto field = data["req"]["params"].get<CThostFtdcParkedOrderField>();
        auto a = trader_api->ReqParkedOrderInsert(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqParkedOrderInsert",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 预埋撤单录入请求 */
      if (method_name == "ReqParkedOrderAction") {
        auto field = data["req"]["params"].get<CThostFtdcParkedOrderActionField>();
        auto a = trader_api->ReqParkedOrderAction(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqParkedOrderAction",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 报单操作请求 */
      if (method_name == "ReqOrderAction") {
        auto field = data["req"]["params"].get<CThostFtdcInputOrderActionField>();
        auto a = trader_api->ReqOrderAction(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqOrderAction",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 查询最大报单数量请求 */
      if (method_name == "ReqQryMaxOrderVolume") {
        auto field = data["req"]["params"].get<CThostFtdcQryMaxOrderVolumeField>();
        auto a = trader_api->ReqQryMaxOrderVolume(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryMaxOrderVolume",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 投资者结算结果确认 */
      if (method_name == "ReqSettlementInfoConfirm") {
        auto field = data["req"]["params"].get<CThostFtdcSettlementInfoConfirmField>();
        auto a = trader_api->ReqSettlementInfoConfirm(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqSettlementInfoConfirm",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求删除预埋单 */
      if (method_name == "ReqRemoveParkedOrder") {
        auto field = data["req"]["params"].get<CThostFtdcRemoveParkedOrderField>();
        auto a = trader_api->ReqRemoveParkedOrder(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqRemoveParkedOrder",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求删除预埋撤单 */
      if (method_name == "ReqRemoveParkedOrderAction") {
        auto field = data["req"]["params"].get<CThostFtdcRemoveParkedOrderActionField>();
        auto a = trader_api->ReqRemoveParkedOrderAction(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqRemoveParkedOrderAction",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 执行宣告录入请求 */
      if (method_name == "ReqExecOrderInsert") {
        auto field = data["req"]["params"].get<CThostFtdcInputExecOrderField>();
        auto a = trader_api->ReqExecOrderInsert(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqExecOrderInsert",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 执行宣告操作请求 */
      if (method_name == "ReqExecOrderAction") {
        auto field = data["req"]["params"].get<CThostFtdcInputExecOrderActionField>();
        auto a = trader_api->ReqExecOrderAction(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqExecOrderAction",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 询价录入请求 */
      if (method_name == "ReqForQuoteInsert") {
        auto field = data["req"]["params"].get<CThostFtdcInputForQuoteField>();
        auto a = trader_api->ReqForQuoteInsert(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqForQuoteInsert",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 报价录入请求 */
      if (method_name == "ReqQuoteInsert") {
        auto field = data["req"]["params"].get<CThostFtdcInputQuoteField>();
        auto a = trader_api->ReqQuoteInsert(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQuoteInsert",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 报价操作请求 */
      if (method_name == "ReqQuoteAction") {
        auto field = data["req"]["params"].get<CThostFtdcInputQuoteActionField>();
        auto a = trader_api->ReqQuoteAction(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQuoteAction",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 批量报单操作请求 */
      if (method_name == "ReqBatchOrderAction") {
        auto field = data["req"]["params"].get<CThostFtdcInputBatchOrderActionField>();
        auto a = trader_api->ReqBatchOrderAction(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqBatchOrderAction",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 期权自对冲录入请求 */
      if (method_name == "ReqOptionSelfCloseInsert") {
        auto field = data["req"]["params"].get<CThostFtdcInputOptionSelfCloseField>();
        auto a = trader_api->ReqOptionSelfCloseInsert(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqOptionSelfCloseInsert",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 期权自对冲操作请求 */
      if (method_name == "ReqOptionSelfCloseAction") {
        auto field = data["req"]["params"].get<CThostFtdcInputOptionSelfCloseActionField>();
        auto a = trader_api->ReqOptionSelfCloseAction(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqOptionSelfCloseAction",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 申请组合录入请求 */
      if (method_name == "ReqCombActionInsert") {
        auto field = data["req"]["params"].get<CThostFtdcInputCombActionField>();
        auto a = trader_api->ReqCombActionInsert(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqCombActionInsert",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询报单 */
      if (method_name == "ReqQryOrder") {
        auto field = data["req"]["params"].get<CThostFtdcQryOrderField>();
        auto a = trader_api->ReqQryOrder(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryOrder",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询成交 */
      if (method_name == "ReqQryTrade") {
        auto field = data["req"]["params"].get<CThostFtdcQryTradeField>();
        auto a = trader_api->ReqQryTrade(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryTrade",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询投资者持仓 */
      if (method_name == "ReqQryInvestorPosition") {
        auto field = data["req"]["params"].get<CThostFtdcQryInvestorPositionField>();
        auto a = trader_api->ReqQryInvestorPosition(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryInvestorPosition",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询资金账户 */
      if (method_name == "ReqQryTradingAccount") {
        auto field = data["req"]["params"].get<CThostFtdcQryTradingAccountField>();
        auto a = trader_api->ReqQryTradingAccount(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryTradingAccount",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询投资者 */
      if (method_name == "ReqQryInvestor") {
        auto field = data["req"]["params"].get<CThostFtdcQryInvestorField>();
        auto a = trader_api->ReqQryInvestor(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryInvestor",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询交易编码 */
      if (method_name == "ReqQryTradingCode") {
        auto field = data["req"]["params"].get<CThostFtdcQryTradingCodeField>();
        auto a = trader_api->ReqQryTradingCode(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryTradingCode",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询合约保证金率 */
      if (method_name == "ReqQryInstrumentMarginRate") {
        auto field = data["req"]["params"].get<CThostFtdcQryInstrumentMarginRateField>();
        auto a = trader_api->ReqQryInstrumentMarginRate(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryInstrumentMarginRate",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询合约手续费率 */
      if (method_name == "ReqQryInstrumentCommissionRate") {
        auto field = data["req"]["params"].get<CThostFtdcQryInstrumentCommissionRateField>();
        auto a = trader_api->ReqQryInstrumentCommissionRate(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryInstrumentCommissionRate",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询交易所 */
      if (method_name == "ReqQryExchange") {
        auto field = data["req"]["params"].get<CThostFtdcQryExchangeField>();
        auto a = trader_api->ReqQryExchange(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryExchange",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询产品 */
      if (method_name == "ReqQryProduct") {
        auto field = data["req"]["params"].get<CThostFtdcQryProductField>();
        auto a = trader_api->ReqQryProduct(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryProduct",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询合约 */
      if (method_name == "ReqQryInstrument") {
        auto field = data["req"]["params"].get<CThostFtdcQryInstrumentField>();
        auto a = trader_api->ReqQryInstrument(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryInstrument",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询行情 */
      if (method_name == "ReqQryDepthMarketData") {
        auto field = data["req"]["params"].get<CThostFtdcQryDepthMarketDataField>();
        auto a = trader_api->ReqQryDepthMarketData(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryDepthMarketData",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询交易员报盘机 */
      if (method_name == "ReqQryTraderOffer") {
        auto field = data["req"]["params"].get<CThostFtdcQryTraderOfferField>();
        auto a = trader_api->ReqQryTraderOffer(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryTraderOffer",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询投资者结算结果 */
      if (method_name == "ReqQrySettlementInfo") {
        auto field = data["req"]["params"].get<CThostFtdcQrySettlementInfoField>();
        auto a = trader_api->ReqQrySettlementInfo(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQrySettlementInfo",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询转帐银行 */
      if (method_name == "ReqQryTransferBank") {
        auto field = data["req"]["params"].get<CThostFtdcQryTransferBankField>();
        auto a = trader_api->ReqQryTransferBank(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryTransferBank",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询投资者持仓明细 */
      if (method_name == "ReqQryInvestorPositionDetail") {
        auto field = data["req"]["params"].get<CThostFtdcQryInvestorPositionDetailField>();
        auto a = trader_api->ReqQryInvestorPositionDetail(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryInvestorPositionDetail",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询客户通知 */
      if (method_name == "ReqQryNotice") {
        auto field = data["req"]["params"].get<CThostFtdcQryNoticeField>();
        auto a = trader_api->ReqQryNotice(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryNotice",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询结算信息确认 */
      if (method_name == "ReqQrySettlementInfoConfirm") {
        auto field = data["req"]["params"].get<CThostFtdcQrySettlementInfoConfirmField>();
        auto a = trader_api->ReqQrySettlementInfoConfirm(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQrySettlementInfoConfirm",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询投资者持仓明细 */
      if (method_name == "ReqQryInvestorPositionCombineDetail") {
        auto field = data["req"]["params"].get<CThostFtdcQryInvestorPositionCombineDetailField>();
        auto a = trader_api->ReqQryInvestorPositionCombineDetail(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryInvestorPositionCombineDetail",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询保证金监管系统经纪公司资金账户密钥 */
      if (method_name == "ReqQryCFMMCTradingAccountKey") {
        auto field = data["req"]["params"].get<CThostFtdcQryCFMMCTradingAccountKeyField>();
        auto a = trader_api->ReqQryCFMMCTradingAccountKey(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryCFMMCTradingAccountKey",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询仓单折抵信息 */
      if (method_name == "ReqQryEWarrantOffset") {
        auto field = data["req"]["params"].get<CThostFtdcQryEWarrantOffsetField>();
        auto a = trader_api->ReqQryEWarrantOffset(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryEWarrantOffset",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询投资者品种/跨品种保证金 */
      if (method_name == "ReqQryInvestorProductGroupMargin") {
        auto field = data["req"]["params"].get<CThostFtdcQryInvestorProductGroupMarginField>();
        auto a = trader_api->ReqQryInvestorProductGroupMargin(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryInvestorProductGroupMargin",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询交易所保证金率 */
      if (method_name == "ReqQryExchangeMarginRate") {
        auto field = data["req"]["params"].get<CThostFtdcQryExchangeMarginRateField>();
        auto a = trader_api->ReqQryExchangeMarginRate(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryExchangeMarginRate",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询交易所调整保证金率 */
      if (method_name == "ReqQryExchangeMarginRateAdjust") {
        auto field = data["req"]["params"].get<CThostFtdcQryExchangeMarginRateAdjustField>();
        auto a = trader_api->ReqQryExchangeMarginRateAdjust(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryExchangeMarginRateAdjust",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询汇率 */
      if (method_name == "ReqQryExchangeRate") {
        auto field = data["req"]["params"].get<CThostFtdcQryExchangeRateField>();
        auto a = trader_api->ReqQryExchangeRate(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryExchangeRate",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询二级代理操作员银期权限 */
      if (method_name == "ReqQrySecAgentACIDMap") {
        auto field = data["req"]["params"].get<CThostFtdcQrySecAgentACIDMapField>();
        auto a = trader_api->ReqQrySecAgentACIDMap(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQrySecAgentACIDMap",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询产品报价汇率 */
      if (method_name == "ReqQryProductExchRate") {
        auto field = data["req"]["params"].get<CThostFtdcQryProductExchRateField>();
        auto a = trader_api->ReqQryProductExchRate(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryProductExchRate",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询产品组 */
      if (method_name == "ReqQryProductGroup") {
        auto field = data["req"]["params"].get<CThostFtdcQryProductGroupField>();
        auto a = trader_api->ReqQryProductGroup(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryProductGroup",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询做市商合约手续费率 */
      if (method_name == "ReqQryMMInstrumentCommissionRate") {
        auto field = data["req"]["params"].get<CThostFtdcQryMMInstrumentCommissionRateField>();
        auto a = trader_api->ReqQryMMInstrumentCommissionRate(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryMMInstrumentCommissionRate",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询做市商期权合约手续费 */
      if (method_name == "ReqQryMMOptionInstrCommRate") {
        auto field = data["req"]["params"].get<CThostFtdcQryMMOptionInstrCommRateField>();
        auto a = trader_api->ReqQryMMOptionInstrCommRate(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryMMOptionInstrCommRate",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询报单手续费 */
      if (method_name == "ReqQryInstrumentOrderCommRate") {
        auto field = data["req"]["params"].get<CThostFtdcQryInstrumentOrderCommRateField>();
        auto a = trader_api->ReqQryInstrumentOrderCommRate(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryInstrumentOrderCommRate",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询资金账户 */
      if (method_name == "ReqQrySecAgentTradingAccount") {
        auto field = data["req"]["params"].get<CThostFtdcQryTradingAccountField>();
        auto a = trader_api->ReqQrySecAgentTradingAccount(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQrySecAgentTradingAccount",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询二级代理商资金校验模式 */
      if (method_name == "ReqQrySecAgentCheckMode") {
        auto field = data["req"]["params"].get<CThostFtdcQrySecAgentCheckModeField>();
        auto a = trader_api->ReqQrySecAgentCheckMode(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQrySecAgentCheckMode",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询二级代理商信息 */
      if (method_name == "ReqQrySecAgentTradeInfo") {
        auto field = data["req"]["params"].get<CThostFtdcQrySecAgentTradeInfoField>();
        auto a = trader_api->ReqQrySecAgentTradeInfo(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQrySecAgentTradeInfo",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询期权交易成本 */
      if (method_name == "ReqQryOptionInstrTradeCost") {
        auto field = data["req"]["params"].get<CThostFtdcQryOptionInstrTradeCostField>();
        auto a = trader_api->ReqQryOptionInstrTradeCost(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryOptionInstrTradeCost",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询期权合约手续费 */
      if (method_name == "ReqQryOptionInstrCommRate") {
        auto field = data["req"]["params"].get<CThostFtdcQryOptionInstrCommRateField>();
        auto a = trader_api->ReqQryOptionInstrCommRate(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryOptionInstrCommRate",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询执行宣告 */
      if (method_name == "ReqQryExecOrder") {
        auto field = data["req"]["params"].get<CThostFtdcQryExecOrderField>();
        auto a = trader_api->ReqQryExecOrder(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryExecOrder",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询询价 */
      if (method_name == "ReqQryForQuote") {
        auto field = data["req"]["params"].get<CThostFtdcQryForQuoteField>();
        auto a = trader_api->ReqQryForQuote(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryForQuote",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询报价 */
      if (method_name == "ReqQryQuote") {
        auto field = data["req"]["params"].get<CThostFtdcQryQuoteField>();
        auto a = trader_api->ReqQryQuote(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryQuote",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询期权自对冲 */
      if (method_name == "ReqQryOptionSelfClose") {
        auto field = data["req"]["params"].get<CThostFtdcQryOptionSelfCloseField>();
        auto a = trader_api->ReqQryOptionSelfClose(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryOptionSelfClose",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询投资单元 */
      if (method_name == "ReqQryInvestUnit") {
        auto field = data["req"]["params"].get<CThostFtdcQryInvestUnitField>();
        auto a = trader_api->ReqQryInvestUnit(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryInvestUnit",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询组合合约安全系数 */
      if (method_name == "ReqQryCombInstrumentGuard") {
        auto field = data["req"]["params"].get<CThostFtdcQryCombInstrumentGuardField>();
        auto a = trader_api->ReqQryCombInstrumentGuard(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryCombInstrumentGuard",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询申请组合 */
      if (method_name == "ReqQryCombAction") {
        auto field = data["req"]["params"].get<CThostFtdcQryCombActionField>();
        auto a = trader_api->ReqQryCombAction(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryCombAction",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询转帐流水 */
      if (method_name == "ReqQryTransferSerial") {
        auto field = data["req"]["params"].get<CThostFtdcQryTransferSerialField>();
        auto a = trader_api->ReqQryTransferSerial(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryTransferSerial",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询银期签约关系 */
      if (method_name == "ReqQryAccountregister") {
        auto field = data["req"]["params"].get<CThostFtdcQryAccountregisterField>();
        auto a = trader_api->ReqQryAccountregister(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryAccountregister",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询签约银行 */
      if (method_name == "ReqQryContractBank") {
        auto field = data["req"]["params"].get<CThostFtdcQryContractBankField>();
        auto a = trader_api->ReqQryContractBank(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryContractBank",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询预埋单 */
      if (method_name == "ReqQryParkedOrder") {
        auto field = data["req"]["params"].get<CThostFtdcQryParkedOrderField>();
        auto a = trader_api->ReqQryParkedOrder(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryParkedOrder",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询预埋撤单 */
      if (method_name == "ReqQryParkedOrderAction") {
        auto field = data["req"]["params"].get<CThostFtdcQryParkedOrderActionField>();
        auto a = trader_api->ReqQryParkedOrderAction(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryParkedOrderAction",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询交易通知 */
      if (method_name == "ReqQryTradingNotice") {
        auto field = data["req"]["params"].get<CThostFtdcQryTradingNoticeField>();
        auto a = trader_api->ReqQryTradingNotice(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryTradingNotice",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询经纪公司交易参数 */
      if (method_name == "ReqQryBrokerTradingParams") {
        auto field = data["req"]["params"].get<CThostFtdcQryBrokerTradingParamsField>();
        auto a = trader_api->ReqQryBrokerTradingParams(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryBrokerTradingParams",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询经纪公司交易算法 */
      if (method_name == "ReqQryBrokerTradingAlgos") {
        auto field = data["req"]["params"].get<CThostFtdcQryBrokerTradingAlgosField>();
        auto a = trader_api->ReqQryBrokerTradingAlgos(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryBrokerTradingAlgos",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询监控中心用户令牌 */
      if (method_name == "ReqQueryCFMMCTradingAccountToken") {
        auto field = data["req"]["params"].get<CThostFtdcQueryCFMMCTradingAccountTokenField>();
        auto a = trader_api->ReqQueryCFMMCTradingAccountToken(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQueryCFMMCTradingAccountToken",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 期货发起银行资金转期货请求 */
      if (method_name == "ReqFromBankToFutureByFuture") {
        auto field = data["req"]["params"].get<CThostFtdcReqTransferField>();
        auto a = trader_api->ReqFromBankToFutureByFuture(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqFromBankToFutureByFuture",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 期货发起期货资金转银行请求 */
      if (method_name == "ReqFromFutureToBankByFuture") {
        auto field = data["req"]["params"].get<CThostFtdcReqTransferField>();
        auto a = trader_api->ReqFromFutureToBankByFuture(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqFromFutureToBankByFuture",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 期货发起查询银行余额请求 */
      if (method_name == "ReqQueryBankAccountMoneyByFuture") {
        auto field = data["req"]["params"].get<CThostFtdcReqQueryAccountField>();
        auto a = trader_api->ReqQueryBankAccountMoneyByFuture(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQueryBankAccountMoneyByFuture",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询分类合约 */
      if (method_name == "ReqQryClassifiedInstrument") {
        auto field = data["req"]["params"].get<CThostFtdcQryClassifiedInstrumentField>();
        auto a = trader_api->ReqQryClassifiedInstrument(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryClassifiedInstrument",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求组合优惠比例 */
      if (method_name == "ReqQryCombPromotionParam") {
        auto field = data["req"]["params"].get<CThostFtdcQryCombPromotionParamField>();
        auto a = trader_api->ReqQryCombPromotionParam(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryCombPromotionParam",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 投资者风险结算持仓查询 */
      if (method_name == "ReqQryRiskSettleInvstPosition") {
        auto field = data["req"]["params"].get<CThostFtdcQryRiskSettleInvstPositionField>();
        auto a = trader_api->ReqQryRiskSettleInvstPosition(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryRiskSettleInvstPosition",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 风险结算产品查询 */
      if (method_name == "ReqQryRiskSettleProductStatus") {
        auto field = data["req"]["params"].get<CThostFtdcQryRiskSettleProductStatusField>();
        auto a = trader_api->ReqQryRiskSettleProductStatus(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryRiskSettleProductStatus",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* SPBM期货合约参数查询 */
      if (method_name == "ReqQrySPBMFutureParameter") {
        auto field = data["req"]["params"].get<CThostFtdcQrySPBMFutureParameterField>();
        auto a = trader_api->ReqQrySPBMFutureParameter(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQrySPBMFutureParameter",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* SPBM期权合约参数查询 */
      if (method_name == "ReqQrySPBMOptionParameter") {
        auto field = data["req"]["params"].get<CThostFtdcQrySPBMOptionParameterField>();
        auto a = trader_api->ReqQrySPBMOptionParameter(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQrySPBMOptionParameter",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* SPBM品种内对锁仓折扣参数查询 */
      if (method_name == "ReqQrySPBMIntraParameter") {
        auto field = data["req"]["params"].get<CThostFtdcQrySPBMIntraParameterField>();
        auto a = trader_api->ReqQrySPBMIntraParameter(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQrySPBMIntraParameter",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* SPBM跨品种抵扣参数查询 */
      if (method_name == "ReqQrySPBMInterParameter") {
        auto field = data["req"]["params"].get<CThostFtdcQrySPBMInterParameterField>();
        auto a = trader_api->ReqQrySPBMInterParameter(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQrySPBMInterParameter",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* SPBM组合保证金套餐查询 */
      if (method_name == "ReqQrySPBMPortfDefinition") {
        auto field = data["req"]["params"].get<CThostFtdcQrySPBMPortfDefinitionField>();
        auto a = trader_api->ReqQrySPBMPortfDefinition(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQrySPBMPortfDefinition",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 投资者SPBM套餐选择查询 */
      if (method_name == "ReqQrySPBMInvestorPortfDef") {
        auto field = data["req"]["params"].get<CThostFtdcQrySPBMInvestorPortfDefField>();
        auto a = trader_api->ReqQrySPBMInvestorPortfDef(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQrySPBMInvestorPortfDef",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 投资者新型组合保证金系数查询 */
      if (method_name == "ReqQryInvestorPortfMarginRatio") {
        auto field = data["req"]["params"].get<CThostFtdcQryInvestorPortfMarginRatioField>();
        auto a = trader_api->ReqQryInvestorPortfMarginRatio(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryInvestorPortfMarginRatio",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 投资者产品SPBM明细查询 */
      if (method_name == "ReqQryInvestorProdSPBMDetail") {
        auto field = data["req"]["params"].get<CThostFtdcQryInvestorProdSPBMDetailField>();
        auto a = trader_api->ReqQryInvestorProdSPBMDetail(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryInvestorProdSPBMDetail",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 投资者商品组SPMM记录查询 */
      if (method_name == "ReqQryInvestorCommoditySPMMMargin") {
        auto field = data["req"]["params"].get<CThostFtdcQryInvestorCommoditySPMMMarginField>();
        auto a = trader_api->ReqQryInvestorCommoditySPMMMargin(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryInvestorCommoditySPMMMargin",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 投资者商品群SPMM记录查询 */
      if (method_name == "ReqQryInvestorCommodityGroupSPMMMargin") {
        auto field = data["req"]["params"].get<CThostFtdcQryInvestorCommodityGroupSPMMMarginField>();
        auto a = trader_api->ReqQryInvestorCommodityGroupSPMMMargin(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryInvestorCommodityGroupSPMMMargin",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* SPMM合约参数查询 */
      if (method_name == "ReqQrySPMMInstParam") {
        auto field = data["req"]["params"].get<CThostFtdcQrySPMMInstParamField>();
        auto a = trader_api->ReqQrySPMMInstParam(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQrySPMMInstParam",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* SPMM产品参数查询 */
      if (method_name == "ReqQrySPMMProductParam") {
        auto field = data["req"]["params"].get<CThostFtdcQrySPMMProductParamField>();
        auto a = trader_api->ReqQrySPMMProductParam(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQrySPMMProductParam",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* SPBM附加跨品种抵扣参数查询 */
      if (method_name == "ReqQrySPBMAddOnInterParameter") {
        auto field = data["req"]["params"].get<CThostFtdcQrySPBMAddOnInterParameterField>();
        auto a = trader_api->ReqQrySPBMAddOnInterParameter(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQrySPBMAddOnInterParameter",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* RCAMS产品组合信息查询 */
      if (method_name == "ReqQryRCAMSCombProductInfo") {
        auto field = data["req"]["params"].get<CThostFtdcQryRCAMSCombProductInfoField>();
        auto a = trader_api->ReqQryRCAMSCombProductInfo(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryRCAMSCombProductInfo",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* RCAMS同合约风险对冲参数查询 */
      if (method_name == "ReqQryRCAMSInstrParameter") {
        auto field = data["req"]["params"].get<CThostFtdcQryRCAMSInstrParameterField>();
        auto a = trader_api->ReqQryRCAMSInstrParameter(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryRCAMSInstrParameter",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* RCAMS品种内风险对冲参数查询 */
      if (method_name == "ReqQryRCAMSIntraParameter") {
        auto field = data["req"]["params"].get<CThostFtdcQryRCAMSIntraParameterField>();
        auto a = trader_api->ReqQryRCAMSIntraParameter(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryRCAMSIntraParameter",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* RCAMS跨品种风险折抵参数查询 */
      if (method_name == "ReqQryRCAMSInterParameter") {
        auto field = data["req"]["params"].get<CThostFtdcQryRCAMSInterParameterField>();
        auto a = trader_api->ReqQryRCAMSInterParameter(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryRCAMSInterParameter",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* RCAMS空头期权风险调整参数查询 */
      if (method_name == "ReqQryRCAMSShortOptAdjustParam") {
        auto field = data["req"]["params"].get<CThostFtdcQryRCAMSShortOptAdjustParamField>();
        auto a = trader_api->ReqQryRCAMSShortOptAdjustParam(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryRCAMSShortOptAdjustParam",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* RCAMS策略组合持仓查询 */
      if (method_name == "ReqQryRCAMSInvestorCombPosition") {
        auto field = data["req"]["params"].get<CThostFtdcQryRCAMSInvestorCombPositionField>();
        auto a = trader_api->ReqQryRCAMSInvestorCombPosition(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryRCAMSInvestorCombPosition",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 投资者品种RCAMS保证金查询 */
      if (method_name == "ReqQryInvestorProdRCAMSMargin") {
        auto field = data["req"]["params"].get<CThostFtdcQryInvestorProdRCAMSMarginField>();
        auto a = trader_api->ReqQryInvestorProdRCAMSMargin(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryInvestorProdRCAMSMargin",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* RULE合约保证金参数查询 */
      if (method_name == "ReqQryRULEInstrParameter") {
        auto field = data["req"]["params"].get<CThostFtdcQryRULEInstrParameterField>();
        auto a = trader_api->ReqQryRULEInstrParameter(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryRULEInstrParameter",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* RULE品种内对锁仓折扣参数查询 */
      if (method_name == "ReqQryRULEIntraParameter") {
        auto field = data["req"]["params"].get<CThostFtdcQryRULEIntraParameterField>();
        auto a = trader_api->ReqQryRULEIntraParameter(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryRULEIntraParameter",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* RULE跨品种抵扣参数查询 */
      if (method_name == "ReqQryRULEInterParameter") {
        auto field = data["req"]["params"].get<CThostFtdcQryRULEInterParameterField>();
        auto a = trader_api->ReqQryRULEInterParameter(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryRULEInterParameter",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 投资者产品RULE保证金查询 */
      if (method_name == "ReqQryInvestorProdRULEMargin") {
        auto field = data["req"]["params"].get<CThostFtdcQryInvestorProdRULEMarginField>();
        auto a = trader_api->ReqQryInvestorProdRULEMargin(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryInvestorProdRULEMargin",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 投资者新型组合保证金开关查询 */
      if (method_name == "ReqQryInvestorPortfSetting") {
        auto field = data["req"]["params"].get<CThostFtdcQryInvestorPortfSettingField>();
        auto a = trader_api->ReqQryInvestorPortfSetting(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryInvestorPortfSetting",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 投资者申报费阶梯收取记录查询 */
      if (method_name == "ReqQryInvestorInfoCommRec") {
        auto field = data["req"]["params"].get<CThostFtdcQryInvestorInfoCommRecField>();
        auto a = trader_api->ReqQryInvestorInfoCommRec(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryInvestorInfoCommRec",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 组合腿信息查询 */
      if (method_name == "ReqQryCombLeg") {
        auto field = data["req"]["params"].get<CThostFtdcQryCombLegField>();
        auto a = trader_api->ReqQryCombLeg(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryCombLeg",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 对冲设置请求 */
      if (method_name == "ReqOffsetSetting") {
        auto field = data["req"]["params"].get<CThostFtdcInputOffsetSettingField>();
        auto a = trader_api->ReqOffsetSetting(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqOffsetSetting",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 对冲设置撤销请求 */
      if (method_name == "ReqCancelOffsetSetting") {
        auto field = data["req"]["params"].get<CThostFtdcInputOffsetSettingField>();
        auto a = trader_api->ReqCancelOffsetSetting(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqCancelOffsetSetting",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 投资者对冲设置查询 */
      if (method_name == "ReqQryOffsetSetting") {
        auto field = data["req"]["params"].get<CThostFtdcQryOffsetSettingField>();
        auto a = trader_api->ReqQryOffsetSetting(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "ReqQryOffsetSetting",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 用户登录请求 */
      if (method_name == "ReqUserLogin") {
        if (md_api == nullptr) {
          spdlog::error("MdApi not initialized when invoking ReqUserLogin");
          continue;
        }
        auto field = data["req"]["params"].get<CThostFtdcReqUserLoginField>();
        auto a = md_api->ReqUserLogin(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "Md_ReqUserLogin",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 登出请求 */
      if (method_name == "ReqUserLogout") {
        if (md_api == nullptr) {
          spdlog::error("MdApi not initialized when invoking ReqUserLogout");
          continue;
        }
        auto field = data["req"]["params"].get<CThostFtdcUserLogoutField>();
        auto a = md_api->ReqUserLogout(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "Md_ReqUserLogout",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* 请求查询组播合约 */
      if (method_name == "ReqQryMulticastInstrument") {
        if (md_api == nullptr) {
          spdlog::error("MdApi not initialized when invoking ReqQryMulticastInstrument");
          continue;
        }
        auto field = data["req"]["params"].get<CThostFtdcQryMulticastInstrumentField>();
        auto a = md_api->ReqQryMulticastInstrument(&field, data["request_id"].get<int>());
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "Md_ReqQryMulticastInstrument",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* @remark  */
      if (method_name == "SubscribeMarketData") {
        if (md_api == nullptr) {
          spdlog::error("MdApi not initialized when invoking SubscribeMarketData");
          continue;
        }
        auto instrument_ids = data["req"]["params"].at("instrument_ids").get<std::vector<std::string>>();
        std::vector<std::string> buffer;
        buffer.reserve(instrument_ids.size());
        for (auto &id : instrument_ids) {
          buffer.emplace_back(id);
        }
        std::vector<char *> ptrs;
        ptrs.reserve(buffer.size());
        for (auto &id : buffer) {
          ptrs.emplace_back(const_cast<char *>(id.c_str()));
        }
        auto a = md_api->SubscribeMarketData(ptrs.data(), static_cast<int>(ptrs.size()));
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "Md_SubscribeMarketData",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* @remark  */
      if (method_name == "UnSubscribeMarketData") {
        if (md_api == nullptr) {
          spdlog::error("MdApi not initialized when invoking UnSubscribeMarketData");
          continue;
        }
        auto instrument_ids = data["req"]["params"].at("instrument_ids").get<std::vector<std::string>>();
        std::vector<std::string> buffer;
        buffer.reserve(instrument_ids.size());
        for (auto &id : instrument_ids) {
          buffer.emplace_back(id);
        }
        std::vector<char *> ptrs;
        ptrs.reserve(buffer.size());
        for (auto &id : buffer) {
          ptrs.emplace_back(const_cast<char *>(id.c_str()));
        }
        auto a = md_api->UnSubscribeMarketData(ptrs.data(), static_cast<int>(ptrs.size()));
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "Md_UnSubscribeMarketData",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* @remark  */
      if (method_name == "SubscribeForQuoteRsp") {
        if (md_api == nullptr) {
          spdlog::error("MdApi not initialized when invoking SubscribeForQuoteRsp");
          continue;
        }
        auto instrument_ids = data["req"]["params"].at("instrument_ids").get<std::vector<std::string>>();
        std::vector<std::string> buffer;
        buffer.reserve(instrument_ids.size());
        for (auto &id : instrument_ids) {
          buffer.emplace_back(id);
        }
        std::vector<char *> ptrs;
        ptrs.reserve(buffer.size());
        for (auto &id : buffer) {
          ptrs.emplace_back(const_cast<char *>(id.c_str()));
        }
        auto a = md_api->SubscribeForQuoteRsp(ptrs.data(), static_cast<int>(ptrs.size()));
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "Md_SubscribeForQuoteRsp",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      /* @remark  */
      if (method_name == "UnSubscribeForQuoteRsp") {
        if (md_api == nullptr) {
          spdlog::error("MdApi not initialized when invoking UnSubscribeForQuoteRsp");
          continue;
        }
        auto instrument_ids = data["req"]["params"].at("instrument_ids").get<std::vector<std::string>>();
        std::vector<std::string> buffer;
        buffer.reserve(instrument_ids.size());
        for (auto &id : instrument_ids) {
          buffer.emplace_back(id);
        }
        std::vector<char *> ptrs;
        ptrs.reserve(buffer.size());
        for (auto &id : buffer) {
          ptrs.emplace_back(const_cast<char *>(id.c_str()));
        }
        auto a = md_api->UnSubscribeForQuoteRsp(ptrs.data(), static_cast<int>(ptrs.size()));
        if (a != 0) {
          spdlog::error("RTN CODE: {}", a);
          Message msg = {.event = "Md_UnSubscribeForQuoteRsp",
                         .error_code = a,
                         .error_message = "error",
                         .is_last = true};
          json j;
          j["request_id"] = data["request_id"];
          j["res"] = msg;
          try {
            std::string string_msg = j.dump();
            spdlog::info("ZMQ PUSH: {}", string_msg);
            push_sock->send(zmq::buffer(string_msg));
            spdlog::info("SentZMQ");
          } catch (json::exception &e) {
            spdlog::error("error: {}", e.what());
            throw;
          }
        } else {
          spdlog::info("RTN CODE: {}", a);
        }
        continue;
      }

      Message resp = {.event="UNKNOWN",
                      .error_code=0,
                      .error_message="",
                      .is_last=true};
      json j;
      j["request_id"] = data["request_id"];
      j["res"] = resp;
      std::string string_resp = j.dump();
      spdlog::info("ZMQ PUSH: {}", string_resp);
      push_sock->send(zmq::buffer(string_resp));
      spdlog::info("SentZMQ");
    }
  }
}